
distance_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000450c  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080046a4  080046a4  000056a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046dc  080046dc  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  080046dc  080046dc  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046dc  080046dc  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046dc  080046dc  000056dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046e0  080046e0  000056e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080046e4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000108  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000114  20000114  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eb7b  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002244  00000000  00000000  00014bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c60  00000000  00000000  00016e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009a8  00000000  00000000  00017a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002224b  00000000  00000000  00018408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001117a  00000000  00000000  0003a653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6d51  00000000  00000000  0004b7cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011251e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003408  00000000  00000000  00112564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  0011596c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800468c 	.word	0x0800468c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	0800468c 	.word	0x0800468c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	@ 0x28
 8000a18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	4b35      	ldr	r3, [pc, #212]	@ (8000b00 <MX_GPIO_Init+0xec>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	4a34      	ldr	r2, [pc, #208]	@ (8000b00 <MX_GPIO_Init+0xec>)
 8000a30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a34:	6153      	str	r3, [r2, #20]
 8000a36:	4b32      	ldr	r3, [pc, #200]	@ (8000b00 <MX_GPIO_Init+0xec>)
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a42:	4b2f      	ldr	r3, [pc, #188]	@ (8000b00 <MX_GPIO_Init+0xec>)
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	4a2e      	ldr	r2, [pc, #184]	@ (8000b00 <MX_GPIO_Init+0xec>)
 8000a48:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a4c:	6153      	str	r3, [r2, #20]
 8000a4e:	4b2c      	ldr	r3, [pc, #176]	@ (8000b00 <MX_GPIO_Init+0xec>)
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	4b29      	ldr	r3, [pc, #164]	@ (8000b00 <MX_GPIO_Init+0xec>)
 8000a5c:	695b      	ldr	r3, [r3, #20]
 8000a5e:	4a28      	ldr	r2, [pc, #160]	@ (8000b00 <MX_GPIO_Init+0xec>)
 8000a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a64:	6153      	str	r3, [r2, #20]
 8000a66:	4b26      	ldr	r3, [pc, #152]	@ (8000b00 <MX_GPIO_Init+0xec>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	4b23      	ldr	r3, [pc, #140]	@ (8000b00 <MX_GPIO_Init+0xec>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	4a22      	ldr	r2, [pc, #136]	@ (8000b00 <MX_GPIO_Init+0xec>)
 8000a78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a7c:	6153      	str	r3, [r2, #20]
 8000a7e:	4b20      	ldr	r3, [pc, #128]	@ (8000b00 <MX_GPIO_Init+0xec>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2108      	movs	r1, #8
 8000a8e:	481d      	ldr	r0, [pc, #116]	@ (8000b04 <MX_GPIO_Init+0xf0>)
 8000a90:	f000 fe9e 	bl	80017d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2120      	movs	r1, #32
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a9c:	f000 fe98 	bl	80017d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aa0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aa6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4813      	ldr	r0, [pc, #76]	@ (8000b04 <MX_GPIO_Init+0xf0>)
 8000ab8:	f000 fd00 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Trig_Pin;
 8000abc:	2308      	movs	r3, #8
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480c      	ldr	r0, [pc, #48]	@ (8000b04 <MX_GPIO_Init+0xf0>)
 8000ad4:	f000 fcf2 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ad8:	2320      	movs	r3, #32
 8000ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4619      	mov	r1, r3
 8000aee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af2:	f000 fce3 	bl	80014bc <HAL_GPIO_Init>

}
 8000af6:	bf00      	nop
 8000af8:	3728      	adds	r7, #40	@ 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40021000 	.word	0x40021000
 8000b04:	48000800 	.word	0x48000800

08000b08 <_ZN7HC_SR04C1EP17TIM_HandleTypeDef>:
uint32_t ic_val2 = 0;
uint8_t is_first_captured = 0;
uint32_t diff;
float distance;

HC_SR04::HC_SR04(TIM_HandleTypeDef* _htim){
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2200      	movs	r2, #0
 8000b22:	741a      	strb	r2, [r3, #16]
	timer_echo = _htim;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	683a      	ldr	r2, [r7, #0]
 8000b28:	605a      	str	r2, [r3, #4]
}
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <_ZN7HC_SR048delay_usEt>:

void HC_SR04::delay_us(uint16_t us){
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	807b      	strh	r3, [r7, #2]
	  __HAL_TIM_SET_COUNTER(timer_echo, 0);  			// reset counter
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	625a      	str	r2, [r3, #36]	@ 0x24
	  while (__HAL_TIM_GET_COUNTER(timer_echo) < us);
 8000b4e:	bf00      	nop
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b58:	887b      	ldrh	r3, [r7, #2]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	bf34      	ite	cc
 8000b5e:	2301      	movcc	r3, #1
 8000b60:	2300      	movcs	r3, #0
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d1f3      	bne.n	8000b50 <_ZN7HC_SR048delay_usEt+0x18>
};
 8000b68:	bf00      	nop
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
	...

08000b78 <_ZN7HC_SR044ReadEv>:

void HC_SR04::Read(void){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2108      	movs	r1, #8
 8000b84:	4811      	ldr	r0, [pc, #68]	@ (8000bcc <_ZN7HC_SR044ReadEv+0x54>)
 8000b86:	f000 fe23 	bl	80017d0 <HAL_GPIO_WritePin>
	  delay_us(2);
 8000b8a:	2102      	movs	r1, #2
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ffd3 	bl	8000b38 <_ZN7HC_SR048delay_usEt>
	  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);
 8000b92:	2201      	movs	r2, #1
 8000b94:	2108      	movs	r1, #8
 8000b96:	480d      	ldr	r0, [pc, #52]	@ (8000bcc <_ZN7HC_SR044ReadEv+0x54>)
 8000b98:	f000 fe1a 	bl	80017d0 <HAL_GPIO_WritePin>
	  delay_us(10);
 8000b9c:	210a      	movs	r1, #10
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff ffca 	bl	8000b38 <_ZN7HC_SR048delay_usEt>
	  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2108      	movs	r1, #8
 8000ba8:	4808      	ldr	r0, [pc, #32]	@ (8000bcc <_ZN7HC_SR044ReadEv+0x54>)
 8000baa:	f000 fe11 	bl	80017d0 <HAL_GPIO_WritePin>

	  __HAL_TIM_ENABLE_IT(timer_echo, TIM_IT_CC1);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	68da      	ldr	r2, [r3, #12]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f042 0202 	orr.w	r2, r2, #2
 8000bc0:	60da      	str	r2, [r3, #12]
};
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	48000800 	.word	0x48000800

08000bd0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	7f1b      	ldrb	r3, [r3, #28]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d173      	bne.n	8000cc8 <HAL_TIM_IC_CaptureCallback+0xf8>
	  {
	    if (is_first_captured == 0)
 8000be0:	4b3d      	ldr	r3, [pc, #244]	@ (8000cd8 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d11a      	bne.n	8000c1e <HAL_TIM_IC_CaptureCallback+0x4e>
	    {
	      ic_val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000be8:	2100      	movs	r1, #0
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f002 fdda 	bl	80037a4 <HAL_TIM_ReadCapturedValue>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	4a3a      	ldr	r2, [pc, #232]	@ (8000cdc <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000bf4:	6013      	str	r3, [r2, #0]
	      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	6a1a      	ldr	r2, [r3, #32]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f022 020a 	bic.w	r2, r2, #10
 8000c04:	621a      	str	r2, [r3, #32]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	6a1a      	ldr	r2, [r3, #32]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f042 0202 	orr.w	r2, r2, #2
 8000c14:	621a      	str	r2, [r3, #32]
	      is_first_captured = 1;
 8000c16:	4b30      	ldr	r3, [pc, #192]	@ (8000cd8 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	701a      	strb	r2, [r3, #0]

	      distance = (diff * 0.0343) / 2;
	      is_first_captured = 0;
	    }
	  }
};
 8000c1c:	e054      	b.n	8000cc8 <HAL_TIM_IC_CaptureCallback+0xf8>
	      ic_val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000c1e:	2100      	movs	r1, #0
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f002 fdbf 	bl	80037a4 <HAL_TIM_ReadCapturedValue>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4a2d      	ldr	r2, [pc, #180]	@ (8000ce0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000c2a:	6013      	str	r3, [r2, #0]
	      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	6a1a      	ldr	r2, [r3, #32]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f022 020a 	bic.w	r2, r2, #10
 8000c3a:	621a      	str	r2, [r3, #32]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	6a12      	ldr	r2, [r2, #32]
 8000c46:	621a      	str	r2, [r3, #32]
	      __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000c48:	4b26      	ldr	r3, [pc, #152]	@ (8000ce4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	68da      	ldr	r2, [r3, #12]
 8000c4e:	4b25      	ldr	r3, [pc, #148]	@ (8000ce4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f022 0202 	bic.w	r2, r2, #2
 8000c56:	60da      	str	r2, [r3, #12]
	      if (ic_val2 > ic_val1)
 8000c58:	4b21      	ldr	r3, [pc, #132]	@ (8000ce0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cdc <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d907      	bls.n	8000c74 <HAL_TIM_IC_CaptureCallback+0xa4>
	        diff = ic_val2 - ic_val1;
 8000c64:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4b1c      	ldr	r3, [pc, #112]	@ (8000cdc <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ce8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	e009      	b.n	8000c88 <HAL_TIM_IC_CaptureCallback+0xb8>
	        diff = (0xFFFF - ic_val1) + ic_val2;
 8000c74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b18      	ldr	r3, [pc, #96]	@ (8000cdc <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000c82:	33ff      	adds	r3, #255	@ 0xff
 8000c84:	4a18      	ldr	r2, [pc, #96]	@ (8000ce8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000c86:	6013      	str	r3, [r2, #0]
	      distance = (diff * 0.0343) / 2;
 8000c88:	4b17      	ldr	r3, [pc, #92]	@ (8000ce8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fbe5 	bl	800045c <__aeabi_ui2d>
 8000c92:	a30f      	add	r3, pc, #60	@ (adr r3, 8000cd0 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c98:	f7ff fc5a 	bl	8000550 <__aeabi_dmul>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4610      	mov	r0, r2
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f04f 0200 	mov.w	r2, #0
 8000ca8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cac:	f7ff fd7a 	bl	80007a4 <__aeabi_ddiv>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	f7ff fe5c 	bl	8000974 <__aeabi_d2f>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	@ (8000cec <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000cc0:	6013      	str	r3, [r2, #0]
	      is_first_captured = 0;
 8000cc2:	4b05      	ldr	r3, [pc, #20]	@ (8000cd8 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
};
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	04816f00 	.word	0x04816f00
 8000cd4:	3fa18fc5 	.word	0x3fa18fc5
 8000cd8:	20000030 	.word	0x20000030
 8000cdc:	20000028 	.word	0x20000028
 8000ce0:	2000002c 	.word	0x2000002c
 8000ce4:	2000003c 	.word	0x2000003c
 8000ce8:	20000034 	.word	0x20000034
 8000cec:	20000038 	.word	0x20000038

08000cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf6:	f000 fa45 	bl	8001184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfa:	f000 f81b 	bl	8000d34 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfe:	f7ff fe89 	bl	8000a14 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d02:	f000 f9a3 	bl	800104c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000d06:	f000 f8fb 	bl	8000f00 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HC_SR04 hc_sr04(&htim1);
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	4908      	ldr	r1, [pc, #32]	@ (8000d30 <main+0x40>)
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fefa 	bl	8000b08 <_ZN7HC_SR04C1EP17TIM_HandleTypeDef>

  // Starting Timer (Echo Pin) in Capture Compare Mode:
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000d14:	2100      	movs	r1, #0
 8000d16:	4806      	ldr	r0, [pc, #24]	@ (8000d30 <main+0x40>)
 8000d18:	f002 fa5c 	bl	80031d4 <HAL_TIM_IC_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  hc_sr04.Read();
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ff2a 	bl	8000b78 <_ZN7HC_SR044ReadEv>
	  HAL_Delay(100);
 8000d24:	2064      	movs	r0, #100	@ 0x64
 8000d26:	f000 fa93 	bl	8001250 <HAL_Delay>
	  hc_sr04.Read();
 8000d2a:	bf00      	nop
 8000d2c:	e7f6      	b.n	8000d1c <main+0x2c>
 8000d2e:	bf00      	nop
 8000d30:	2000003c 	.word	0x2000003c

08000d34 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b0a6      	sub	sp, #152	@ 0x98
 8000d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000d3e:	2228      	movs	r2, #40	@ 0x28
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f003 fc75 	bl	8004632 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d48:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	2258      	movs	r2, #88	@ 0x58
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f003 fc67 	bl	8004632 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d64:	2302      	movs	r3, #2
 8000d66:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d6c:	2310      	movs	r3, #16
 8000d6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d72:	2302      	movs	r3, #2
 8000d74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d80:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000d84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 fd34 	bl	8001800 <HAL_RCC_OscConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	bf14      	ite	ne
 8000d9e:	2301      	movne	r3, #1
 8000da0:	2300      	moveq	r3, #0
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
 8000da8:	f000 f834 	bl	8000e14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dac:	230f      	movs	r3, #15
 8000dae:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db0:	2302      	movs	r3, #2
 8000db2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000db8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dbc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dc2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f001 fd6d 	bl	80028a8 <HAL_RCC_ClockConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	bf14      	ite	ne
 8000dd4:	2301      	movne	r3, #1
 8000dd6:	2300      	moveq	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 8000dde:	f000 f819 	bl	8000e14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1;
 8000de2:	f241 0302 	movw	r3, #4098	@ 0x1002
 8000de6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000dec:	2300      	movs	r3, #0
 8000dee:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	4618      	mov	r0, r3
 8000df4:	f001 ff78 	bl	8002ce8 <HAL_RCCEx_PeriphCLKConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	bf14      	ite	ne
 8000dfe:	2301      	movne	r3, #1
 8000e00:	2300      	moveq	r3, #0
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8000e08:	f000 f804 	bl	8000e14 <Error_Handler>
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	3798      	adds	r7, #152	@ 0x98
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e18:	b672      	cpsid	i
}
 8000e1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <Error_Handler+0x8>

08000e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	4b0f      	ldr	r3, [pc, #60]	@ (8000e64 <HAL_MspInit+0x44>)
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e64 <HAL_MspInit+0x44>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6193      	str	r3, [r2, #24]
 8000e32:	4b0c      	ldr	r3, [pc, #48]	@ (8000e64 <HAL_MspInit+0x44>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <HAL_MspInit+0x44>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	4a08      	ldr	r2, [pc, #32]	@ (8000e64 <HAL_MspInit+0x44>)
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e48:	61d3      	str	r3, [r2, #28]
 8000e4a:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <HAL_MspInit+0x44>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e56:	2007      	movs	r0, #7
 8000e58:	f000 faee 	bl	8001438 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40021000 	.word	0x40021000

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <NMI_Handler+0x4>

08000e70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <HardFault_Handler+0x4>

08000e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <MemManage_Handler+0x4>

08000e80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebe:	f000 f9a7 	bl	8001210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ecc:	4802      	ldr	r0, [pc, #8]	@ (8000ed8 <TIM1_CC_IRQHandler+0x10>)
 8000ece:	f002 facb 	bl	8003468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	2000003c 	.word	0x2000003c

08000edc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <SystemInit+0x20>)
 8000ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ee6:	4a05      	ldr	r2, [pc, #20]	@ (8000efc <SystemInit+0x20>)
 8000ee8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000eec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f1e:	4b23      	ldr	r3, [pc, #140]	@ (8000fac <MX_TIM1_Init+0xac>)
 8000f20:	4a23      	ldr	r2, [pc, #140]	@ (8000fb0 <MX_TIM1_Init+0xb0>)
 8000f22:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8000f24:	4b21      	ldr	r3, [pc, #132]	@ (8000fac <MX_TIM1_Init+0xac>)
 8000f26:	2254      	movs	r2, #84	@ 0x54
 8000f28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2a:	4b20      	ldr	r3, [pc, #128]	@ (8000fac <MX_TIM1_Init+0xac>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f30:	4b1e      	ldr	r3, [pc, #120]	@ (8000fac <MX_TIM1_Init+0xac>)
 8000f32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f38:	4b1c      	ldr	r3, [pc, #112]	@ (8000fac <MX_TIM1_Init+0xac>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fac <MX_TIM1_Init+0xac>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f44:	4b19      	ldr	r3, [pc, #100]	@ (8000fac <MX_TIM1_Init+0xac>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000f4a:	4818      	ldr	r0, [pc, #96]	@ (8000fac <MX_TIM1_Init+0xac>)
 8000f4c:	f002 f8ea 	bl	8003124 <HAL_TIM_IC_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000f56:	f7ff ff5d 	bl	8000e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	480f      	ldr	r0, [pc, #60]	@ (8000fac <MX_TIM1_Init+0xac>)
 8000f6e:	f002 fe79 	bl	8003c64 <HAL_TIMEx_MasterConfigSynchronization>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f78:	f7ff ff4c 	bl	8000e14 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f80:	2301      	movs	r3, #1
 8000f82:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2200      	movs	r2, #0
 8000f90:	4619      	mov	r1, r3
 8000f92:	4806      	ldr	r0, [pc, #24]	@ (8000fac <MX_TIM1_Init+0xac>)
 8000f94:	f002 fb6a 	bl	800366c <HAL_TIM_IC_ConfigChannel>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000f9e:	f7ff ff39 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	3720      	adds	r7, #32
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	2000003c 	.word	0x2000003c
 8000fb0:	40012c00 	.word	0x40012c00

08000fb4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	@ 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a1b      	ldr	r2, [pc, #108]	@ (8001040 <HAL_TIM_IC_MspInit+0x8c>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d12f      	bne.n	8001036 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8001044 <HAL_TIM_IC_MspInit+0x90>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	4a1a      	ldr	r2, [pc, #104]	@ (8001044 <HAL_TIM_IC_MspInit+0x90>)
 8000fdc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000fe0:	6193      	str	r3, [r2, #24]
 8000fe2:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <HAL_TIM_IC_MspInit+0x90>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <HAL_TIM_IC_MspInit+0x90>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a14      	ldr	r2, [pc, #80]	@ (8001044 <HAL_TIM_IC_MspInit+0x90>)
 8000ff4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ff8:	6153      	str	r3, [r2, #20]
 8000ffa:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <HAL_TIM_IC_MspInit+0x90>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 8001006:	2301      	movs	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001016:	2302      	movs	r3, #2
 8001018:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	4619      	mov	r1, r3
 8001020:	4809      	ldr	r0, [pc, #36]	@ (8001048 <HAL_TIM_IC_MspInit+0x94>)
 8001022:	f000 fa4b 	bl	80014bc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	201b      	movs	r0, #27
 800102c:	f000 fa0f 	bl	800144e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001030:	201b      	movs	r0, #27
 8001032:	f000 fa28 	bl	8001486 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	@ 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40012c00 	.word	0x40012c00
 8001044:	40021000 	.word	0x40021000
 8001048:	48000800 	.word	0x48000800

0800104c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001050:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <MX_USART2_UART_Init+0x58>)
 8001052:	4a15      	ldr	r2, [pc, #84]	@ (80010a8 <MX_USART2_UART_Init+0x5c>)
 8001054:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001056:	4b13      	ldr	r3, [pc, #76]	@ (80010a4 <MX_USART2_UART_Init+0x58>)
 8001058:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800105c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800105e:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <MX_USART2_UART_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001064:	4b0f      	ldr	r3, [pc, #60]	@ (80010a4 <MX_USART2_UART_Init+0x58>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800106a:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <MX_USART2_UART_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001070:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <MX_USART2_UART_Init+0x58>)
 8001072:	220c      	movs	r2, #12
 8001074:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001076:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <MX_USART2_UART_Init+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800107c:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <MX_USART2_UART_Init+0x58>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001082:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <MX_USART2_UART_Init+0x58>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <MX_USART2_UART_Init+0x58>)
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	@ (80010a4 <MX_USART2_UART_Init+0x58>)
 8001090:	f002 fe92 	bl	8003db8 <HAL_UART_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800109a:	f7ff febb 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000088 	.word	0x20000088
 80010a8:	40004400 	.word	0x40004400

080010ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	@ 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a17      	ldr	r2, [pc, #92]	@ (8001128 <HAL_UART_MspInit+0x7c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d128      	bne.n	8001120 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ce:	4b17      	ldr	r3, [pc, #92]	@ (800112c <HAL_UART_MspInit+0x80>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	4a16      	ldr	r2, [pc, #88]	@ (800112c <HAL_UART_MspInit+0x80>)
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d8:	61d3      	str	r3, [r2, #28]
 80010da:	4b14      	ldr	r3, [pc, #80]	@ (800112c <HAL_UART_MspInit+0x80>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <HAL_UART_MspInit+0x80>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4a10      	ldr	r2, [pc, #64]	@ (800112c <HAL_UART_MspInit+0x80>)
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010f0:	6153      	str	r3, [r2, #20]
 80010f2:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <HAL_UART_MspInit+0x80>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010fe:	230c      	movs	r3, #12
 8001100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800110e:	2307      	movs	r3, #7
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111c:	f000 f9ce 	bl	80014bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001120:	bf00      	nop
 8001122:	3728      	adds	r7, #40	@ 0x28
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40004400 	.word	0x40004400
 800112c:	40021000 	.word	0x40021000

08001130 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001130:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001168 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001134:	f7ff fed2 	bl	8000edc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001138:	480c      	ldr	r0, [pc, #48]	@ (800116c <LoopForever+0x6>)
  ldr r1, =_edata
 800113a:	490d      	ldr	r1, [pc, #52]	@ (8001170 <LoopForever+0xa>)
  ldr r2, =_sidata
 800113c:	4a0d      	ldr	r2, [pc, #52]	@ (8001174 <LoopForever+0xe>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001140:	e002      	b.n	8001148 <LoopCopyDataInit>

08001142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001146:	3304      	adds	r3, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800114c:	d3f9      	bcc.n	8001142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114e:	4a0a      	ldr	r2, [pc, #40]	@ (8001178 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001150:	4c0a      	ldr	r4, [pc, #40]	@ (800117c <LoopForever+0x16>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001154:	e001      	b.n	800115a <LoopFillZerobss>

08001156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001158:	3204      	adds	r2, #4

0800115a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800115c:	d3fb      	bcc.n	8001156 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800115e:	f003 fa71 	bl	8004644 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001162:	f7ff fdc5 	bl	8000cf0 <main>

08001166 <LoopForever>:

LoopForever:
    b LoopForever
 8001166:	e7fe      	b.n	8001166 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001168:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800116c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001170:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001174:	080046e4 	.word	0x080046e4
  ldr r2, =_sbss
 8001178:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800117c:	20000114 	.word	0x20000114

08001180 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001180:	e7fe      	b.n	8001180 <ADC1_2_IRQHandler>
	...

08001184 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001188:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <HAL_Init+0x28>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a07      	ldr	r2, [pc, #28]	@ (80011ac <HAL_Init+0x28>)
 800118e:	f043 0310 	orr.w	r3, r3, #16
 8001192:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001194:	2003      	movs	r0, #3
 8001196:	f000 f94f 	bl	8001438 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800119a:	2000      	movs	r0, #0
 800119c:	f000 f808 	bl	80011b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a0:	f7ff fe3e 	bl	8000e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40022000 	.word	0x40022000

080011b0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b8:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <HAL_InitTick+0x54>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b12      	ldr	r3, [pc, #72]	@ (8001208 <HAL_InitTick+0x58>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f967 	bl	80014a2 <HAL_SYSTICK_Config>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e00e      	b.n	80011fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b0f      	cmp	r3, #15
 80011e2:	d80a      	bhi.n	80011fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e4:	2200      	movs	r2, #0
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f000 f92f 	bl	800144e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f0:	4a06      	ldr	r2, [pc, #24]	@ (800120c <HAL_InitTick+0x5c>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e000      	b.n	80011fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000000 	.word	0x20000000
 8001208:	20000008 	.word	0x20000008
 800120c:	20000004 	.word	0x20000004

08001210 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001214:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <HAL_IncTick+0x20>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <HAL_IncTick+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a04      	ldr	r2, [pc, #16]	@ (8001234 <HAL_IncTick+0x24>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000008 	.word	0x20000008
 8001234:	20000110 	.word	0x20000110

08001238 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;  
 800123c:	4b03      	ldr	r3, [pc, #12]	@ (800124c <HAL_GetTick+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000110 	.word	0x20000110

08001250 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001258:	f7ff ffee 	bl	8001238 <HAL_GetTick>
 800125c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001268:	d005      	beq.n	8001276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800126a:	4b0a      	ldr	r3, [pc, #40]	@ (8001294 <HAL_Delay+0x44>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001276:	bf00      	nop
 8001278:	f7ff ffde 	bl	8001238 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	429a      	cmp	r2, r3
 8001286:	d8f7      	bhi.n	8001278 <HAL_Delay+0x28>
  {
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000008 	.word	0x20000008

08001298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a8:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <__NVIC_SetPriorityGrouping+0x44>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012b4:	4013      	ands	r3, r2
 80012b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ca:	4a04      	ldr	r2, [pc, #16]	@ (80012dc <__NVIC_SetPriorityGrouping+0x44>)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	60d3      	str	r3, [r2, #12]
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e4:	4b04      	ldr	r3, [pc, #16]	@ (80012f8 <__NVIC_GetPriorityGrouping+0x18>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	0a1b      	lsrs	r3, r3, #8
 80012ea:	f003 0307 	and.w	r3, r3, #7
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	2b00      	cmp	r3, #0
 800130c:	db0b      	blt.n	8001326 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	f003 021f 	and.w	r2, r3, #31
 8001314:	4907      	ldr	r1, [pc, #28]	@ (8001334 <__NVIC_EnableIRQ+0x38>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	095b      	lsrs	r3, r3, #5
 800131c:	2001      	movs	r0, #1
 800131e:	fa00 f202 	lsl.w	r2, r0, r2
 8001322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000e100 	.word	0xe000e100

08001338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	2b00      	cmp	r3, #0
 800134a:	db0a      	blt.n	8001362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	490c      	ldr	r1, [pc, #48]	@ (8001384 <__NVIC_SetPriority+0x4c>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	0112      	lsls	r2, r2, #4
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	440b      	add	r3, r1
 800135c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001360:	e00a      	b.n	8001378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4908      	ldr	r1, [pc, #32]	@ (8001388 <__NVIC_SetPriority+0x50>)
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	3b04      	subs	r3, #4
 8001370:	0112      	lsls	r2, r2, #4
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	440b      	add	r3, r1
 8001376:	761a      	strb	r2, [r3, #24]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000e100 	.word	0xe000e100
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	@ 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f1c3 0307 	rsb	r3, r3, #7
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	bf28      	it	cs
 80013aa:	2304      	movcs	r3, #4
 80013ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3304      	adds	r3, #4
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	d902      	bls.n	80013bc <NVIC_EncodePriority+0x30>
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3b03      	subs	r3, #3
 80013ba:	e000      	b.n	80013be <NVIC_EncodePriority+0x32>
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43da      	mvns	r2, r3
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	401a      	ands	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d4:	f04f 31ff 	mov.w	r1, #4294967295
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	43d9      	mvns	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	4313      	orrs	r3, r2
         );
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3724      	adds	r7, #36	@ 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001404:	d301      	bcc.n	800140a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001406:	2301      	movs	r3, #1
 8001408:	e00f      	b.n	800142a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140a:	4a0a      	ldr	r2, [pc, #40]	@ (8001434 <SysTick_Config+0x40>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001412:	210f      	movs	r1, #15
 8001414:	f04f 30ff 	mov.w	r0, #4294967295
 8001418:	f7ff ff8e 	bl	8001338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800141c:	4b05      	ldr	r3, [pc, #20]	@ (8001434 <SysTick_Config+0x40>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001422:	4b04      	ldr	r3, [pc, #16]	@ (8001434 <SysTick_Config+0x40>)
 8001424:	2207      	movs	r2, #7
 8001426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	e000e010 	.word	0xe000e010

08001438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ff29 	bl	8001298 <__NVIC_SetPriorityGrouping>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001460:	f7ff ff3e 	bl	80012e0 <__NVIC_GetPriorityGrouping>
 8001464:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	6978      	ldr	r0, [r7, #20]
 800146c:	f7ff ff8e 	bl	800138c <NVIC_EncodePriority>
 8001470:	4602      	mov	r2, r0
 8001472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff5d 	bl	8001338 <__NVIC_SetPriority>
}
 800147e:	bf00      	nop
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff31 	bl	80012fc <__NVIC_EnableIRQ>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ffa2 	bl	80013f4 <SysTick_Config>
 80014b0:	4603      	mov	r3, r0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014bc:	b480      	push	{r7}
 80014be:	b087      	sub	sp, #28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ca:	e160      	b.n	800178e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	2101      	movs	r1, #1
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	fa01 f303 	lsl.w	r3, r1, r3
 80014d8:	4013      	ands	r3, r2
 80014da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 8152 	beq.w	8001788 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d005      	beq.n	80014fc <HAL_GPIO_Init+0x40>
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 0303 	and.w	r3, r3, #3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d130      	bne.n	800155e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	2203      	movs	r2, #3
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	68da      	ldr	r2, [r3, #12]
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001532:	2201      	movs	r2, #1
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	091b      	lsrs	r3, r3, #4
 8001548:	f003 0201 	and.w	r2, r3, #1
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 0303 	and.w	r3, r3, #3
 8001566:	2b03      	cmp	r3, #3
 8001568:	d017      	beq.n	800159a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	2203      	movs	r2, #3
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d123      	bne.n	80015ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	08da      	lsrs	r2, r3, #3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3208      	adds	r2, #8
 80015ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	220f      	movs	r2, #15
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4013      	ands	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	691a      	ldr	r2, [r3, #16]
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f003 0307 	and.w	r3, r3, #7
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	08da      	lsrs	r2, r3, #3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3208      	adds	r2, #8
 80015e8:	6939      	ldr	r1, [r7, #16]
 80015ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	2203      	movs	r2, #3
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 0203 	and.w	r2, r3, #3
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 80ac 	beq.w	8001788 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001630:	4b5e      	ldr	r3, [pc, #376]	@ (80017ac <HAL_GPIO_Init+0x2f0>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4a5d      	ldr	r2, [pc, #372]	@ (80017ac <HAL_GPIO_Init+0x2f0>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	6193      	str	r3, [r2, #24]
 800163c:	4b5b      	ldr	r3, [pc, #364]	@ (80017ac <HAL_GPIO_Init+0x2f0>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001648:	4a59      	ldr	r2, [pc, #356]	@ (80017b0 <HAL_GPIO_Init+0x2f4>)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	089b      	lsrs	r3, r3, #2
 800164e:	3302      	adds	r3, #2
 8001650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	220f      	movs	r2, #15
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4013      	ands	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001672:	d025      	beq.n	80016c0 <HAL_GPIO_Init+0x204>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a4f      	ldr	r2, [pc, #316]	@ (80017b4 <HAL_GPIO_Init+0x2f8>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d01f      	beq.n	80016bc <HAL_GPIO_Init+0x200>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a4e      	ldr	r2, [pc, #312]	@ (80017b8 <HAL_GPIO_Init+0x2fc>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d019      	beq.n	80016b8 <HAL_GPIO_Init+0x1fc>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a4d      	ldr	r2, [pc, #308]	@ (80017bc <HAL_GPIO_Init+0x300>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d013      	beq.n	80016b4 <HAL_GPIO_Init+0x1f8>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a4c      	ldr	r2, [pc, #304]	@ (80017c0 <HAL_GPIO_Init+0x304>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d00d      	beq.n	80016b0 <HAL_GPIO_Init+0x1f4>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a4b      	ldr	r2, [pc, #300]	@ (80017c4 <HAL_GPIO_Init+0x308>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d007      	beq.n	80016ac <HAL_GPIO_Init+0x1f0>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a4a      	ldr	r2, [pc, #296]	@ (80017c8 <HAL_GPIO_Init+0x30c>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d101      	bne.n	80016a8 <HAL_GPIO_Init+0x1ec>
 80016a4:	2306      	movs	r3, #6
 80016a6:	e00c      	b.n	80016c2 <HAL_GPIO_Init+0x206>
 80016a8:	2307      	movs	r3, #7
 80016aa:	e00a      	b.n	80016c2 <HAL_GPIO_Init+0x206>
 80016ac:	2305      	movs	r3, #5
 80016ae:	e008      	b.n	80016c2 <HAL_GPIO_Init+0x206>
 80016b0:	2304      	movs	r3, #4
 80016b2:	e006      	b.n	80016c2 <HAL_GPIO_Init+0x206>
 80016b4:	2303      	movs	r3, #3
 80016b6:	e004      	b.n	80016c2 <HAL_GPIO_Init+0x206>
 80016b8:	2302      	movs	r3, #2
 80016ba:	e002      	b.n	80016c2 <HAL_GPIO_Init+0x206>
 80016bc:	2301      	movs	r3, #1
 80016be:	e000      	b.n	80016c2 <HAL_GPIO_Init+0x206>
 80016c0:	2300      	movs	r3, #0
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	f002 0203 	and.w	r2, r2, #3
 80016c8:	0092      	lsls	r2, r2, #2
 80016ca:	4093      	lsls	r3, r2
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016d2:	4937      	ldr	r1, [pc, #220]	@ (80017b0 <HAL_GPIO_Init+0x2f4>)
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	089b      	lsrs	r3, r3, #2
 80016d8:	3302      	adds	r3, #2
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016e0:	4b3a      	ldr	r3, [pc, #232]	@ (80017cc <HAL_GPIO_Init+0x310>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001704:	4a31      	ldr	r2, [pc, #196]	@ (80017cc <HAL_GPIO_Init+0x310>)
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800170a:	4b30      	ldr	r3, [pc, #192]	@ (80017cc <HAL_GPIO_Init+0x310>)
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800172e:	4a27      	ldr	r2, [pc, #156]	@ (80017cc <HAL_GPIO_Init+0x310>)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001734:	4b25      	ldr	r3, [pc, #148]	@ (80017cc <HAL_GPIO_Init+0x310>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	43db      	mvns	r3, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001758:	4a1c      	ldr	r2, [pc, #112]	@ (80017cc <HAL_GPIO_Init+0x310>)
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800175e:	4b1b      	ldr	r3, [pc, #108]	@ (80017cc <HAL_GPIO_Init+0x310>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	43db      	mvns	r3, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4313      	orrs	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001782:	4a12      	ldr	r2, [pc, #72]	@ (80017cc <HAL_GPIO_Init+0x310>)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	3301      	adds	r3, #1
 800178c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	fa22 f303 	lsr.w	r3, r2, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	f47f ae97 	bne.w	80014cc <HAL_GPIO_Init+0x10>
  }
}
 800179e:	bf00      	nop
 80017a0:	bf00      	nop
 80017a2:	371c      	adds	r7, #28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40010000 	.word	0x40010000
 80017b4:	48000400 	.word	0x48000400
 80017b8:	48000800 	.word	0x48000800
 80017bc:	48000c00 	.word	0x48000c00
 80017c0:	48001000 	.word	0x48001000
 80017c4:	48001400 	.word	0x48001400
 80017c8:	48001800 	.word	0x48001800
 80017cc:	40010400 	.word	0x40010400

080017d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	807b      	strh	r3, [r7, #2]
 80017dc:	4613      	mov	r3, r2
 80017de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017e0:	787b      	ldrb	r3, [r7, #1]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017e6:	887a      	ldrh	r2, [r7, #2]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017ec:	e002      	b.n	80017f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017ee:	887a      	ldrh	r2, [r7, #2]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001806:	af00      	add	r7, sp, #0
 8001808:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800180c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001810:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001812:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001816:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d102      	bne.n	8001826 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	f001 b83a 	b.w	800289a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001826:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800182a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 816f 	beq.w	8001b1a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800183c:	4bb5      	ldr	r3, [pc, #724]	@ (8001b14 <HAL_RCC_OscConfig+0x314>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 030c 	and.w	r3, r3, #12
 8001844:	2b04      	cmp	r3, #4
 8001846:	d00c      	beq.n	8001862 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001848:	4bb2      	ldr	r3, [pc, #712]	@ (8001b14 <HAL_RCC_OscConfig+0x314>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 030c 	and.w	r3, r3, #12
 8001850:	2b08      	cmp	r3, #8
 8001852:	d15c      	bne.n	800190e <HAL_RCC_OscConfig+0x10e>
 8001854:	4baf      	ldr	r3, [pc, #700]	@ (8001b14 <HAL_RCC_OscConfig+0x314>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800185c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001860:	d155      	bne.n	800190e <HAL_RCC_OscConfig+0x10e>
 8001862:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001866:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800186e:	fa93 f3a3 	rbit	r3, r3
 8001872:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001876:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800187a:	fab3 f383 	clz	r3, r3
 800187e:	b2db      	uxtb	r3, r3
 8001880:	095b      	lsrs	r3, r3, #5
 8001882:	b2db      	uxtb	r3, r3
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b01      	cmp	r3, #1
 800188c:	d102      	bne.n	8001894 <HAL_RCC_OscConfig+0x94>
 800188e:	4ba1      	ldr	r3, [pc, #644]	@ (8001b14 <HAL_RCC_OscConfig+0x314>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	e015      	b.n	80018c0 <HAL_RCC_OscConfig+0xc0>
 8001894:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001898:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80018a0:	fa93 f3a3 	rbit	r3, r3
 80018a4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80018a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018ac:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80018b0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80018b4:	fa93 f3a3 	rbit	r3, r3
 80018b8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80018bc:	4b95      	ldr	r3, [pc, #596]	@ (8001b14 <HAL_RCC_OscConfig+0x314>)
 80018be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018c4:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80018c8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80018cc:	fa92 f2a2 	rbit	r2, r2
 80018d0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80018d4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80018d8:	fab2 f282 	clz	r2, r2
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	f042 0220 	orr.w	r2, r2, #32
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	f002 021f 	and.w	r2, r2, #31
 80018e8:	2101      	movs	r1, #1
 80018ea:	fa01 f202 	lsl.w	r2, r1, r2
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 8111 	beq.w	8001b18 <HAL_RCC_OscConfig+0x318>
 80018f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018fa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	f040 8108 	bne.w	8001b18 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	f000 bfc6 	b.w	800289a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800190e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001912:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800191e:	d106      	bne.n	800192e <HAL_RCC_OscConfig+0x12e>
 8001920:	4b7c      	ldr	r3, [pc, #496]	@ (8001b14 <HAL_RCC_OscConfig+0x314>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a7b      	ldr	r2, [pc, #492]	@ (8001b14 <HAL_RCC_OscConfig+0x314>)
 8001926:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	e036      	b.n	800199c <HAL_RCC_OscConfig+0x19c>
 800192e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001932:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10c      	bne.n	8001958 <HAL_RCC_OscConfig+0x158>
 800193e:	4b75      	ldr	r3, [pc, #468]	@ (8001b14 <HAL_RCC_OscConfig+0x314>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a74      	ldr	r2, [pc, #464]	@ (8001b14 <HAL_RCC_OscConfig+0x314>)
 8001944:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	4b72      	ldr	r3, [pc, #456]	@ (8001b14 <HAL_RCC_OscConfig+0x314>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a71      	ldr	r2, [pc, #452]	@ (8001b14 <HAL_RCC_OscConfig+0x314>)
 8001950:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e021      	b.n	800199c <HAL_RCC_OscConfig+0x19c>
 8001958:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800195c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001968:	d10c      	bne.n	8001984 <HAL_RCC_OscConfig+0x184>
 800196a:	4b6a      	ldr	r3, [pc, #424]	@ (8001b14 <HAL_RCC_OscConfig+0x314>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a69      	ldr	r2, [pc, #420]	@ (8001b14 <HAL_RCC_OscConfig+0x314>)
 8001970:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	4b67      	ldr	r3, [pc, #412]	@ (8001b14 <HAL_RCC_OscConfig+0x314>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a66      	ldr	r2, [pc, #408]	@ (8001b14 <HAL_RCC_OscConfig+0x314>)
 800197c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	e00b      	b.n	800199c <HAL_RCC_OscConfig+0x19c>
 8001984:	4b63      	ldr	r3, [pc, #396]	@ (8001b14 <HAL_RCC_OscConfig+0x314>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a62      	ldr	r2, [pc, #392]	@ (8001b14 <HAL_RCC_OscConfig+0x314>)
 800198a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	4b60      	ldr	r3, [pc, #384]	@ (8001b14 <HAL_RCC_OscConfig+0x314>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a5f      	ldr	r2, [pc, #380]	@ (8001b14 <HAL_RCC_OscConfig+0x314>)
 8001996:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800199a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800199c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d059      	beq.n	8001a60 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7ff fc44 	bl	8001238 <HAL_GetTick>
 80019b0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b4:	e00a      	b.n	80019cc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b6:	f7ff fc3f 	bl	8001238 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b64      	cmp	r3, #100	@ 0x64
 80019c4:	d902      	bls.n	80019cc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	f000 bf67 	b.w	800289a <HAL_RCC_OscConfig+0x109a>
 80019cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019d0:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80019d8:	fa93 f3a3 	rbit	r3, r3
 80019dc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80019e0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e4:	fab3 f383 	clz	r3, r3
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	095b      	lsrs	r3, r3, #5
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d102      	bne.n	80019fe <HAL_RCC_OscConfig+0x1fe>
 80019f8:	4b46      	ldr	r3, [pc, #280]	@ (8001b14 <HAL_RCC_OscConfig+0x314>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	e015      	b.n	8001a2a <HAL_RCC_OscConfig+0x22a>
 80019fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a02:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001a0a:	fa93 f3a3 	rbit	r3, r3
 8001a0e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001a12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a16:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001a1a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001a1e:	fa93 f3a3 	rbit	r3, r3
 8001a22:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001a26:	4b3b      	ldr	r3, [pc, #236]	@ (8001b14 <HAL_RCC_OscConfig+0x314>)
 8001a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a2e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001a32:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001a36:	fa92 f2a2 	rbit	r2, r2
 8001a3a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001a3e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001a42:	fab2 f282 	clz	r2, r2
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	f042 0220 	orr.w	r2, r2, #32
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	f002 021f 	and.w	r2, r2, #31
 8001a52:	2101      	movs	r1, #1
 8001a54:	fa01 f202 	lsl.w	r2, r1, r2
 8001a58:	4013      	ands	r3, r2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0ab      	beq.n	80019b6 <HAL_RCC_OscConfig+0x1b6>
 8001a5e:	e05c      	b.n	8001b1a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7ff fbea 	bl	8001238 <HAL_GetTick>
 8001a64:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a68:	e00a      	b.n	8001a80 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a6a:	f7ff fbe5 	bl	8001238 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	@ 0x64
 8001a78:	d902      	bls.n	8001a80 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	f000 bf0d 	b.w	800289a <HAL_RCC_OscConfig+0x109a>
 8001a80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a84:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a88:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001a8c:	fa93 f3a3 	rbit	r3, r3
 8001a90:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001a94:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a98:	fab3 f383 	clz	r3, r3
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	095b      	lsrs	r3, r3, #5
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d102      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x2b2>
 8001aac:	4b19      	ldr	r3, [pc, #100]	@ (8001b14 <HAL_RCC_OscConfig+0x314>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	e015      	b.n	8001ade <HAL_RCC_OscConfig+0x2de>
 8001ab2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ab6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001abe:	fa93 f3a3 	rbit	r3, r3
 8001ac2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001ac6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aca:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001ace:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001ada:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <HAL_RCC_OscConfig+0x314>)
 8001adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ade:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ae2:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001ae6:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001aea:	fa92 f2a2 	rbit	r2, r2
 8001aee:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001af2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001af6:	fab2 f282 	clz	r2, r2
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	f042 0220 	orr.w	r2, r2, #32
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	f002 021f 	and.w	r2, r2, #31
 8001b06:	2101      	movs	r1, #1
 8001b08:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1ab      	bne.n	8001a6a <HAL_RCC_OscConfig+0x26a>
 8001b12:	e002      	b.n	8001b1a <HAL_RCC_OscConfig+0x31a>
 8001b14:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b1e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 817f 	beq.w	8001e2e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b30:	4ba7      	ldr	r3, [pc, #668]	@ (8001dd0 <HAL_RCC_OscConfig+0x5d0>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 030c 	and.w	r3, r3, #12
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00c      	beq.n	8001b56 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b3c:	4ba4      	ldr	r3, [pc, #656]	@ (8001dd0 <HAL_RCC_OscConfig+0x5d0>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 030c 	and.w	r3, r3, #12
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d173      	bne.n	8001c30 <HAL_RCC_OscConfig+0x430>
 8001b48:	4ba1      	ldr	r3, [pc, #644]	@ (8001dd0 <HAL_RCC_OscConfig+0x5d0>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001b50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b54:	d16c      	bne.n	8001c30 <HAL_RCC_OscConfig+0x430>
 8001b56:	2302      	movs	r3, #2
 8001b58:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001b60:	fa93 f3a3 	rbit	r3, r3
 8001b64:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001b68:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6c:	fab3 f383 	clz	r3, r3
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	095b      	lsrs	r3, r3, #5
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d102      	bne.n	8001b86 <HAL_RCC_OscConfig+0x386>
 8001b80:	4b93      	ldr	r3, [pc, #588]	@ (8001dd0 <HAL_RCC_OscConfig+0x5d0>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	e013      	b.n	8001bae <HAL_RCC_OscConfig+0x3ae>
 8001b86:	2302      	movs	r3, #2
 8001b88:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001b90:	fa93 f3a3 	rbit	r3, r3
 8001b94:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001b98:	2302      	movs	r3, #2
 8001b9a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001b9e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001ba2:	fa93 f3a3 	rbit	r3, r3
 8001ba6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001baa:	4b89      	ldr	r3, [pc, #548]	@ (8001dd0 <HAL_RCC_OscConfig+0x5d0>)
 8001bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001bb4:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001bb8:	fa92 f2a2 	rbit	r2, r2
 8001bbc:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001bc0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001bc4:	fab2 f282 	clz	r2, r2
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	f042 0220 	orr.w	r2, r2, #32
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	f002 021f 	and.w	r2, r2, #31
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00a      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x3f6>
 8001be0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001be4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d002      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	f000 be52 	b.w	800289a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf6:	4b76      	ldr	r3, [pc, #472]	@ (8001dd0 <HAL_RCC_OscConfig+0x5d0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c02:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	21f8      	movs	r1, #248	@ 0xf8
 8001c0c:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c10:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001c14:	fa91 f1a1 	rbit	r1, r1
 8001c18:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001c1c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001c20:	fab1 f181 	clz	r1, r1
 8001c24:	b2c9      	uxtb	r1, r1
 8001c26:	408b      	lsls	r3, r1
 8001c28:	4969      	ldr	r1, [pc, #420]	@ (8001dd0 <HAL_RCC_OscConfig+0x5d0>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c2e:	e0fe      	b.n	8001e2e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c34:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 8088 	beq.w	8001d52 <HAL_RCC_OscConfig+0x552>
 8001c42:	2301      	movs	r3, #1
 8001c44:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001c4c:	fa93 f3a3 	rbit	r3, r3
 8001c50:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001c54:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c58:	fab3 f383 	clz	r3, r3
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c62:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	461a      	mov	r2, r3
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6e:	f7ff fae3 	bl	8001238 <HAL_GetTick>
 8001c72:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c76:	e00a      	b.n	8001c8e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c78:	f7ff fade 	bl	8001238 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d902      	bls.n	8001c8e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	f000 be06 	b.w	800289a <HAL_RCC_OscConfig+0x109a>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001c98:	fa93 f3a3 	rbit	r3, r3
 8001c9c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001ca0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca4:	fab3 f383 	clz	r3, r3
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	095b      	lsrs	r3, r3, #5
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d102      	bne.n	8001cbe <HAL_RCC_OscConfig+0x4be>
 8001cb8:	4b45      	ldr	r3, [pc, #276]	@ (8001dd0 <HAL_RCC_OscConfig+0x5d0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	e013      	b.n	8001ce6 <HAL_RCC_OscConfig+0x4e6>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001cc8:	fa93 f3a3 	rbit	r3, r3
 8001ccc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001cd6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001cda:	fa93 f3a3 	rbit	r3, r3
 8001cde:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001ce2:	4b3b      	ldr	r3, [pc, #236]	@ (8001dd0 <HAL_RCC_OscConfig+0x5d0>)
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001cec:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001cf0:	fa92 f2a2 	rbit	r2, r2
 8001cf4:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001cf8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001cfc:	fab2 f282 	clz	r2, r2
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	f042 0220 	orr.w	r2, r2, #32
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	f002 021f 	and.w	r2, r2, #31
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0af      	beq.n	8001c78 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d18:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd0 <HAL_RCC_OscConfig+0x5d0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d24:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	21f8      	movs	r1, #248	@ 0xf8
 8001d2e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001d36:	fa91 f1a1 	rbit	r1, r1
 8001d3a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001d3e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001d42:	fab1 f181 	clz	r1, r1
 8001d46:	b2c9      	uxtb	r1, r1
 8001d48:	408b      	lsls	r3, r1
 8001d4a:	4921      	ldr	r1, [pc, #132]	@ (8001dd0 <HAL_RCC_OscConfig+0x5d0>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]
 8001d50:	e06d      	b.n	8001e2e <HAL_RCC_OscConfig+0x62e>
 8001d52:	2301      	movs	r3, #1
 8001d54:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001d5c:	fa93 f3a3 	rbit	r3, r3
 8001d60:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001d64:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d68:	fab3 f383 	clz	r3, r3
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d72:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	461a      	mov	r2, r3
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7e:	f7ff fa5b 	bl	8001238 <HAL_GetTick>
 8001d82:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d86:	e00a      	b.n	8001d9e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d88:	f7ff fa56 	bl	8001238 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d902      	bls.n	8001d9e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	f000 bd7e 	b.w	800289a <HAL_RCC_OscConfig+0x109a>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001da8:	fa93 f3a3 	rbit	r3, r3
 8001dac:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001db0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db4:	fab3 f383 	clz	r3, r3
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	095b      	lsrs	r3, r3, #5
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d105      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x5d4>
 8001dc8:	4b01      	ldr	r3, [pc, #4]	@ (8001dd0 <HAL_RCC_OscConfig+0x5d0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	e016      	b.n	8001dfc <HAL_RCC_OscConfig+0x5fc>
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001dde:	fa93 f3a3 	rbit	r3, r3
 8001de2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001de6:	2302      	movs	r3, #2
 8001de8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001dec:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001df0:	fa93 f3a3 	rbit	r3, r3
 8001df4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001df8:	4bbf      	ldr	r3, [pc, #764]	@ (80020f8 <HAL_RCC_OscConfig+0x8f8>)
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001e02:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001e06:	fa92 f2a2 	rbit	r2, r2
 8001e0a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001e0e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001e12:	fab2 f282 	clz	r2, r2
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	f042 0220 	orr.w	r2, r2, #32
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	f002 021f 	and.w	r2, r2, #31
 8001e22:	2101      	movs	r1, #1
 8001e24:	fa01 f202 	lsl.w	r2, r1, r2
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1ac      	bne.n	8001d88 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e32:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 8113 	beq.w	800206a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e48:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d07c      	beq.n	8001f4e <HAL_RCC_OscConfig+0x74e>
 8001e54:	2301      	movs	r3, #1
 8001e56:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001e5e:	fa93 f3a3 	rbit	r3, r3
 8001e62:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001e66:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	461a      	mov	r2, r3
 8001e72:	4ba2      	ldr	r3, [pc, #648]	@ (80020fc <HAL_RCC_OscConfig+0x8fc>)
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	461a      	mov	r2, r3
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7e:	f7ff f9db 	bl	8001238 <HAL_GetTick>
 8001e82:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e86:	e00a      	b.n	8001e9e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e88:	f7ff f9d6 	bl	8001238 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d902      	bls.n	8001e9e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	f000 bcfe 	b.w	800289a <HAL_RCC_OscConfig+0x109a>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001ea8:	fa93 f2a3 	rbit	r2, r3
 8001eac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eb0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ec6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	fa93 f2a3 	rbit	r2, r3
 8001ed0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ed4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ede:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	fa93 f2a3 	rbit	r2, r3
 8001ef4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ef8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001efc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efe:	4b7e      	ldr	r3, [pc, #504]	@ (80020f8 <HAL_RCC_OscConfig+0x8f8>)
 8001f00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f06:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f0a:	2102      	movs	r1, #2
 8001f0c:	6019      	str	r1, [r3, #0]
 8001f0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f12:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	fa93 f1a3 	rbit	r1, r3
 8001f1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f20:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001f24:	6019      	str	r1, [r3, #0]
  return result;
 8001f26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f2a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	fab3 f383 	clz	r3, r3
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	f003 031f 	and.w	r3, r3, #31
 8001f40:	2101      	movs	r1, #1
 8001f42:	fa01 f303 	lsl.w	r3, r1, r3
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d09d      	beq.n	8001e88 <HAL_RCC_OscConfig+0x688>
 8001f4c:	e08d      	b.n	800206a <HAL_RCC_OscConfig+0x86a>
 8001f4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f52:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f56:	2201      	movs	r2, #1
 8001f58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f5e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	fa93 f2a3 	rbit	r2, r3
 8001f68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f6c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001f70:	601a      	str	r2, [r3, #0]
  return result;
 8001f72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f76:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001f7a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f7c:	fab3 f383 	clz	r3, r3
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	461a      	mov	r2, r3
 8001f84:	4b5d      	ldr	r3, [pc, #372]	@ (80020fc <HAL_RCC_OscConfig+0x8fc>)
 8001f86:	4413      	add	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f90:	f7ff f952 	bl	8001238 <HAL_GetTick>
 8001f94:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f98:	e00a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f9a:	f7ff f94d 	bl	8001238 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d902      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	f000 bc75 	b.w	800289a <HAL_RCC_OscConfig+0x109a>
 8001fb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fb4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001fb8:	2202      	movs	r2, #2
 8001fba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fc0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	fa93 f2a3 	rbit	r2, r3
 8001fca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fd8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001fdc:	2202      	movs	r2, #2
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fe4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	fa93 f2a3 	rbit	r2, r3
 8001fee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ff2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ffc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002000:	2202      	movs	r2, #2
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002008:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	fa93 f2a3 	rbit	r2, r3
 8002012:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002016:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800201a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800201c:	4b36      	ldr	r3, [pc, #216]	@ (80020f8 <HAL_RCC_OscConfig+0x8f8>)
 800201e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002020:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002024:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002028:	2102      	movs	r1, #2
 800202a:	6019      	str	r1, [r3, #0]
 800202c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002030:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	fa93 f1a3 	rbit	r1, r3
 800203a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800203e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002042:	6019      	str	r1, [r3, #0]
  return result;
 8002044:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002048:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	fab3 f383 	clz	r3, r3
 8002052:	b2db      	uxtb	r3, r3
 8002054:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002058:	b2db      	uxtb	r3, r3
 800205a:	f003 031f 	and.w	r3, r3, #31
 800205e:	2101      	movs	r1, #1
 8002060:	fa01 f303 	lsl.w	r3, r1, r3
 8002064:	4013      	ands	r3, r2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d197      	bne.n	8001f9a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800206a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800206e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 81a5 	beq.w	80023ca <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002080:	2300      	movs	r3, #0
 8002082:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002086:	4b1c      	ldr	r3, [pc, #112]	@ (80020f8 <HAL_RCC_OscConfig+0x8f8>)
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d116      	bne.n	80020c0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002092:	4b19      	ldr	r3, [pc, #100]	@ (80020f8 <HAL_RCC_OscConfig+0x8f8>)
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	4a18      	ldr	r2, [pc, #96]	@ (80020f8 <HAL_RCC_OscConfig+0x8f8>)
 8002098:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800209c:	61d3      	str	r3, [r2, #28]
 800209e:	4b16      	ldr	r3, [pc, #88]	@ (80020f8 <HAL_RCC_OscConfig+0x8f8>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80020a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020b8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80020ba:	2301      	movs	r3, #1
 80020bc:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002100 <HAL_RCC_OscConfig+0x900>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d121      	bne.n	8002110 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002100 <HAL_RCC_OscConfig+0x900>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002100 <HAL_RCC_OscConfig+0x900>)
 80020d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d8:	f7ff f8ae 	bl	8001238 <HAL_GetTick>
 80020dc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e0:	e010      	b.n	8002104 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e2:	f7ff f8a9 	bl	8001238 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b64      	cmp	r3, #100	@ 0x64
 80020f0:	d908      	bls.n	8002104 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e3d1      	b.n	800289a <HAL_RCC_OscConfig+0x109a>
 80020f6:	bf00      	nop
 80020f8:	40021000 	.word	0x40021000
 80020fc:	10908120 	.word	0x10908120
 8002100:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002104:	4b8d      	ldr	r3, [pc, #564]	@ (800233c <HAL_RCC_OscConfig+0xb3c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0e8      	beq.n	80020e2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002110:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002114:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d106      	bne.n	800212e <HAL_RCC_OscConfig+0x92e>
 8002120:	4b87      	ldr	r3, [pc, #540]	@ (8002340 <HAL_RCC_OscConfig+0xb40>)
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	4a86      	ldr	r2, [pc, #536]	@ (8002340 <HAL_RCC_OscConfig+0xb40>)
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	6213      	str	r3, [r2, #32]
 800212c:	e035      	b.n	800219a <HAL_RCC_OscConfig+0x99a>
 800212e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002132:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10c      	bne.n	8002158 <HAL_RCC_OscConfig+0x958>
 800213e:	4b80      	ldr	r3, [pc, #512]	@ (8002340 <HAL_RCC_OscConfig+0xb40>)
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	4a7f      	ldr	r2, [pc, #508]	@ (8002340 <HAL_RCC_OscConfig+0xb40>)
 8002144:	f023 0301 	bic.w	r3, r3, #1
 8002148:	6213      	str	r3, [r2, #32]
 800214a:	4b7d      	ldr	r3, [pc, #500]	@ (8002340 <HAL_RCC_OscConfig+0xb40>)
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	4a7c      	ldr	r2, [pc, #496]	@ (8002340 <HAL_RCC_OscConfig+0xb40>)
 8002150:	f023 0304 	bic.w	r3, r3, #4
 8002154:	6213      	str	r3, [r2, #32]
 8002156:	e020      	b.n	800219a <HAL_RCC_OscConfig+0x99a>
 8002158:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800215c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b05      	cmp	r3, #5
 8002166:	d10c      	bne.n	8002182 <HAL_RCC_OscConfig+0x982>
 8002168:	4b75      	ldr	r3, [pc, #468]	@ (8002340 <HAL_RCC_OscConfig+0xb40>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	4a74      	ldr	r2, [pc, #464]	@ (8002340 <HAL_RCC_OscConfig+0xb40>)
 800216e:	f043 0304 	orr.w	r3, r3, #4
 8002172:	6213      	str	r3, [r2, #32]
 8002174:	4b72      	ldr	r3, [pc, #456]	@ (8002340 <HAL_RCC_OscConfig+0xb40>)
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	4a71      	ldr	r2, [pc, #452]	@ (8002340 <HAL_RCC_OscConfig+0xb40>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	6213      	str	r3, [r2, #32]
 8002180:	e00b      	b.n	800219a <HAL_RCC_OscConfig+0x99a>
 8002182:	4b6f      	ldr	r3, [pc, #444]	@ (8002340 <HAL_RCC_OscConfig+0xb40>)
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	4a6e      	ldr	r2, [pc, #440]	@ (8002340 <HAL_RCC_OscConfig+0xb40>)
 8002188:	f023 0301 	bic.w	r3, r3, #1
 800218c:	6213      	str	r3, [r2, #32]
 800218e:	4b6c      	ldr	r3, [pc, #432]	@ (8002340 <HAL_RCC_OscConfig+0xb40>)
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	4a6b      	ldr	r2, [pc, #428]	@ (8002340 <HAL_RCC_OscConfig+0xb40>)
 8002194:	f023 0304 	bic.w	r3, r3, #4
 8002198:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800219a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800219e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 8081 	beq.w	80022ae <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ac:	f7ff f844 	bl	8001238 <HAL_GetTick>
 80021b0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b4:	e00b      	b.n	80021ce <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b6:	f7ff f83f 	bl	8001238 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e365      	b.n	800289a <HAL_RCC_OscConfig+0x109a>
 80021ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021d2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80021d6:	2202      	movs	r2, #2
 80021d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021de:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	fa93 f2a3 	rbit	r2, r3
 80021e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ec:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021f6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80021fa:	2202      	movs	r2, #2
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002202:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	fa93 f2a3 	rbit	r2, r3
 800220c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002210:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002214:	601a      	str	r2, [r3, #0]
  return result;
 8002216:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800221a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800221e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002220:	fab3 f383 	clz	r3, r3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	095b      	lsrs	r3, r3, #5
 8002228:	b2db      	uxtb	r3, r3
 800222a:	f043 0302 	orr.w	r3, r3, #2
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d102      	bne.n	800223a <HAL_RCC_OscConfig+0xa3a>
 8002234:	4b42      	ldr	r3, [pc, #264]	@ (8002340 <HAL_RCC_OscConfig+0xb40>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	e013      	b.n	8002262 <HAL_RCC_OscConfig+0xa62>
 800223a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800223e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002242:	2202      	movs	r2, #2
 8002244:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800224a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	fa93 f2a3 	rbit	r2, r3
 8002254:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002258:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	4b38      	ldr	r3, [pc, #224]	@ (8002340 <HAL_RCC_OscConfig+0xb40>)
 8002260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002262:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002266:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800226a:	2102      	movs	r1, #2
 800226c:	6011      	str	r1, [r2, #0]
 800226e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002272:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002276:	6812      	ldr	r2, [r2, #0]
 8002278:	fa92 f1a2 	rbit	r1, r2
 800227c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002280:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002284:	6011      	str	r1, [r2, #0]
  return result;
 8002286:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800228a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	fab2 f282 	clz	r2, r2
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	f002 021f 	and.w	r2, r2, #31
 80022a0:	2101      	movs	r1, #1
 80022a2:	fa01 f202 	lsl.w	r2, r1, r2
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d084      	beq.n	80021b6 <HAL_RCC_OscConfig+0x9b6>
 80022ac:	e083      	b.n	80023b6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ae:	f7fe ffc3 	bl	8001238 <HAL_GetTick>
 80022b2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b6:	e00b      	b.n	80022d0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b8:	f7fe ffbe 	bl	8001238 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e2e4      	b.n	800289a <HAL_RCC_OscConfig+0x109a>
 80022d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022d4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80022d8:	2202      	movs	r2, #2
 80022da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022e0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	fa93 f2a3 	rbit	r2, r3
 80022ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ee:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022f8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80022fc:	2202      	movs	r2, #2
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002304:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	fa93 f2a3 	rbit	r2, r3
 800230e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002312:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002316:	601a      	str	r2, [r3, #0]
  return result;
 8002318:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800231c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002320:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002322:	fab3 f383 	clz	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	095b      	lsrs	r3, r3, #5
 800232a:	b2db      	uxtb	r3, r3
 800232c:	f043 0302 	orr.w	r3, r3, #2
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d106      	bne.n	8002344 <HAL_RCC_OscConfig+0xb44>
 8002336:	4b02      	ldr	r3, [pc, #8]	@ (8002340 <HAL_RCC_OscConfig+0xb40>)
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	e017      	b.n	800236c <HAL_RCC_OscConfig+0xb6c>
 800233c:	40007000 	.word	0x40007000
 8002340:	40021000 	.word	0x40021000
 8002344:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002348:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800234c:	2202      	movs	r2, #2
 800234e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002350:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002354:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	fa93 f2a3 	rbit	r2, r3
 800235e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002362:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	4bb3      	ldr	r3, [pc, #716]	@ (8002638 <HAL_RCC_OscConfig+0xe38>)
 800236a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002370:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002374:	2102      	movs	r1, #2
 8002376:	6011      	str	r1, [r2, #0]
 8002378:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800237c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	fa92 f1a2 	rbit	r1, r2
 8002386:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800238a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800238e:	6011      	str	r1, [r2, #0]
  return result;
 8002390:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002394:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	fab2 f282 	clz	r2, r2
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	f002 021f 	and.w	r2, r2, #31
 80023aa:	2101      	movs	r1, #1
 80023ac:	fa01 f202 	lsl.w	r2, r1, r2
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d180      	bne.n	80022b8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023b6:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d105      	bne.n	80023ca <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023be:	4b9e      	ldr	r3, [pc, #632]	@ (8002638 <HAL_RCC_OscConfig+0xe38>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	4a9d      	ldr	r2, [pc, #628]	@ (8002638 <HAL_RCC_OscConfig+0xe38>)
 80023c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023c8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 825e 	beq.w	8002898 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023dc:	4b96      	ldr	r3, [pc, #600]	@ (8002638 <HAL_RCC_OscConfig+0xe38>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 030c 	and.w	r3, r3, #12
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	f000 821f 	beq.w	8002828 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	f040 8170 	bne.w	80026dc <HAL_RCC_OscConfig+0xedc>
 80023fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002400:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002404:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002408:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800240e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	fa93 f2a3 	rbit	r2, r3
 8002418:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800241c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002420:	601a      	str	r2, [r3, #0]
  return result;
 8002422:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002426:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800242a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242c:	fab3 f383 	clz	r3, r3
 8002430:	b2db      	uxtb	r3, r3
 8002432:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002436:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	461a      	mov	r2, r3
 800243e:	2300      	movs	r3, #0
 8002440:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002442:	f7fe fef9 	bl	8001238 <HAL_GetTick>
 8002446:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800244a:	e009      	b.n	8002460 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800244c:	f7fe fef4 	bl	8001238 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e21c      	b.n	800289a <HAL_RCC_OscConfig+0x109a>
 8002460:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002464:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002468:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800246c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002472:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	fa93 f2a3 	rbit	r2, r3
 800247c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002480:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002484:	601a      	str	r2, [r3, #0]
  return result;
 8002486:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800248a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800248e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002490:	fab3 f383 	clz	r3, r3
 8002494:	b2db      	uxtb	r3, r3
 8002496:	095b      	lsrs	r3, r3, #5
 8002498:	b2db      	uxtb	r3, r3
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d102      	bne.n	80024aa <HAL_RCC_OscConfig+0xcaa>
 80024a4:	4b64      	ldr	r3, [pc, #400]	@ (8002638 <HAL_RCC_OscConfig+0xe38>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	e027      	b.n	80024fa <HAL_RCC_OscConfig+0xcfa>
 80024aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ae:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80024b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024bc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	fa93 f2a3 	rbit	r2, r3
 80024c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ca:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024d4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80024d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024e2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	fa93 f2a3 	rbit	r2, r3
 80024ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024f0:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	4b50      	ldr	r3, [pc, #320]	@ (8002638 <HAL_RCC_OscConfig+0xe38>)
 80024f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024fe:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002502:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002506:	6011      	str	r1, [r2, #0]
 8002508:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800250c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002510:	6812      	ldr	r2, [r2, #0]
 8002512:	fa92 f1a2 	rbit	r1, r2
 8002516:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800251a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800251e:	6011      	str	r1, [r2, #0]
  return result;
 8002520:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002524:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002528:	6812      	ldr	r2, [r2, #0]
 800252a:	fab2 f282 	clz	r2, r2
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	f042 0220 	orr.w	r2, r2, #32
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	f002 021f 	and.w	r2, r2, #31
 800253a:	2101      	movs	r1, #1
 800253c:	fa01 f202 	lsl.w	r2, r1, r2
 8002540:	4013      	ands	r3, r2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d182      	bne.n	800244c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002546:	4b3c      	ldr	r3, [pc, #240]	@ (8002638 <HAL_RCC_OscConfig+0xe38>)
 8002548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254a:	f023 020f 	bic.w	r2, r3, #15
 800254e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002552:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255a:	4937      	ldr	r1, [pc, #220]	@ (8002638 <HAL_RCC_OscConfig+0xe38>)
 800255c:	4313      	orrs	r3, r2
 800255e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002560:	4b35      	ldr	r3, [pc, #212]	@ (8002638 <HAL_RCC_OscConfig+0xe38>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002568:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800256c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6a19      	ldr	r1, [r3, #32]
 8002574:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002578:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	430b      	orrs	r3, r1
 8002582:	492d      	ldr	r1, [pc, #180]	@ (8002638 <HAL_RCC_OscConfig+0xe38>)
 8002584:	4313      	orrs	r3, r2
 8002586:	604b      	str	r3, [r1, #4]
 8002588:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800258c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002590:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002594:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002596:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800259a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	fa93 f2a3 	rbit	r2, r3
 80025a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025a8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80025ac:	601a      	str	r2, [r3, #0]
  return result;
 80025ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025b2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80025b6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025b8:	fab3 f383 	clz	r3, r3
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80025c2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	461a      	mov	r2, r3
 80025ca:	2301      	movs	r3, #1
 80025cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ce:	f7fe fe33 	bl	8001238 <HAL_GetTick>
 80025d2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025d6:	e009      	b.n	80025ec <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d8:	f7fe fe2e 	bl	8001238 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e156      	b.n	800289a <HAL_RCC_OscConfig+0x109a>
 80025ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025f0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80025f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025fe:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	fa93 f2a3 	rbit	r2, r3
 8002608:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800260c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002610:	601a      	str	r2, [r3, #0]
  return result;
 8002612:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002616:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800261a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800261c:	fab3 f383 	clz	r3, r3
 8002620:	b2db      	uxtb	r3, r3
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	b2db      	uxtb	r3, r3
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b01      	cmp	r3, #1
 800262e:	d105      	bne.n	800263c <HAL_RCC_OscConfig+0xe3c>
 8002630:	4b01      	ldr	r3, [pc, #4]	@ (8002638 <HAL_RCC_OscConfig+0xe38>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	e02a      	b.n	800268c <HAL_RCC_OscConfig+0xe8c>
 8002636:	bf00      	nop
 8002638:	40021000 	.word	0x40021000
 800263c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002640:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002644:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002648:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800264e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	fa93 f2a3 	rbit	r2, r3
 8002658:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800265c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002666:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800266a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002674:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	fa93 f2a3 	rbit	r2, r3
 800267e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002682:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	4b86      	ldr	r3, [pc, #536]	@ (80028a4 <HAL_RCC_OscConfig+0x10a4>)
 800268a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002690:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002694:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002698:	6011      	str	r1, [r2, #0]
 800269a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800269e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	fa92 f1a2 	rbit	r1, r2
 80026a8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026ac:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80026b0:	6011      	str	r1, [r2, #0]
  return result;
 80026b2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026b6:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	fab2 f282 	clz	r2, r2
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	f042 0220 	orr.w	r2, r2, #32
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	f002 021f 	and.w	r2, r2, #31
 80026cc:	2101      	movs	r1, #1
 80026ce:	fa01 f202 	lsl.w	r2, r1, r2
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f43f af7f 	beq.w	80025d8 <HAL_RCC_OscConfig+0xdd8>
 80026da:	e0dd      	b.n	8002898 <HAL_RCC_OscConfig+0x1098>
 80026dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026e0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80026e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026ee:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	fa93 f2a3 	rbit	r2, r3
 80026f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026fc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002700:	601a      	str	r2, [r3, #0]
  return result;
 8002702:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002706:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800270a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270c:	fab3 f383 	clz	r3, r3
 8002710:	b2db      	uxtb	r3, r3
 8002712:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002716:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	461a      	mov	r2, r3
 800271e:	2300      	movs	r3, #0
 8002720:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002722:	f7fe fd89 	bl	8001238 <HAL_GetTick>
 8002726:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800272a:	e009      	b.n	8002740 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272c:	f7fe fd84 	bl	8001238 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e0ac      	b.n	800289a <HAL_RCC_OscConfig+0x109a>
 8002740:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002744:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002748:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800274c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002752:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	fa93 f2a3 	rbit	r2, r3
 800275c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002760:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002764:	601a      	str	r2, [r3, #0]
  return result;
 8002766:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800276a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800276e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002770:	fab3 f383 	clz	r3, r3
 8002774:	b2db      	uxtb	r3, r3
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b01      	cmp	r3, #1
 8002782:	d102      	bne.n	800278a <HAL_RCC_OscConfig+0xf8a>
 8002784:	4b47      	ldr	r3, [pc, #284]	@ (80028a4 <HAL_RCC_OscConfig+0x10a4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	e027      	b.n	80027da <HAL_RCC_OscConfig+0xfda>
 800278a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800278e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002792:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002796:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002798:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800279c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	fa93 f2a3 	rbit	r2, r3
 80027a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027aa:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027b4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80027b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027c2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	fa93 f2a3 	rbit	r2, r3
 80027cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027d0:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	4b33      	ldr	r3, [pc, #204]	@ (80028a4 <HAL_RCC_OscConfig+0x10a4>)
 80027d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027da:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80027de:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80027e2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80027e6:	6011      	str	r1, [r2, #0]
 80027e8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80027ec:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80027f0:	6812      	ldr	r2, [r2, #0]
 80027f2:	fa92 f1a2 	rbit	r1, r2
 80027f6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80027fa:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80027fe:	6011      	str	r1, [r2, #0]
  return result;
 8002800:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002804:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	fab2 f282 	clz	r2, r2
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	f042 0220 	orr.w	r2, r2, #32
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	f002 021f 	and.w	r2, r2, #31
 800281a:	2101      	movs	r1, #1
 800281c:	fa01 f202 	lsl.w	r2, r1, r2
 8002820:	4013      	ands	r3, r2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d182      	bne.n	800272c <HAL_RCC_OscConfig+0xf2c>
 8002826:	e037      	b.n	8002898 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002828:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800282c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e02e      	b.n	800289a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800283c:	4b19      	ldr	r3, [pc, #100]	@ (80028a4 <HAL_RCC_OscConfig+0x10a4>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002844:	4b17      	ldr	r3, [pc, #92]	@ (80028a4 <HAL_RCC_OscConfig+0x10a4>)
 8002846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002848:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800284c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002850:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002854:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002858:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	429a      	cmp	r2, r3
 8002862:	d117      	bne.n	8002894 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002864:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002868:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800286c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002870:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002878:	429a      	cmp	r2, r3
 800287a:	d10b      	bne.n	8002894 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800287c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002880:	f003 020f 	and.w	r2, r3, #15
 8002884:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002888:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002890:	429a      	cmp	r2, r3
 8002892:	d001      	beq.n	8002898 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e000      	b.n	800289a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40021000 	.word	0x40021000

080028a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b09e      	sub	sp, #120	@ 0x78
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e162      	b.n	8002b86 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028c0:	4b90      	ldr	r3, [pc, #576]	@ (8002b04 <HAL_RCC_ClockConfig+0x25c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d910      	bls.n	80028f0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ce:	4b8d      	ldr	r3, [pc, #564]	@ (8002b04 <HAL_RCC_ClockConfig+0x25c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f023 0207 	bic.w	r2, r3, #7
 80028d6:	498b      	ldr	r1, [pc, #556]	@ (8002b04 <HAL_RCC_ClockConfig+0x25c>)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	4313      	orrs	r3, r2
 80028dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028de:	4b89      	ldr	r3, [pc, #548]	@ (8002b04 <HAL_RCC_ClockConfig+0x25c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d001      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e14a      	b.n	8002b86 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028fc:	4b82      	ldr	r3, [pc, #520]	@ (8002b08 <HAL_RCC_ClockConfig+0x260>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	497f      	ldr	r1, [pc, #508]	@ (8002b08 <HAL_RCC_ClockConfig+0x260>)
 800290a:	4313      	orrs	r3, r2
 800290c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 80dc 	beq.w	8002ad4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d13c      	bne.n	800299e <HAL_RCC_ClockConfig+0xf6>
 8002924:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002928:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800292c:	fa93 f3a3 	rbit	r3, r3
 8002930:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002932:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002934:	fab3 f383 	clz	r3, r3
 8002938:	b2db      	uxtb	r3, r3
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	b2db      	uxtb	r3, r3
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b01      	cmp	r3, #1
 8002946:	d102      	bne.n	800294e <HAL_RCC_ClockConfig+0xa6>
 8002948:	4b6f      	ldr	r3, [pc, #444]	@ (8002b08 <HAL_RCC_ClockConfig+0x260>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	e00f      	b.n	800296e <HAL_RCC_ClockConfig+0xc6>
 800294e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002952:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002954:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002956:	fa93 f3a3 	rbit	r3, r3
 800295a:	667b      	str	r3, [r7, #100]	@ 0x64
 800295c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002960:	663b      	str	r3, [r7, #96]	@ 0x60
 8002962:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002964:	fa93 f3a3 	rbit	r3, r3
 8002968:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800296a:	4b67      	ldr	r3, [pc, #412]	@ (8002b08 <HAL_RCC_ClockConfig+0x260>)
 800296c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002972:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002974:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002976:	fa92 f2a2 	rbit	r2, r2
 800297a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800297c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800297e:	fab2 f282 	clz	r2, r2
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	f042 0220 	orr.w	r2, r2, #32
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	f002 021f 	and.w	r2, r2, #31
 800298e:	2101      	movs	r1, #1
 8002990:	fa01 f202 	lsl.w	r2, r1, r2
 8002994:	4013      	ands	r3, r2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d17b      	bne.n	8002a92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e0f3      	b.n	8002b86 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d13c      	bne.n	8002a20 <HAL_RCC_ClockConfig+0x178>
 80029a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029aa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029ae:	fa93 f3a3 	rbit	r3, r3
 80029b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80029b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b6:	fab3 f383 	clz	r3, r3
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	095b      	lsrs	r3, r3, #5
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d102      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x128>
 80029ca:	4b4f      	ldr	r3, [pc, #316]	@ (8002b08 <HAL_RCC_ClockConfig+0x260>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	e00f      	b.n	80029f0 <HAL_RCC_ClockConfig+0x148>
 80029d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029d8:	fa93 f3a3 	rbit	r3, r3
 80029dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80029de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80029e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029e6:	fa93 f3a3 	rbit	r3, r3
 80029ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029ec:	4b46      	ldr	r3, [pc, #280]	@ (8002b08 <HAL_RCC_ClockConfig+0x260>)
 80029ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029f4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80029f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80029f8:	fa92 f2a2 	rbit	r2, r2
 80029fc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80029fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a00:	fab2 f282 	clz	r2, r2
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	f042 0220 	orr.w	r2, r2, #32
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	f002 021f 	and.w	r2, r2, #31
 8002a10:	2101      	movs	r1, #1
 8002a12:	fa01 f202 	lsl.w	r2, r1, r2
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d13a      	bne.n	8002a92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0b2      	b.n	8002b86 <HAL_RCC_ClockConfig+0x2de>
 8002a20:	2302      	movs	r3, #2
 8002a22:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a26:	fa93 f3a3 	rbit	r3, r3
 8002a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2e:	fab3 f383 	clz	r3, r3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	095b      	lsrs	r3, r3, #5
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d102      	bne.n	8002a48 <HAL_RCC_ClockConfig+0x1a0>
 8002a42:	4b31      	ldr	r3, [pc, #196]	@ (8002b08 <HAL_RCC_ClockConfig+0x260>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	e00d      	b.n	8002a64 <HAL_RCC_ClockConfig+0x1bc>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a4e:	fa93 f3a3 	rbit	r3, r3
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a54:	2302      	movs	r3, #2
 8002a56:	623b      	str	r3, [r7, #32]
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	61fb      	str	r3, [r7, #28]
 8002a60:	4b29      	ldr	r3, [pc, #164]	@ (8002b08 <HAL_RCC_ClockConfig+0x260>)
 8002a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a64:	2202      	movs	r2, #2
 8002a66:	61ba      	str	r2, [r7, #24]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	fa92 f2a2 	rbit	r2, r2
 8002a6e:	617a      	str	r2, [r7, #20]
  return result;
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	fab2 f282 	clz	r2, r2
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	f042 0220 	orr.w	r2, r2, #32
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	f002 021f 	and.w	r2, r2, #31
 8002a82:	2101      	movs	r1, #1
 8002a84:	fa01 f202 	lsl.w	r2, r1, r2
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e079      	b.n	8002b86 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a92:	4b1d      	ldr	r3, [pc, #116]	@ (8002b08 <HAL_RCC_ClockConfig+0x260>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f023 0203 	bic.w	r2, r3, #3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	491a      	ldr	r1, [pc, #104]	@ (8002b08 <HAL_RCC_ClockConfig+0x260>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aa4:	f7fe fbc8 	bl	8001238 <HAL_GetTick>
 8002aa8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aaa:	e00a      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aac:	f7fe fbc4 	bl	8001238 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e061      	b.n	8002b86 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac2:	4b11      	ldr	r3, [pc, #68]	@ (8002b08 <HAL_RCC_ClockConfig+0x260>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 020c 	and.w	r2, r3, #12
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d1eb      	bne.n	8002aac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b04 <HAL_RCC_ClockConfig+0x25c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d214      	bcs.n	8002b0c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae2:	4b08      	ldr	r3, [pc, #32]	@ (8002b04 <HAL_RCC_ClockConfig+0x25c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f023 0207 	bic.w	r2, r3, #7
 8002aea:	4906      	ldr	r1, [pc, #24]	@ (8002b04 <HAL_RCC_ClockConfig+0x25c>)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af2:	4b04      	ldr	r3, [pc, #16]	@ (8002b04 <HAL_RCC_ClockConfig+0x25c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d005      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e040      	b.n	8002b86 <HAL_RCC_ClockConfig+0x2de>
 8002b04:	40022000 	.word	0x40022000
 8002b08:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b18:	4b1d      	ldr	r3, [pc, #116]	@ (8002b90 <HAL_RCC_ClockConfig+0x2e8>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	491a      	ldr	r1, [pc, #104]	@ (8002b90 <HAL_RCC_ClockConfig+0x2e8>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d009      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b36:	4b16      	ldr	r3, [pc, #88]	@ (8002b90 <HAL_RCC_ClockConfig+0x2e8>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4912      	ldr	r1, [pc, #72]	@ (8002b90 <HAL_RCC_ClockConfig+0x2e8>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b4a:	f000 f829 	bl	8002ba0 <HAL_RCC_GetSysClockFreq>
 8002b4e:	4601      	mov	r1, r0
 8002b50:	4b0f      	ldr	r3, [pc, #60]	@ (8002b90 <HAL_RCC_ClockConfig+0x2e8>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b58:	22f0      	movs	r2, #240	@ 0xf0
 8002b5a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	fa92 f2a2 	rbit	r2, r2
 8002b62:	60fa      	str	r2, [r7, #12]
  return result;
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	fab2 f282 	clz	r2, r2
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	40d3      	lsrs	r3, r2
 8002b6e:	4a09      	ldr	r2, [pc, #36]	@ (8002b94 <HAL_RCC_ClockConfig+0x2ec>)
 8002b70:	5cd3      	ldrb	r3, [r2, r3]
 8002b72:	fa21 f303 	lsr.w	r3, r1, r3
 8002b76:	4a08      	ldr	r2, [pc, #32]	@ (8002b98 <HAL_RCC_ClockConfig+0x2f0>)
 8002b78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b7a:	4b08      	ldr	r3, [pc, #32]	@ (8002b9c <HAL_RCC_ClockConfig+0x2f4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fe fb16 	bl	80011b0 <HAL_InitTick>
  
  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3778      	adds	r7, #120	@ 0x78
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40021000 	.word	0x40021000
 8002b94:	080046a4 	.word	0x080046a4
 8002b98:	20000000 	.word	0x20000000
 8002b9c:	20000004 	.word	0x20000004

08002ba0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b087      	sub	sp, #28
 8002ba4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	2300      	movs	r3, #0
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002bba:	4b1f      	ldr	r3, [pc, #124]	@ (8002c38 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d002      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x30>
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d003      	beq.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x36>
 8002bce:	e029      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bd2:	613b      	str	r3, [r7, #16]
      break;
 8002bd4:	e029      	b.n	8002c2a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	0c9b      	lsrs	r3, r3, #18
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	4a18      	ldr	r2, [pc, #96]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002be0:	5cd3      	ldrb	r3, [r2, r3]
 8002be2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002be4:	4b14      	ldr	r3, [pc, #80]	@ (8002c38 <HAL_RCC_GetSysClockFreq+0x98>)
 8002be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be8:	f003 030f 	and.w	r3, r3, #15
 8002bec:	4a15      	ldr	r2, [pc, #84]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002bee:	5cd3      	ldrb	r3, [r2, r3]
 8002bf0:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d008      	beq.n	8002c0e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002bfc:	4a0f      	ldr	r2, [pc, #60]	@ (8002c3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	fb02 f303 	mul.w	r3, r2, r3
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	e007      	b.n	8002c1e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c0e:	4a0b      	ldr	r2, [pc, #44]	@ (8002c3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	fb02 f303 	mul.w	r3, r2, r3
 8002c1c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	613b      	str	r3, [r7, #16]
      break;
 8002c22:	e002      	b.n	8002c2a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c24:	4b05      	ldr	r3, [pc, #20]	@ (8002c3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c26:	613b      	str	r3, [r7, #16]
      break;
 8002c28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c2a:	693b      	ldr	r3, [r7, #16]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	371c      	adds	r7, #28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	007a1200 	.word	0x007a1200
 8002c40:	080046bc 	.word	0x080046bc
 8002c44:	080046cc 	.word	0x080046cc

08002c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c4c:	4b03      	ldr	r3, [pc, #12]	@ (8002c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	20000000 	.word	0x20000000

08002c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002c66:	f7ff ffef 	bl	8002c48 <HAL_RCC_GetHCLKFreq>
 8002c6a:	4601      	mov	r1, r0
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c9c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c74:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002c78:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	fa92 f2a2 	rbit	r2, r2
 8002c80:	603a      	str	r2, [r7, #0]
  return result;
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	fab2 f282 	clz	r2, r2
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	40d3      	lsrs	r3, r2
 8002c8c:	4a04      	ldr	r2, [pc, #16]	@ (8002ca0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002c8e:	5cd3      	ldrb	r3, [r2, r3]
 8002c90:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	080046b4 	.word	0x080046b4

08002ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002caa:	f7ff ffcd 	bl	8002c48 <HAL_RCC_GetHCLKFreq>
 8002cae:	4601      	mov	r1, r0
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002cb8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002cbc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	fa92 f2a2 	rbit	r2, r2
 8002cc4:	603a      	str	r2, [r7, #0]
  return result;
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	fab2 f282 	clz	r2, r2
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	40d3      	lsrs	r3, r2
 8002cd0:	4a04      	ldr	r2, [pc, #16]	@ (8002ce4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002cd2:	5cd3      	ldrb	r3, [r2, r3]
 8002cd4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	080046b4 	.word	0x080046b4

08002ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b092      	sub	sp, #72	@ 0x48
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 80d4 	beq.w	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d0c:	4b4e      	ldr	r3, [pc, #312]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10e      	bne.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d18:	4b4b      	ldr	r3, [pc, #300]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	4a4a      	ldr	r2, [pc, #296]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d22:	61d3      	str	r3, [r2, #28]
 8002d24:	4b48      	ldr	r3, [pc, #288]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d30:	2301      	movs	r3, #1
 8002d32:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d36:	4b45      	ldr	r3, [pc, #276]	@ (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d118      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d42:	4b42      	ldr	r3, [pc, #264]	@ (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a41      	ldr	r2, [pc, #260]	@ (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d4c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d4e:	f7fe fa73 	bl	8001238 <HAL_GetTick>
 8002d52:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d54:	e008      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d56:	f7fe fa6f 	bl	8001238 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b64      	cmp	r3, #100	@ 0x64
 8002d62:	d901      	bls.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e1d6      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d68:	4b38      	ldr	r3, [pc, #224]	@ (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d74:	4b34      	ldr	r3, [pc, #208]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 8084 	beq.w	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d8e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d07c      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d94:	4b2c      	ldr	r3, [pc, #176]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d9e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002da2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	461a      	mov	r2, r3
 8002db6:	4b26      	ldr	r3, [pc, #152]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002db8:	4413      	add	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dca:	fa93 f3a3 	rbit	r3, r3
 8002dce:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dd2:	fab3 f383 	clz	r3, r3
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4b1d      	ldr	r3, [pc, #116]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ddc:	4413      	add	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	461a      	mov	r2, r3
 8002de2:	2300      	movs	r3, #0
 8002de4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002de6:	4a18      	ldr	r2, [pc, #96]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d04b      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df6:	f7fe fa1f 	bl	8001238 <HAL_GetTick>
 8002dfa:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dfc:	e00a      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfe:	f7fe fa1b 	bl	8001238 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e180      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002e14:	2302      	movs	r3, #2
 8002e16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e1a:	fa93 f3a3 	rbit	r3, r3
 8002e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e20:	2302      	movs	r3, #2
 8002e22:	623b      	str	r3, [r7, #32]
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	fa93 f3a3 	rbit	r3, r3
 8002e2a:	61fb      	str	r3, [r7, #28]
  return result;
 8002e2c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	095b      	lsrs	r3, r3, #5
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	f043 0302 	orr.w	r3, r3, #2
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d108      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002e42:	4b01      	ldr	r3, [pc, #4]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	e00d      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40007000 	.word	0x40007000
 8002e50:	10908100 	.word	0x10908100
 8002e54:	2302      	movs	r3, #2
 8002e56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	fa93 f3a3 	rbit	r3, r3
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	4b9a      	ldr	r3, [pc, #616]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e64:	2202      	movs	r2, #2
 8002e66:	613a      	str	r2, [r7, #16]
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	fa92 f2a2 	rbit	r2, r2
 8002e6e:	60fa      	str	r2, [r7, #12]
  return result;
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	fab2 f282 	clz	r2, r2
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	f002 021f 	and.w	r2, r2, #31
 8002e82:	2101      	movs	r1, #1
 8002e84:	fa01 f202 	lsl.w	r2, r1, r2
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0b7      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002e8e:	4b8f      	ldr	r3, [pc, #572]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	498c      	ldr	r1, [pc, #560]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ea0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d105      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea8:	4b88      	ldr	r3, [pc, #544]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	4a87      	ldr	r2, [pc, #540]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eb2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d008      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ec0:	4b82      	ldr	r3, [pc, #520]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec4:	f023 0203 	bic.w	r2, r3, #3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	497f      	ldr	r1, [pc, #508]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d008      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ede:	4b7b      	ldr	r3, [pc, #492]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	4978      	ldr	r1, [pc, #480]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002efc:	4b73      	ldr	r3, [pc, #460]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f00:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	4970      	ldr	r1, [pc, #448]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d008      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f1a:	4b6c      	ldr	r3, [pc, #432]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	f023 0210 	bic.w	r2, r3, #16
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	4969      	ldr	r1, [pc, #420]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002f38:	4b64      	ldr	r3, [pc, #400]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f44:	4961      	ldr	r1, [pc, #388]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d008      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f56:	4b5d      	ldr	r3, [pc, #372]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5a:	f023 0220 	bic.w	r2, r3, #32
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	495a      	ldr	r1, [pc, #360]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d008      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f74:	4b55      	ldr	r3, [pc, #340]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f78:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f80:	4952      	ldr	r1, [pc, #328]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d008      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f92:	4b4e      	ldr	r3, [pc, #312]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	494b      	ldr	r1, [pc, #300]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0310 	and.w	r3, r3, #16
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fb0:	4b46      	ldr	r3, [pc, #280]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	4943      	ldr	r1, [pc, #268]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d008      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fce:	4b3f      	ldr	r3, [pc, #252]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fda:	493c      	ldr	r1, [pc, #240]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002fec:	4b37      	ldr	r3, [pc, #220]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff0:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff8:	4934      	ldr	r1, [pc, #208]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003006:	2b00      	cmp	r3, #0
 8003008:	d008      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800300a:	4b30      	ldr	r3, [pc, #192]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800300c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300e:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003016:	492d      	ldr	r1, [pc, #180]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003018:	4313      	orrs	r3, r2
 800301a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d008      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003028:	4b28      	ldr	r3, [pc, #160]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800302a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003034:	4925      	ldr	r1, [pc, #148]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003036:	4313      	orrs	r3, r2
 8003038:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d008      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003046:	4b21      	ldr	r3, [pc, #132]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003052:	491e      	ldr	r1, [pc, #120]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003054:	4313      	orrs	r3, r2
 8003056:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d008      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003064:	4b19      	ldr	r3, [pc, #100]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003068:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003070:	4916      	ldr	r1, [pc, #88]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003072:	4313      	orrs	r3, r2
 8003074:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d008      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003082:	4b12      	ldr	r3, [pc, #72]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003086:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800308e:	490f      	ldr	r1, [pc, #60]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003090:	4313      	orrs	r3, r2
 8003092:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d008      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80030a0:	4b0a      	ldr	r3, [pc, #40]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ac:	4907      	ldr	r1, [pc, #28]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00c      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80030be:	4b03      	ldr	r3, [pc, #12]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	e002      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80030ca:	bf00      	nop
 80030cc:	40021000 	.word	0x40021000
 80030d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030d2:	4913      	ldr	r1, [pc, #76]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d008      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80030e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f0:	490b      	ldr	r1, [pc, #44]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d008      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003102:	4b07      	ldr	r3, [pc, #28]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003106:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800310e:	4904      	ldr	r1, [pc, #16]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003110:	4313      	orrs	r3, r2
 8003112:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3748      	adds	r7, #72	@ 0x48
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40021000 	.word	0x40021000

08003124 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e049      	b.n	80031ca <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d106      	bne.n	8003150 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fd ff32 	bl	8000fb4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3304      	adds	r3, #4
 8003160:	4619      	mov	r1, r3
 8003162:	4610      	mov	r0, r2
 8003164:	f000 fb8a 	bl	800387c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d104      	bne.n	80031f2 <HAL_TIM_IC_Start_IT+0x1e>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	e023      	b.n	800323a <HAL_TIM_IC_Start_IT+0x66>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d104      	bne.n	8003202 <HAL_TIM_IC_Start_IT+0x2e>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	e01b      	b.n	800323a <HAL_TIM_IC_Start_IT+0x66>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b08      	cmp	r3, #8
 8003206:	d104      	bne.n	8003212 <HAL_TIM_IC_Start_IT+0x3e>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800320e:	b2db      	uxtb	r3, r3
 8003210:	e013      	b.n	800323a <HAL_TIM_IC_Start_IT+0x66>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2b0c      	cmp	r3, #12
 8003216:	d104      	bne.n	8003222 <HAL_TIM_IC_Start_IT+0x4e>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800321e:	b2db      	uxtb	r3, r3
 8003220:	e00b      	b.n	800323a <HAL_TIM_IC_Start_IT+0x66>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b10      	cmp	r3, #16
 8003226:	d104      	bne.n	8003232 <HAL_TIM_IC_Start_IT+0x5e>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800322e:	b2db      	uxtb	r3, r3
 8003230:	e003      	b.n	800323a <HAL_TIM_IC_Start_IT+0x66>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003238:	b2db      	uxtb	r3, r3
 800323a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d104      	bne.n	800324c <HAL_TIM_IC_Start_IT+0x78>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003248:	b2db      	uxtb	r3, r3
 800324a:	e013      	b.n	8003274 <HAL_TIM_IC_Start_IT+0xa0>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	2b04      	cmp	r3, #4
 8003250:	d104      	bne.n	800325c <HAL_TIM_IC_Start_IT+0x88>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003258:	b2db      	uxtb	r3, r3
 800325a:	e00b      	b.n	8003274 <HAL_TIM_IC_Start_IT+0xa0>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2b08      	cmp	r3, #8
 8003260:	d104      	bne.n	800326c <HAL_TIM_IC_Start_IT+0x98>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003268:	b2db      	uxtb	r3, r3
 800326a:	e003      	b.n	8003274 <HAL_TIM_IC_Start_IT+0xa0>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003272:	b2db      	uxtb	r3, r3
 8003274:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003276:	7bbb      	ldrb	r3, [r7, #14]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d102      	bne.n	8003282 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800327c:	7b7b      	ldrb	r3, [r7, #13]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d001      	beq.n	8003286 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e0dd      	b.n	8003442 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d104      	bne.n	8003296 <HAL_TIM_IC_Start_IT+0xc2>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003294:	e023      	b.n	80032de <HAL_TIM_IC_Start_IT+0x10a>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b04      	cmp	r3, #4
 800329a:	d104      	bne.n	80032a6 <HAL_TIM_IC_Start_IT+0xd2>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032a4:	e01b      	b.n	80032de <HAL_TIM_IC_Start_IT+0x10a>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d104      	bne.n	80032b6 <HAL_TIM_IC_Start_IT+0xe2>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032b4:	e013      	b.n	80032de <HAL_TIM_IC_Start_IT+0x10a>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b0c      	cmp	r3, #12
 80032ba:	d104      	bne.n	80032c6 <HAL_TIM_IC_Start_IT+0xf2>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032c4:	e00b      	b.n	80032de <HAL_TIM_IC_Start_IT+0x10a>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b10      	cmp	r3, #16
 80032ca:	d104      	bne.n	80032d6 <HAL_TIM_IC_Start_IT+0x102>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032d4:	e003      	b.n	80032de <HAL_TIM_IC_Start_IT+0x10a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2202      	movs	r2, #2
 80032da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d104      	bne.n	80032ee <HAL_TIM_IC_Start_IT+0x11a>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032ec:	e013      	b.n	8003316 <HAL_TIM_IC_Start_IT+0x142>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d104      	bne.n	80032fe <HAL_TIM_IC_Start_IT+0x12a>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032fc:	e00b      	b.n	8003316 <HAL_TIM_IC_Start_IT+0x142>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b08      	cmp	r3, #8
 8003302:	d104      	bne.n	800330e <HAL_TIM_IC_Start_IT+0x13a>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800330c:	e003      	b.n	8003316 <HAL_TIM_IC_Start_IT+0x142>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2202      	movs	r2, #2
 8003312:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b0c      	cmp	r3, #12
 800331a:	d841      	bhi.n	80033a0 <HAL_TIM_IC_Start_IT+0x1cc>
 800331c:	a201      	add	r2, pc, #4	@ (adr r2, 8003324 <HAL_TIM_IC_Start_IT+0x150>)
 800331e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003322:	bf00      	nop
 8003324:	08003359 	.word	0x08003359
 8003328:	080033a1 	.word	0x080033a1
 800332c:	080033a1 	.word	0x080033a1
 8003330:	080033a1 	.word	0x080033a1
 8003334:	0800336b 	.word	0x0800336b
 8003338:	080033a1 	.word	0x080033a1
 800333c:	080033a1 	.word	0x080033a1
 8003340:	080033a1 	.word	0x080033a1
 8003344:	0800337d 	.word	0x0800337d
 8003348:	080033a1 	.word	0x080033a1
 800334c:	080033a1 	.word	0x080033a1
 8003350:	080033a1 	.word	0x080033a1
 8003354:	0800338f 	.word	0x0800338f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0202 	orr.w	r2, r2, #2
 8003366:	60da      	str	r2, [r3, #12]
      break;
 8003368:	e01d      	b.n	80033a6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f042 0204 	orr.w	r2, r2, #4
 8003378:	60da      	str	r2, [r3, #12]
      break;
 800337a:	e014      	b.n	80033a6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0208 	orr.w	r2, r2, #8
 800338a:	60da      	str	r2, [r3, #12]
      break;
 800338c:	e00b      	b.n	80033a6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f042 0210 	orr.w	r2, r2, #16
 800339c:	60da      	str	r2, [r3, #12]
      break;
 800339e:	e002      	b.n	80033a6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	73fb      	strb	r3, [r7, #15]
      break;
 80033a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d149      	bne.n	8003440 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2201      	movs	r2, #1
 80033b2:	6839      	ldr	r1, [r7, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fc2f 	bl	8003c18 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a23      	ldr	r2, [pc, #140]	@ (800344c <HAL_TIM_IC_Start_IT+0x278>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d01d      	beq.n	8003400 <HAL_TIM_IC_Start_IT+0x22c>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033cc:	d018      	beq.n	8003400 <HAL_TIM_IC_Start_IT+0x22c>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a1f      	ldr	r2, [pc, #124]	@ (8003450 <HAL_TIM_IC_Start_IT+0x27c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d013      	beq.n	8003400 <HAL_TIM_IC_Start_IT+0x22c>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a1d      	ldr	r2, [pc, #116]	@ (8003454 <HAL_TIM_IC_Start_IT+0x280>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00e      	beq.n	8003400 <HAL_TIM_IC_Start_IT+0x22c>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a1c      	ldr	r2, [pc, #112]	@ (8003458 <HAL_TIM_IC_Start_IT+0x284>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d009      	beq.n	8003400 <HAL_TIM_IC_Start_IT+0x22c>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a1a      	ldr	r2, [pc, #104]	@ (800345c <HAL_TIM_IC_Start_IT+0x288>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d004      	beq.n	8003400 <HAL_TIM_IC_Start_IT+0x22c>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a19      	ldr	r2, [pc, #100]	@ (8003460 <HAL_TIM_IC_Start_IT+0x28c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d115      	bne.n	800342c <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	4b17      	ldr	r3, [pc, #92]	@ (8003464 <HAL_TIM_IC_Start_IT+0x290>)
 8003408:	4013      	ands	r3, r2
 800340a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b06      	cmp	r3, #6
 8003410:	d015      	beq.n	800343e <HAL_TIM_IC_Start_IT+0x26a>
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003418:	d011      	beq.n	800343e <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 0201 	orr.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800342a:	e008      	b.n	800343e <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	e000      	b.n	8003440 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003440:	7bfb      	ldrb	r3, [r7, #15]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40012c00 	.word	0x40012c00
 8003450:	40000400 	.word	0x40000400
 8003454:	40000800 	.word	0x40000800
 8003458:	40013400 	.word	0x40013400
 800345c:	40014000 	.word	0x40014000
 8003460:	40015000 	.word	0x40015000
 8003464:	00010007 	.word	0x00010007

08003468 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d020      	beq.n	80034cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d01b      	beq.n	80034cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0202 	mvn.w	r2, #2
 800349c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fd fb8c 	bl	8000bd0 <HAL_TIM_IC_CaptureCallback>
 80034b8:	e005      	b.n	80034c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f9c0 	bl	8003840 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f9c7 	bl	8003854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d020      	beq.n	8003518 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d01b      	beq.n	8003518 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0204 	mvn.w	r2, #4
 80034e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2202      	movs	r2, #2
 80034ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7fd fb66 	bl	8000bd0 <HAL_TIM_IC_CaptureCallback>
 8003504:	e005      	b.n	8003512 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f99a 	bl	8003840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f9a1 	bl	8003854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d020      	beq.n	8003564 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b00      	cmp	r3, #0
 800352a:	d01b      	beq.n	8003564 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0208 	mvn.w	r2, #8
 8003534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2204      	movs	r2, #4
 800353a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fd fb40 	bl	8000bd0 <HAL_TIM_IC_CaptureCallback>
 8003550:	e005      	b.n	800355e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f974 	bl	8003840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f97b 	bl	8003854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f003 0310 	and.w	r3, r3, #16
 800356a:	2b00      	cmp	r3, #0
 800356c:	d020      	beq.n	80035b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f003 0310 	and.w	r3, r3, #16
 8003574:	2b00      	cmp	r3, #0
 8003576:	d01b      	beq.n	80035b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0210 	mvn.w	r2, #16
 8003580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2208      	movs	r2, #8
 8003586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fd fb1a 	bl	8000bd0 <HAL_TIM_IC_CaptureCallback>
 800359c:	e005      	b.n	80035aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f94e 	bl	8003840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f955 	bl	8003854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00c      	beq.n	80035d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d007      	beq.n	80035d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 0201 	mvn.w	r2, #1
 80035cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f92c 	bl	800382c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00c      	beq.n	80035f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d007      	beq.n	80035f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80035f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fbcc 	bl	8003d90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00c      	beq.n	800361c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003608:	2b00      	cmp	r3, #0
 800360a:	d007      	beq.n	800361c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fbc4 	bl	8003da4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00c      	beq.n	8003640 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800362c:	2b00      	cmp	r3, #0
 800362e:	d007      	beq.n	8003640 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f914 	bl	8003868 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00c      	beq.n	8003664 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b00      	cmp	r3, #0
 8003652:	d007      	beq.n	8003664 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0220 	mvn.w	r2, #32
 800365c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 fb8c 	bl	8003d7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003664:	bf00      	nop
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003682:	2b01      	cmp	r3, #1
 8003684:	d101      	bne.n	800368a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003686:	2302      	movs	r3, #2
 8003688:	e088      	b.n	800379c <HAL_TIM_IC_ConfigChannel+0x130>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d11b      	bne.n	80036d0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80036a8:	f000 f992 	bl	80039d0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	699a      	ldr	r2, [r3, #24]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 020c 	bic.w	r2, r2, #12
 80036ba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6999      	ldr	r1, [r3, #24]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	619a      	str	r2, [r3, #24]
 80036ce:	e060      	b.n	8003792 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d11c      	bne.n	8003710 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80036e6:	f000 f9e1 	bl	8003aac <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	699a      	ldr	r2, [r3, #24]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80036f8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6999      	ldr	r1, [r3, #24]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	021a      	lsls	r2, r3, #8
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	619a      	str	r2, [r3, #24]
 800370e:	e040      	b.n	8003792 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b08      	cmp	r3, #8
 8003714:	d11b      	bne.n	800374e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003726:	f000 f9fe 	bl	8003b26 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69da      	ldr	r2, [r3, #28]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 020c 	bic.w	r2, r2, #12
 8003738:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69d9      	ldr	r1, [r3, #28]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	61da      	str	r2, [r3, #28]
 800374c:	e021      	b.n	8003792 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b0c      	cmp	r3, #12
 8003752:	d11c      	bne.n	800378e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003764:	f000 fa1b 	bl	8003b9e <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	69da      	ldr	r2, [r3, #28]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003776:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69d9      	ldr	r1, [r3, #28]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	021a      	lsls	r2, r3, #8
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	61da      	str	r2, [r3, #28]
 800378c:	e001      	b.n	8003792 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800379a:	7dfb      	ldrb	r3, [r7, #23]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b0c      	cmp	r3, #12
 80037b6:	d831      	bhi.n	800381c <HAL_TIM_ReadCapturedValue+0x78>
 80037b8:	a201      	add	r2, pc, #4	@ (adr r2, 80037c0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80037ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037be:	bf00      	nop
 80037c0:	080037f5 	.word	0x080037f5
 80037c4:	0800381d 	.word	0x0800381d
 80037c8:	0800381d 	.word	0x0800381d
 80037cc:	0800381d 	.word	0x0800381d
 80037d0:	080037ff 	.word	0x080037ff
 80037d4:	0800381d 	.word	0x0800381d
 80037d8:	0800381d 	.word	0x0800381d
 80037dc:	0800381d 	.word	0x0800381d
 80037e0:	08003809 	.word	0x08003809
 80037e4:	0800381d 	.word	0x0800381d
 80037e8:	0800381d 	.word	0x0800381d
 80037ec:	0800381d 	.word	0x0800381d
 80037f0:	08003813 	.word	0x08003813
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037fa:	60fb      	str	r3, [r7, #12]

      break;
 80037fc:	e00f      	b.n	800381e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003804:	60fb      	str	r3, [r7, #12]

      break;
 8003806:	e00a      	b.n	800381e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800380e:	60fb      	str	r3, [r7, #12]

      break;
 8003810:	e005      	b.n	800381e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003818:	60fb      	str	r3, [r7, #12]

      break;
 800381a:	e000      	b.n	800381e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800381c:	bf00      	nop
  }

  return tmpreg;
 800381e:	68fb      	ldr	r3, [r7, #12]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a48      	ldr	r2, [pc, #288]	@ (80039b0 <TIM_Base_SetConfig+0x134>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d013      	beq.n	80038bc <TIM_Base_SetConfig+0x40>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800389a:	d00f      	beq.n	80038bc <TIM_Base_SetConfig+0x40>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a45      	ldr	r2, [pc, #276]	@ (80039b4 <TIM_Base_SetConfig+0x138>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00b      	beq.n	80038bc <TIM_Base_SetConfig+0x40>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a44      	ldr	r2, [pc, #272]	@ (80039b8 <TIM_Base_SetConfig+0x13c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d007      	beq.n	80038bc <TIM_Base_SetConfig+0x40>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a43      	ldr	r2, [pc, #268]	@ (80039bc <TIM_Base_SetConfig+0x140>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d003      	beq.n	80038bc <TIM_Base_SetConfig+0x40>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a42      	ldr	r2, [pc, #264]	@ (80039c0 <TIM_Base_SetConfig+0x144>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d108      	bne.n	80038ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a37      	ldr	r2, [pc, #220]	@ (80039b0 <TIM_Base_SetConfig+0x134>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d01f      	beq.n	8003916 <TIM_Base_SetConfig+0x9a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038dc:	d01b      	beq.n	8003916 <TIM_Base_SetConfig+0x9a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a34      	ldr	r2, [pc, #208]	@ (80039b4 <TIM_Base_SetConfig+0x138>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d017      	beq.n	8003916 <TIM_Base_SetConfig+0x9a>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a33      	ldr	r2, [pc, #204]	@ (80039b8 <TIM_Base_SetConfig+0x13c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d013      	beq.n	8003916 <TIM_Base_SetConfig+0x9a>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a32      	ldr	r2, [pc, #200]	@ (80039bc <TIM_Base_SetConfig+0x140>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d00f      	beq.n	8003916 <TIM_Base_SetConfig+0x9a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a32      	ldr	r2, [pc, #200]	@ (80039c4 <TIM_Base_SetConfig+0x148>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d00b      	beq.n	8003916 <TIM_Base_SetConfig+0x9a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a31      	ldr	r2, [pc, #196]	@ (80039c8 <TIM_Base_SetConfig+0x14c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d007      	beq.n	8003916 <TIM_Base_SetConfig+0x9a>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a30      	ldr	r2, [pc, #192]	@ (80039cc <TIM_Base_SetConfig+0x150>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d003      	beq.n	8003916 <TIM_Base_SetConfig+0x9a>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a2b      	ldr	r2, [pc, #172]	@ (80039c0 <TIM_Base_SetConfig+0x144>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d108      	bne.n	8003928 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800391c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	4313      	orrs	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a18      	ldr	r2, [pc, #96]	@ (80039b0 <TIM_Base_SetConfig+0x134>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d013      	beq.n	800397c <TIM_Base_SetConfig+0x100>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a19      	ldr	r2, [pc, #100]	@ (80039bc <TIM_Base_SetConfig+0x140>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d00f      	beq.n	800397c <TIM_Base_SetConfig+0x100>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a19      	ldr	r2, [pc, #100]	@ (80039c4 <TIM_Base_SetConfig+0x148>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00b      	beq.n	800397c <TIM_Base_SetConfig+0x100>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a18      	ldr	r2, [pc, #96]	@ (80039c8 <TIM_Base_SetConfig+0x14c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d007      	beq.n	800397c <TIM_Base_SetConfig+0x100>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a17      	ldr	r2, [pc, #92]	@ (80039cc <TIM_Base_SetConfig+0x150>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d003      	beq.n	800397c <TIM_Base_SetConfig+0x100>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a12      	ldr	r2, [pc, #72]	@ (80039c0 <TIM_Base_SetConfig+0x144>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d103      	bne.n	8003984 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b01      	cmp	r3, #1
 8003994:	d105      	bne.n	80039a2 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f023 0201 	bic.w	r2, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	611a      	str	r2, [r3, #16]
  }
}
 80039a2:	bf00      	nop
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40012c00 	.word	0x40012c00
 80039b4:	40000400 	.word	0x40000400
 80039b8:	40000800 	.word	0x40000800
 80039bc:	40013400 	.word	0x40013400
 80039c0:	40015000 	.word	0x40015000
 80039c4:	40014000 	.word	0x40014000
 80039c8:	40014400 	.word	0x40014400
 80039cc:	40014800 	.word	0x40014800

080039d0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	f023 0201 	bic.w	r2, r3, #1
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4a26      	ldr	r2, [pc, #152]	@ (8003a94 <TIM_TI1_SetConfig+0xc4>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d017      	beq.n	8003a2e <TIM_TI1_SetConfig+0x5e>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a04:	d013      	beq.n	8003a2e <TIM_TI1_SetConfig+0x5e>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4a23      	ldr	r2, [pc, #140]	@ (8003a98 <TIM_TI1_SetConfig+0xc8>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00f      	beq.n	8003a2e <TIM_TI1_SetConfig+0x5e>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4a22      	ldr	r2, [pc, #136]	@ (8003a9c <TIM_TI1_SetConfig+0xcc>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d00b      	beq.n	8003a2e <TIM_TI1_SetConfig+0x5e>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4a21      	ldr	r2, [pc, #132]	@ (8003aa0 <TIM_TI1_SetConfig+0xd0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d007      	beq.n	8003a2e <TIM_TI1_SetConfig+0x5e>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4a20      	ldr	r2, [pc, #128]	@ (8003aa4 <TIM_TI1_SetConfig+0xd4>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d003      	beq.n	8003a2e <TIM_TI1_SetConfig+0x5e>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4a1f      	ldr	r2, [pc, #124]	@ (8003aa8 <TIM_TI1_SetConfig+0xd8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d101      	bne.n	8003a32 <TIM_TI1_SetConfig+0x62>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <TIM_TI1_SetConfig+0x64>
 8003a32:	2300      	movs	r3, #0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d008      	beq.n	8003a4a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f023 0303 	bic.w	r3, r3, #3
 8003a3e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	e003      	b.n	8003a52 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	f023 030a 	bic.w	r3, r3, #10
 8003a6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	f003 030a 	and.w	r3, r3, #10
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	621a      	str	r2, [r3, #32]
}
 8003a86:	bf00      	nop
 8003a88:	371c      	adds	r7, #28
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	40012c00 	.word	0x40012c00
 8003a98:	40000400 	.word	0x40000400
 8003a9c:	40000800 	.word	0x40000800
 8003aa0:	40013400 	.word	0x40013400
 8003aa4:	40014000 	.word	0x40014000
 8003aa8:	40015000 	.word	0x40015000

08003aac <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b087      	sub	sp, #28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	f023 0210 	bic.w	r2, r3, #16
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ad8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	021b      	lsls	r3, r3, #8
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003aea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	031b      	lsls	r3, r3, #12
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003afe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	621a      	str	r2, [r3, #32]
}
 8003b1a:	bf00      	nop
 8003b1c:	371c      	adds	r7, #28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b087      	sub	sp, #28
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	60f8      	str	r0, [r7, #12]
 8003b2e:	60b9      	str	r1, [r7, #8]
 8003b30:	607a      	str	r2, [r7, #4]
 8003b32:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	f023 0303 	bic.w	r3, r3, #3
 8003b52:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b62:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003b76:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	021b      	lsls	r3, r3, #8
 8003b7c:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	621a      	str	r2, [r3, #32]
}
 8003b92:	bf00      	nop
 8003b94:	371c      	adds	r7, #28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b087      	sub	sp, #28
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]
 8003baa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bca:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	021b      	lsls	r3, r3, #8
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003bdc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	031b      	lsls	r3, r3, #12
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003bf0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	031b      	lsls	r3, r3, #12
 8003bf6:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	621a      	str	r2, [r3, #32]
}
 8003c0c:	bf00      	nop
 8003c0e:	371c      	adds	r7, #28
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f003 031f 	and.w	r3, r3, #31
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a1a      	ldr	r2, [r3, #32]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	401a      	ands	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a1a      	ldr	r2, [r3, #32]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f003 031f 	and.w	r3, r3, #31
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c50:	431a      	orrs	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	621a      	str	r2, [r3, #32]
}
 8003c56:	bf00      	nop
 8003c58:	371c      	adds	r7, #28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
	...

08003c64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d101      	bne.n	8003c7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	e06d      	b.n	8003d58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2202      	movs	r2, #2
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a30      	ldr	r2, [pc, #192]	@ (8003d64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d009      	beq.n	8003cba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a2f      	ldr	r2, [pc, #188]	@ (8003d68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d004      	beq.n	8003cba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a2d      	ldr	r2, [pc, #180]	@ (8003d6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d108      	bne.n	8003ccc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003cc0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a1e      	ldr	r2, [pc, #120]	@ (8003d64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d01d      	beq.n	8003d2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cf8:	d018      	beq.n	8003d2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a1c      	ldr	r2, [pc, #112]	@ (8003d70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d013      	beq.n	8003d2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a1a      	ldr	r2, [pc, #104]	@ (8003d74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d00e      	beq.n	8003d2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a15      	ldr	r2, [pc, #84]	@ (8003d68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d009      	beq.n	8003d2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a16      	ldr	r2, [pc, #88]	@ (8003d78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d004      	beq.n	8003d2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a11      	ldr	r2, [pc, #68]	@ (8003d6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d10c      	bne.n	8003d46 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	40012c00 	.word	0x40012c00
 8003d68:	40013400 	.word	0x40013400
 8003d6c:	40015000 	.word	0x40015000
 8003d70:	40000400 	.word	0x40000400
 8003d74:	40000800 	.word	0x40000800
 8003d78:	40014000 	.word	0x40014000

08003d7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e040      	b.n	8003e4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d106      	bne.n	8003de0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fd f966 	bl	80010ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2224      	movs	r2, #36	@ 0x24
 8003de4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0201 	bic.w	r2, r2, #1
 8003df4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f9fc 	bl	80041fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f825 	bl	8003e54 <UART_SetConfig>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e01b      	b.n	8003e4c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0201 	orr.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 fa7b 	bl	8004340 <UART_CheckIdleState>
 8003e4a:	4603      	mov	r3, r0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	4b92      	ldr	r3, [pc, #584]	@ (80040c8 <UART_SetConfig+0x274>)
 8003e80:	4013      	ands	r3, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6812      	ldr	r2, [r2, #0]
 8003e86:	6979      	ldr	r1, [r7, #20]
 8003e88:	430b      	orrs	r3, r1
 8003e8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a80      	ldr	r2, [pc, #512]	@ (80040cc <UART_SetConfig+0x278>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d120      	bne.n	8003f12 <UART_SetConfig+0xbe>
 8003ed0:	4b7f      	ldr	r3, [pc, #508]	@ (80040d0 <UART_SetConfig+0x27c>)
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed4:	f003 0303 	and.w	r3, r3, #3
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	d817      	bhi.n	8003f0c <UART_SetConfig+0xb8>
 8003edc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee4 <UART_SetConfig+0x90>)
 8003ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee2:	bf00      	nop
 8003ee4:	08003ef5 	.word	0x08003ef5
 8003ee8:	08003f01 	.word	0x08003f01
 8003eec:	08003f07 	.word	0x08003f07
 8003ef0:	08003efb 	.word	0x08003efb
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	77fb      	strb	r3, [r7, #31]
 8003ef8:	e0b5      	b.n	8004066 <UART_SetConfig+0x212>
 8003efa:	2302      	movs	r3, #2
 8003efc:	77fb      	strb	r3, [r7, #31]
 8003efe:	e0b2      	b.n	8004066 <UART_SetConfig+0x212>
 8003f00:	2304      	movs	r3, #4
 8003f02:	77fb      	strb	r3, [r7, #31]
 8003f04:	e0af      	b.n	8004066 <UART_SetConfig+0x212>
 8003f06:	2308      	movs	r3, #8
 8003f08:	77fb      	strb	r3, [r7, #31]
 8003f0a:	e0ac      	b.n	8004066 <UART_SetConfig+0x212>
 8003f0c:	2310      	movs	r3, #16
 8003f0e:	77fb      	strb	r3, [r7, #31]
 8003f10:	e0a9      	b.n	8004066 <UART_SetConfig+0x212>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a6f      	ldr	r2, [pc, #444]	@ (80040d4 <UART_SetConfig+0x280>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d124      	bne.n	8003f66 <UART_SetConfig+0x112>
 8003f1c:	4b6c      	ldr	r3, [pc, #432]	@ (80040d0 <UART_SetConfig+0x27c>)
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f28:	d011      	beq.n	8003f4e <UART_SetConfig+0xfa>
 8003f2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f2e:	d817      	bhi.n	8003f60 <UART_SetConfig+0x10c>
 8003f30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f34:	d011      	beq.n	8003f5a <UART_SetConfig+0x106>
 8003f36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f3a:	d811      	bhi.n	8003f60 <UART_SetConfig+0x10c>
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <UART_SetConfig+0xf4>
 8003f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f44:	d006      	beq.n	8003f54 <UART_SetConfig+0x100>
 8003f46:	e00b      	b.n	8003f60 <UART_SetConfig+0x10c>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	77fb      	strb	r3, [r7, #31]
 8003f4c:	e08b      	b.n	8004066 <UART_SetConfig+0x212>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	77fb      	strb	r3, [r7, #31]
 8003f52:	e088      	b.n	8004066 <UART_SetConfig+0x212>
 8003f54:	2304      	movs	r3, #4
 8003f56:	77fb      	strb	r3, [r7, #31]
 8003f58:	e085      	b.n	8004066 <UART_SetConfig+0x212>
 8003f5a:	2308      	movs	r3, #8
 8003f5c:	77fb      	strb	r3, [r7, #31]
 8003f5e:	e082      	b.n	8004066 <UART_SetConfig+0x212>
 8003f60:	2310      	movs	r3, #16
 8003f62:	77fb      	strb	r3, [r7, #31]
 8003f64:	e07f      	b.n	8004066 <UART_SetConfig+0x212>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a5b      	ldr	r2, [pc, #364]	@ (80040d8 <UART_SetConfig+0x284>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d124      	bne.n	8003fba <UART_SetConfig+0x166>
 8003f70:	4b57      	ldr	r3, [pc, #348]	@ (80040d0 <UART_SetConfig+0x27c>)
 8003f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f74:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003f78:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003f7c:	d011      	beq.n	8003fa2 <UART_SetConfig+0x14e>
 8003f7e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003f82:	d817      	bhi.n	8003fb4 <UART_SetConfig+0x160>
 8003f84:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003f88:	d011      	beq.n	8003fae <UART_SetConfig+0x15a>
 8003f8a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003f8e:	d811      	bhi.n	8003fb4 <UART_SetConfig+0x160>
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <UART_SetConfig+0x148>
 8003f94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f98:	d006      	beq.n	8003fa8 <UART_SetConfig+0x154>
 8003f9a:	e00b      	b.n	8003fb4 <UART_SetConfig+0x160>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	77fb      	strb	r3, [r7, #31]
 8003fa0:	e061      	b.n	8004066 <UART_SetConfig+0x212>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	77fb      	strb	r3, [r7, #31]
 8003fa6:	e05e      	b.n	8004066 <UART_SetConfig+0x212>
 8003fa8:	2304      	movs	r3, #4
 8003faa:	77fb      	strb	r3, [r7, #31]
 8003fac:	e05b      	b.n	8004066 <UART_SetConfig+0x212>
 8003fae:	2308      	movs	r3, #8
 8003fb0:	77fb      	strb	r3, [r7, #31]
 8003fb2:	e058      	b.n	8004066 <UART_SetConfig+0x212>
 8003fb4:	2310      	movs	r3, #16
 8003fb6:	77fb      	strb	r3, [r7, #31]
 8003fb8:	e055      	b.n	8004066 <UART_SetConfig+0x212>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a47      	ldr	r2, [pc, #284]	@ (80040dc <UART_SetConfig+0x288>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d124      	bne.n	800400e <UART_SetConfig+0x1ba>
 8003fc4:	4b42      	ldr	r3, [pc, #264]	@ (80040d0 <UART_SetConfig+0x27c>)
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003fcc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003fd0:	d011      	beq.n	8003ff6 <UART_SetConfig+0x1a2>
 8003fd2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003fd6:	d817      	bhi.n	8004008 <UART_SetConfig+0x1b4>
 8003fd8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fdc:	d011      	beq.n	8004002 <UART_SetConfig+0x1ae>
 8003fde:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fe2:	d811      	bhi.n	8004008 <UART_SetConfig+0x1b4>
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <UART_SetConfig+0x19c>
 8003fe8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fec:	d006      	beq.n	8003ffc <UART_SetConfig+0x1a8>
 8003fee:	e00b      	b.n	8004008 <UART_SetConfig+0x1b4>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	77fb      	strb	r3, [r7, #31]
 8003ff4:	e037      	b.n	8004066 <UART_SetConfig+0x212>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	77fb      	strb	r3, [r7, #31]
 8003ffa:	e034      	b.n	8004066 <UART_SetConfig+0x212>
 8003ffc:	2304      	movs	r3, #4
 8003ffe:	77fb      	strb	r3, [r7, #31]
 8004000:	e031      	b.n	8004066 <UART_SetConfig+0x212>
 8004002:	2308      	movs	r3, #8
 8004004:	77fb      	strb	r3, [r7, #31]
 8004006:	e02e      	b.n	8004066 <UART_SetConfig+0x212>
 8004008:	2310      	movs	r3, #16
 800400a:	77fb      	strb	r3, [r7, #31]
 800400c:	e02b      	b.n	8004066 <UART_SetConfig+0x212>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a33      	ldr	r2, [pc, #204]	@ (80040e0 <UART_SetConfig+0x28c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d124      	bne.n	8004062 <UART_SetConfig+0x20e>
 8004018:	4b2d      	ldr	r3, [pc, #180]	@ (80040d0 <UART_SetConfig+0x27c>)
 800401a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004020:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004024:	d011      	beq.n	800404a <UART_SetConfig+0x1f6>
 8004026:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800402a:	d817      	bhi.n	800405c <UART_SetConfig+0x208>
 800402c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004030:	d011      	beq.n	8004056 <UART_SetConfig+0x202>
 8004032:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004036:	d811      	bhi.n	800405c <UART_SetConfig+0x208>
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <UART_SetConfig+0x1f0>
 800403c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004040:	d006      	beq.n	8004050 <UART_SetConfig+0x1fc>
 8004042:	e00b      	b.n	800405c <UART_SetConfig+0x208>
 8004044:	2300      	movs	r3, #0
 8004046:	77fb      	strb	r3, [r7, #31]
 8004048:	e00d      	b.n	8004066 <UART_SetConfig+0x212>
 800404a:	2302      	movs	r3, #2
 800404c:	77fb      	strb	r3, [r7, #31]
 800404e:	e00a      	b.n	8004066 <UART_SetConfig+0x212>
 8004050:	2304      	movs	r3, #4
 8004052:	77fb      	strb	r3, [r7, #31]
 8004054:	e007      	b.n	8004066 <UART_SetConfig+0x212>
 8004056:	2308      	movs	r3, #8
 8004058:	77fb      	strb	r3, [r7, #31]
 800405a:	e004      	b.n	8004066 <UART_SetConfig+0x212>
 800405c:	2310      	movs	r3, #16
 800405e:	77fb      	strb	r3, [r7, #31]
 8004060:	e001      	b.n	8004066 <UART_SetConfig+0x212>
 8004062:	2310      	movs	r3, #16
 8004064:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800406e:	d16b      	bne.n	8004148 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004070:	7ffb      	ldrb	r3, [r7, #31]
 8004072:	2b08      	cmp	r3, #8
 8004074:	d838      	bhi.n	80040e8 <UART_SetConfig+0x294>
 8004076:	a201      	add	r2, pc, #4	@ (adr r2, 800407c <UART_SetConfig+0x228>)
 8004078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407c:	080040a1 	.word	0x080040a1
 8004080:	080040a9 	.word	0x080040a9
 8004084:	080040b1 	.word	0x080040b1
 8004088:	080040e9 	.word	0x080040e9
 800408c:	080040b7 	.word	0x080040b7
 8004090:	080040e9 	.word	0x080040e9
 8004094:	080040e9 	.word	0x080040e9
 8004098:	080040e9 	.word	0x080040e9
 800409c:	080040bf 	.word	0x080040bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040a0:	f7fe fdde 	bl	8002c60 <HAL_RCC_GetPCLK1Freq>
 80040a4:	61b8      	str	r0, [r7, #24]
        break;
 80040a6:	e024      	b.n	80040f2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040a8:	f7fe fdfc 	bl	8002ca4 <HAL_RCC_GetPCLK2Freq>
 80040ac:	61b8      	str	r0, [r7, #24]
        break;
 80040ae:	e020      	b.n	80040f2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040b0:	4b0c      	ldr	r3, [pc, #48]	@ (80040e4 <UART_SetConfig+0x290>)
 80040b2:	61bb      	str	r3, [r7, #24]
        break;
 80040b4:	e01d      	b.n	80040f2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040b6:	f7fe fd73 	bl	8002ba0 <HAL_RCC_GetSysClockFreq>
 80040ba:	61b8      	str	r0, [r7, #24]
        break;
 80040bc:	e019      	b.n	80040f2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040c2:	61bb      	str	r3, [r7, #24]
        break;
 80040c4:	e015      	b.n	80040f2 <UART_SetConfig+0x29e>
 80040c6:	bf00      	nop
 80040c8:	efff69f3 	.word	0xefff69f3
 80040cc:	40013800 	.word	0x40013800
 80040d0:	40021000 	.word	0x40021000
 80040d4:	40004400 	.word	0x40004400
 80040d8:	40004800 	.word	0x40004800
 80040dc:	40004c00 	.word	0x40004c00
 80040e0:	40005000 	.word	0x40005000
 80040e4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	77bb      	strb	r3, [r7, #30]
        break;
 80040f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d073      	beq.n	80041e0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	005a      	lsls	r2, r3, #1
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	085b      	lsrs	r3, r3, #1
 8004102:	441a      	add	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	fbb2 f3f3 	udiv	r3, r2, r3
 800410c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	2b0f      	cmp	r3, #15
 8004112:	d916      	bls.n	8004142 <UART_SetConfig+0x2ee>
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800411a:	d212      	bcs.n	8004142 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	b29b      	uxth	r3, r3
 8004120:	f023 030f 	bic.w	r3, r3, #15
 8004124:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	085b      	lsrs	r3, r3, #1
 800412a:	b29b      	uxth	r3, r3
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	b29a      	uxth	r2, r3
 8004132:	89fb      	ldrh	r3, [r7, #14]
 8004134:	4313      	orrs	r3, r2
 8004136:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	89fa      	ldrh	r2, [r7, #14]
 800413e:	60da      	str	r2, [r3, #12]
 8004140:	e04e      	b.n	80041e0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	77bb      	strb	r3, [r7, #30]
 8004146:	e04b      	b.n	80041e0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004148:	7ffb      	ldrb	r3, [r7, #31]
 800414a:	2b08      	cmp	r3, #8
 800414c:	d827      	bhi.n	800419e <UART_SetConfig+0x34a>
 800414e:	a201      	add	r2, pc, #4	@ (adr r2, 8004154 <UART_SetConfig+0x300>)
 8004150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004154:	08004179 	.word	0x08004179
 8004158:	08004181 	.word	0x08004181
 800415c:	08004189 	.word	0x08004189
 8004160:	0800419f 	.word	0x0800419f
 8004164:	0800418f 	.word	0x0800418f
 8004168:	0800419f 	.word	0x0800419f
 800416c:	0800419f 	.word	0x0800419f
 8004170:	0800419f 	.word	0x0800419f
 8004174:	08004197 	.word	0x08004197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004178:	f7fe fd72 	bl	8002c60 <HAL_RCC_GetPCLK1Freq>
 800417c:	61b8      	str	r0, [r7, #24]
        break;
 800417e:	e013      	b.n	80041a8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004180:	f7fe fd90 	bl	8002ca4 <HAL_RCC_GetPCLK2Freq>
 8004184:	61b8      	str	r0, [r7, #24]
        break;
 8004186:	e00f      	b.n	80041a8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004188:	4b1b      	ldr	r3, [pc, #108]	@ (80041f8 <UART_SetConfig+0x3a4>)
 800418a:	61bb      	str	r3, [r7, #24]
        break;
 800418c:	e00c      	b.n	80041a8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800418e:	f7fe fd07 	bl	8002ba0 <HAL_RCC_GetSysClockFreq>
 8004192:	61b8      	str	r0, [r7, #24]
        break;
 8004194:	e008      	b.n	80041a8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004196:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800419a:	61bb      	str	r3, [r7, #24]
        break;
 800419c:	e004      	b.n	80041a8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	77bb      	strb	r3, [r7, #30]
        break;
 80041a6:	bf00      	nop
    }

    if (pclk != 0U)
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d018      	beq.n	80041e0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	085a      	lsrs	r2, r3, #1
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	441a      	add	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	2b0f      	cmp	r3, #15
 80041c6:	d909      	bls.n	80041dc <UART_SetConfig+0x388>
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041ce:	d205      	bcs.n	80041dc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	60da      	str	r2, [r3, #12]
 80041da:	e001      	b.n	80041e0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80041ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3720      	adds	r7, #32
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	007a1200 	.word	0x007a1200

080041fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004208:	f003 0308 	and.w	r3, r3, #8
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00a      	beq.n	8004226 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00a      	beq.n	800426a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426e:	f003 0304 	and.w	r3, r3, #4
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00a      	beq.n	800428c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004290:	f003 0310 	and.w	r3, r3, #16
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00a      	beq.n	80042ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b2:	f003 0320 	and.w	r3, r3, #32
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	430a      	orrs	r2, r1
 80042ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d01a      	beq.n	8004312 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042fa:	d10a      	bne.n	8004312 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	605a      	str	r2, [r3, #4]
  }
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b098      	sub	sp, #96	@ 0x60
 8004344:	af02      	add	r7, sp, #8
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004350:	f7fc ff72 	bl	8001238 <HAL_GetTick>
 8004354:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b08      	cmp	r3, #8
 8004362:	d12e      	bne.n	80043c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004364:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800436c:	2200      	movs	r2, #0
 800436e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f88c 	bl	8004490 <UART_WaitOnFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d021      	beq.n	80043c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004386:	e853 3f00 	ldrex	r3, [r3]
 800438a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800438c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800438e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004392:	653b      	str	r3, [r7, #80]	@ 0x50
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	461a      	mov	r2, r3
 800439a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800439c:	647b      	str	r3, [r7, #68]	@ 0x44
 800439e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043a4:	e841 2300 	strex	r3, r2, [r1]
 80043a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1e6      	bne.n	800437e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2220      	movs	r2, #32
 80043b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e062      	b.n	8004488 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d149      	bne.n	8004464 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043d8:	2200      	movs	r2, #0
 80043da:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f856 	bl	8004490 <UART_WaitOnFlagUntilTimeout>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d03c      	beq.n	8004464 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f2:	e853 3f00 	ldrex	r3, [r3]
 80043f6:	623b      	str	r3, [r7, #32]
   return(result);
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	461a      	mov	r2, r3
 8004406:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004408:	633b      	str	r3, [r7, #48]	@ 0x30
 800440a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800440e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004410:	e841 2300 	strex	r3, r2, [r1]
 8004414:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1e6      	bne.n	80043ea <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	3308      	adds	r3, #8
 8004422:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	e853 3f00 	ldrex	r3, [r3]
 800442a:	60fb      	str	r3, [r7, #12]
   return(result);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0301 	bic.w	r3, r3, #1
 8004432:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	3308      	adds	r3, #8
 800443a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800443c:	61fa      	str	r2, [r7, #28]
 800443e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004440:	69b9      	ldr	r1, [r7, #24]
 8004442:	69fa      	ldr	r2, [r7, #28]
 8004444:	e841 2300 	strex	r3, r2, [r1]
 8004448:	617b      	str	r3, [r7, #20]
   return(result);
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1e5      	bne.n	800441c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e011      	b.n	8004488 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2220      	movs	r2, #32
 8004468:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2220      	movs	r2, #32
 800446e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3758      	adds	r7, #88	@ 0x58
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	603b      	str	r3, [r7, #0]
 800449c:	4613      	mov	r3, r2
 800449e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044a0:	e04f      	b.n	8004542 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a8:	d04b      	beq.n	8004542 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044aa:	f7fc fec5 	bl	8001238 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d302      	bcc.n	80044c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e04e      	b.n	8004562 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0304 	and.w	r3, r3, #4
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d037      	beq.n	8004542 <UART_WaitOnFlagUntilTimeout+0xb2>
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2b80      	cmp	r3, #128	@ 0x80
 80044d6:	d034      	beq.n	8004542 <UART_WaitOnFlagUntilTimeout+0xb2>
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b40      	cmp	r3, #64	@ 0x40
 80044dc:	d031      	beq.n	8004542 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	f003 0308 	and.w	r3, r3, #8
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d110      	bne.n	800450e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2208      	movs	r2, #8
 80044f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 f838 	bl	800456a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2208      	movs	r2, #8
 80044fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e029      	b.n	8004562 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004518:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800451c:	d111      	bne.n	8004542 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004526:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 f81e 	bl	800456a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2220      	movs	r2, #32
 8004532:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e00f      	b.n	8004562 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	69da      	ldr	r2, [r3, #28]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	4013      	ands	r3, r2
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	429a      	cmp	r2, r3
 8004550:	bf0c      	ite	eq
 8004552:	2301      	moveq	r3, #1
 8004554:	2300      	movne	r3, #0
 8004556:	b2db      	uxtb	r3, r3
 8004558:	461a      	mov	r2, r3
 800455a:	79fb      	ldrb	r3, [r7, #7]
 800455c:	429a      	cmp	r2, r3
 800455e:	d0a0      	beq.n	80044a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800456a:	b480      	push	{r7}
 800456c:	b095      	sub	sp, #84	@ 0x54
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800457a:	e853 3f00 	ldrex	r3, [r3]
 800457e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004582:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004586:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	461a      	mov	r2, r3
 800458e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004590:	643b      	str	r3, [r7, #64]	@ 0x40
 8004592:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004596:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004598:	e841 2300 	strex	r3, r2, [r1]
 800459c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800459e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1e6      	bne.n	8004572 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3308      	adds	r3, #8
 80045aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	e853 3f00 	ldrex	r3, [r3]
 80045b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f023 0301 	bic.w	r3, r3, #1
 80045ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	3308      	adds	r3, #8
 80045c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045cc:	e841 2300 	strex	r3, r2, [r1]
 80045d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1e5      	bne.n	80045a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d118      	bne.n	8004612 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	e853 3f00 	ldrex	r3, [r3]
 80045ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f023 0310 	bic.w	r3, r3, #16
 80045f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	461a      	mov	r2, r3
 80045fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045fe:	61bb      	str	r3, [r7, #24]
 8004600:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004602:	6979      	ldr	r1, [r7, #20]
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	e841 2300 	strex	r3, r2, [r1]
 800460a:	613b      	str	r3, [r7, #16]
   return(result);
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1e6      	bne.n	80045e0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2220      	movs	r2, #32
 8004616:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004626:	bf00      	nop
 8004628:	3754      	adds	r7, #84	@ 0x54
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <memset>:
 8004632:	4402      	add	r2, r0
 8004634:	4603      	mov	r3, r0
 8004636:	4293      	cmp	r3, r2
 8004638:	d100      	bne.n	800463c <memset+0xa>
 800463a:	4770      	bx	lr
 800463c:	f803 1b01 	strb.w	r1, [r3], #1
 8004640:	e7f9      	b.n	8004636 <memset+0x4>
	...

08004644 <__libc_init_array>:
 8004644:	b570      	push	{r4, r5, r6, lr}
 8004646:	4d0d      	ldr	r5, [pc, #52]	@ (800467c <__libc_init_array+0x38>)
 8004648:	4c0d      	ldr	r4, [pc, #52]	@ (8004680 <__libc_init_array+0x3c>)
 800464a:	1b64      	subs	r4, r4, r5
 800464c:	10a4      	asrs	r4, r4, #2
 800464e:	2600      	movs	r6, #0
 8004650:	42a6      	cmp	r6, r4
 8004652:	d109      	bne.n	8004668 <__libc_init_array+0x24>
 8004654:	4d0b      	ldr	r5, [pc, #44]	@ (8004684 <__libc_init_array+0x40>)
 8004656:	4c0c      	ldr	r4, [pc, #48]	@ (8004688 <__libc_init_array+0x44>)
 8004658:	f000 f818 	bl	800468c <_init>
 800465c:	1b64      	subs	r4, r4, r5
 800465e:	10a4      	asrs	r4, r4, #2
 8004660:	2600      	movs	r6, #0
 8004662:	42a6      	cmp	r6, r4
 8004664:	d105      	bne.n	8004672 <__libc_init_array+0x2e>
 8004666:	bd70      	pop	{r4, r5, r6, pc}
 8004668:	f855 3b04 	ldr.w	r3, [r5], #4
 800466c:	4798      	blx	r3
 800466e:	3601      	adds	r6, #1
 8004670:	e7ee      	b.n	8004650 <__libc_init_array+0xc>
 8004672:	f855 3b04 	ldr.w	r3, [r5], #4
 8004676:	4798      	blx	r3
 8004678:	3601      	adds	r6, #1
 800467a:	e7f2      	b.n	8004662 <__libc_init_array+0x1e>
 800467c:	080046dc 	.word	0x080046dc
 8004680:	080046dc 	.word	0x080046dc
 8004684:	080046dc 	.word	0x080046dc
 8004688:	080046e0 	.word	0x080046e0

0800468c <_init>:
 800468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468e:	bf00      	nop
 8004690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004692:	bc08      	pop	{r3}
 8004694:	469e      	mov	lr, r3
 8004696:	4770      	bx	lr

08004698 <_fini>:
 8004698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469a:	bf00      	nop
 800469c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800469e:	bc08      	pop	{r3}
 80046a0:	469e      	mov	lr, r3
 80046a2:	4770      	bx	lr
