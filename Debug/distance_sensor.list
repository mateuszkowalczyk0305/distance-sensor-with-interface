
distance_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004530  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080046c8  080046c8  000056c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004700  08004700  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004700  08004700  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004700  08004700  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004700  08004700  00005700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004704  08004704  00005704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004708  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000108  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000114  20000114  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eba0  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002281  00000000  00000000  00014bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c60  00000000  00000000  00016e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009a8  00000000  00000000  00017ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002224b  00000000  00000000  00018468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000111a3  00000000  00000000  0003a6b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6d75  00000000  00000000  0004b856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001125cb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000340c  00000000  00000000  00112610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  00115a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080046b0 	.word	0x080046b0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080046b0 	.word	0x080046b0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	@ 0x28
 8000a18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	4b35      	ldr	r3, [pc, #212]	@ (8000b00 <MX_GPIO_Init+0xec>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	4a34      	ldr	r2, [pc, #208]	@ (8000b00 <MX_GPIO_Init+0xec>)
 8000a30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a34:	6153      	str	r3, [r2, #20]
 8000a36:	4b32      	ldr	r3, [pc, #200]	@ (8000b00 <MX_GPIO_Init+0xec>)
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a42:	4b2f      	ldr	r3, [pc, #188]	@ (8000b00 <MX_GPIO_Init+0xec>)
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	4a2e      	ldr	r2, [pc, #184]	@ (8000b00 <MX_GPIO_Init+0xec>)
 8000a48:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a4c:	6153      	str	r3, [r2, #20]
 8000a4e:	4b2c      	ldr	r3, [pc, #176]	@ (8000b00 <MX_GPIO_Init+0xec>)
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	4b29      	ldr	r3, [pc, #164]	@ (8000b00 <MX_GPIO_Init+0xec>)
 8000a5c:	695b      	ldr	r3, [r3, #20]
 8000a5e:	4a28      	ldr	r2, [pc, #160]	@ (8000b00 <MX_GPIO_Init+0xec>)
 8000a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a64:	6153      	str	r3, [r2, #20]
 8000a66:	4b26      	ldr	r3, [pc, #152]	@ (8000b00 <MX_GPIO_Init+0xec>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	4b23      	ldr	r3, [pc, #140]	@ (8000b00 <MX_GPIO_Init+0xec>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	4a22      	ldr	r2, [pc, #136]	@ (8000b00 <MX_GPIO_Init+0xec>)
 8000a78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a7c:	6153      	str	r3, [r2, #20]
 8000a7e:	4b20      	ldr	r3, [pc, #128]	@ (8000b00 <MX_GPIO_Init+0xec>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2108      	movs	r1, #8
 8000a8e:	481d      	ldr	r0, [pc, #116]	@ (8000b04 <MX_GPIO_Init+0xf0>)
 8000a90:	f000 feb0 	bl	80017f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2120      	movs	r1, #32
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a9c:	f000 feaa 	bl	80017f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aa0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aa6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4813      	ldr	r0, [pc, #76]	@ (8000b04 <MX_GPIO_Init+0xf0>)
 8000ab8:	f000 fd12 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Trig_Pin;
 8000abc:	2308      	movs	r3, #8
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480c      	ldr	r0, [pc, #48]	@ (8000b04 <MX_GPIO_Init+0xf0>)
 8000ad4:	f000 fd04 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ad8:	2320      	movs	r3, #32
 8000ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4619      	mov	r1, r3
 8000aee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af2:	f000 fcf5 	bl	80014e0 <HAL_GPIO_Init>

}
 8000af6:	bf00      	nop
 8000af8:	3728      	adds	r7, #40	@ 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40021000 	.word	0x40021000
 8000b04:	48000800 	.word	0x48000800

08000b08 <_ZN7HC_SR04C1EP17TIM_HandleTypeDef>:
uint32_t diff;
float distance;

HC_SR04* HC_SR04::instance = nullptr;

HC_SR04::HC_SR04(TIM_HandleTypeDef* _htim){
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2200      	movs	r2, #0
 8000b22:	731a      	strb	r2, [r3, #12]
	timer_echo = _htim;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	683a      	ldr	r2, [r7, #0]
 8000b28:	615a      	str	r2, [r3, #20]
	instance = this;
 8000b2a:	4a05      	ldr	r2, [pc, #20]	@ (8000b40 <_ZN7HC_SR04C1EP17TIM_HandleTypeDef+0x38>)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20000034 	.word	0x20000034

08000b44 <_ZN7HC_SR048delay_usEt>:

void HC_SR04::delay_us(uint16_t us){
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	807b      	strh	r3, [r7, #2]
	  __HAL_TIM_SET_COUNTER(timer_echo, 0);  			// reset counter
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	@ 0x24
	  while (__HAL_TIM_GET_COUNTER(timer_echo) < us);
 8000b5a:	bf00      	nop
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b64:	887b      	ldrh	r3, [r7, #2]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	bf34      	ite	cc
 8000b6a:	2301      	movcc	r3, #1
 8000b6c:	2300      	movcs	r3, #0
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d1f3      	bne.n	8000b5c <_ZN7HC_SR048delay_usEt+0x18>
};
 8000b74:	bf00      	nop
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
	...

08000b84 <_ZN7HC_SR044ReadEv>:

void HC_SR04::Read(void){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2108      	movs	r1, #8
 8000b90:	4811      	ldr	r0, [pc, #68]	@ (8000bd8 <_ZN7HC_SR044ReadEv+0x54>)
 8000b92:	f000 fe2f 	bl	80017f4 <HAL_GPIO_WritePin>
	  delay_us(2);
 8000b96:	2102      	movs	r1, #2
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff ffd3 	bl	8000b44 <_ZN7HC_SR048delay_usEt>
	  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2108      	movs	r1, #8
 8000ba2:	480d      	ldr	r0, [pc, #52]	@ (8000bd8 <_ZN7HC_SR044ReadEv+0x54>)
 8000ba4:	f000 fe26 	bl	80017f4 <HAL_GPIO_WritePin>
	  delay_us(10);
 8000ba8:	210a      	movs	r1, #10
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff ffca 	bl	8000b44 <_ZN7HC_SR048delay_usEt>
	  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2108      	movs	r1, #8
 8000bb4:	4808      	ldr	r0, [pc, #32]	@ (8000bd8 <_ZN7HC_SR044ReadEv+0x54>)
 8000bb6:	f000 fe1d 	bl	80017f4 <HAL_GPIO_WritePin>

	  __HAL_TIM_ENABLE_IT(timer_echo, TIM_IT_CC1);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	68da      	ldr	r2, [r3, #12]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f042 0202 	orr.w	r2, r2, #2
 8000bcc:	60da      	str	r2, [r3, #12]
};
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	48000800 	.word	0x48000800
 8000bdc:	00000000 	.word	0x00000000

08000be0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	7f1b      	ldrb	r3, [r3, #28]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d17a      	bne.n	8000ce6 <HAL_TIM_IC_CaptureCallback+0x106>
	  {
	    if (HC_SR04::instance->is_first_captured == 0)
 8000bf0:	4b41      	ldr	r3, [pc, #260]	@ (8000cf8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	7b1b      	ldrb	r3, [r3, #12]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d11c      	bne.n	8000c34 <HAL_TIM_IC_CaptureCallback+0x54>
	    {
	      HC_SR04::instance->ic_val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000bfa:	4b3f      	ldr	r3, [pc, #252]	@ (8000cf8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000bfc:	681c      	ldr	r4, [r3, #0]
 8000bfe:	2100      	movs	r1, #0
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f002 fde1 	bl	80037c8 <HAL_TIM_ReadCapturedValue>
 8000c06:	4603      	mov	r3, r0
 8000c08:	6063      	str	r3, [r4, #4]
	      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	6a1a      	ldr	r2, [r3, #32]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f022 020a 	bic.w	r2, r2, #10
 8000c18:	621a      	str	r2, [r3, #32]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	6a1a      	ldr	r2, [r3, #32]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f042 0202 	orr.w	r2, r2, #2
 8000c28:	621a      	str	r2, [r3, #32]
	      HC_SR04::instance->is_first_captured = 1;
 8000c2a:	4b33      	ldr	r3, [pc, #204]	@ (8000cf8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	731a      	strb	r2, [r3, #12]

	      HC_SR04::instance->distance = (diff * 0.0343) / 2;
	      HC_SR04::instance->is_first_captured = 0;
	    }
	  }
};
 8000c32:	e058      	b.n	8000ce6 <HAL_TIM_IC_CaptureCallback+0x106>
	    	HC_SR04::instance->ic_val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000c34:	4b30      	ldr	r3, [pc, #192]	@ (8000cf8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000c36:	681c      	ldr	r4, [r3, #0]
 8000c38:	2100      	movs	r1, #0
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f002 fdc4 	bl	80037c8 <HAL_TIM_ReadCapturedValue>
 8000c40:	4603      	mov	r3, r0
 8000c42:	60a3      	str	r3, [r4, #8]
	      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	6a1a      	ldr	r2, [r3, #32]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f022 020a 	bic.w	r2, r2, #10
 8000c52:	621a      	str	r2, [r3, #32]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	6a12      	ldr	r2, [r2, #32]
 8000c5e:	621a      	str	r2, [r3, #32]
	      __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000c60:	4b26      	ldr	r3, [pc, #152]	@ (8000cfc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	68da      	ldr	r2, [r3, #12]
 8000c66:	4b25      	ldr	r3, [pc, #148]	@ (8000cfc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f022 0202 	bic.w	r2, r2, #2
 8000c6e:	60da      	str	r2, [r3, #12]
	      if (ic_val2 > ic_val1)
 8000c70:	4b23      	ldr	r3, [pc, #140]	@ (8000d00 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b23      	ldr	r3, [pc, #140]	@ (8000d04 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d908      	bls.n	8000c8e <HAL_TIM_IC_CaptureCallback+0xae>
	    	  HC_SR04::instance->diff = ic_val2 - ic_val1;
 8000c7c:	4b20      	ldr	r3, [pc, #128]	@ (8000d00 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000c7e:	6819      	ldr	r1, [r3, #0]
 8000c80:	4b20      	ldr	r3, [pc, #128]	@ (8000d04 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	1a8a      	subs	r2, r1, r2
 8000c8a:	611a      	str	r2, [r3, #16]
 8000c8c:	e009      	b.n	8000ca2 <HAL_TIM_IC_CaptureCallback+0xc2>
	        diff = (0xFFFF - ic_val1) + ic_val2;
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d00 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	4b1c      	ldr	r3, [pc, #112]	@ (8000d04 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000c9c:	33ff      	adds	r3, #255	@ 0xff
 8000c9e:	4a1a      	ldr	r2, [pc, #104]	@ (8000d08 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ca0:	6013      	str	r3, [r2, #0]
	      HC_SR04::instance->distance = (diff * 0.0343) / 2;
 8000ca2:	4b19      	ldr	r3, [pc, #100]	@ (8000d08 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fbd8 	bl	800045c <__aeabi_ui2d>
 8000cac:	a310      	add	r3, pc, #64	@ (adr r3, 8000cf0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb2:	f7ff fc4d 	bl	8000550 <__aeabi_dmul>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	460b      	mov	r3, r1
 8000cba:	4610      	mov	r0, r2
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f04f 0200 	mov.w	r2, #0
 8000cc2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cc6:	f7ff fd6d 	bl	80007a4 <__aeabi_ddiv>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	460b      	mov	r3, r1
 8000cce:	490a      	ldr	r1, [pc, #40]	@ (8000cf8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000cd0:	680c      	ldr	r4, [r1, #0]
 8000cd2:	4610      	mov	r0, r2
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f7ff fe4d 	bl	8000974 <__aeabi_d2f>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	6023      	str	r3, [r4, #0]
	      HC_SR04::instance->is_first_captured = 0;
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	731a      	strb	r2, [r3, #12]
};
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd90      	pop	{r4, r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	04816f00 	.word	0x04816f00
 8000cf4:	3fa18fc5 	.word	0x3fa18fc5
 8000cf8:	20000034 	.word	0x20000034
 8000cfc:	2000003c 	.word	0x2000003c
 8000d00:	2000002c 	.word	0x2000002c
 8000d04:	20000028 	.word	0x20000028
 8000d08:	20000030 	.word	0x20000030

08000d0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d12:	f000 fa49 	bl	80011a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d16:	f000 f81f 	bl	8000d58 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1a:	f7ff fe7b 	bl	8000a14 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d1e:	f000 f9a7 	bl	8001070 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000d22:	f000 f8ff 	bl	8000f24 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HC_SR04 hc_sr04(&htim1);
 8000d26:	463b      	mov	r3, r7
 8000d28:	4909      	ldr	r1, [pc, #36]	@ (8000d50 <main+0x44>)
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff feec 	bl	8000b08 <_ZN7HC_SR04C1EP17TIM_HandleTypeDef>

  // Starting Timer (Echo Pin) in Capture Compare Mode:
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000d30:	2100      	movs	r1, #0
 8000d32:	4807      	ldr	r0, [pc, #28]	@ (8000d50 <main+0x44>)
 8000d34:	f002 fa60 	bl	80031f8 <HAL_TIM_IC_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  hc_sr04.Read();
 8000d38:	463b      	mov	r3, r7
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ff22 	bl	8000b84 <_ZN7HC_SR044ReadEv>
	  HAL_Delay(100);
 8000d40:	2064      	movs	r0, #100	@ 0x64
 8000d42:	f000 fa97 	bl	8001274 <HAL_Delay>
	  dist = hc_sr04.distance;
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	4a02      	ldr	r2, [pc, #8]	@ (8000d54 <main+0x48>)
 8000d4a:	6013      	str	r3, [r2, #0]
	  hc_sr04.Read();
 8000d4c:	bf00      	nop
 8000d4e:	e7f3      	b.n	8000d38 <main+0x2c>
 8000d50:	2000003c 	.word	0x2000003c
 8000d54:	20000038 	.word	0x20000038

08000d58 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b0a6      	sub	sp, #152	@ 0x98
 8000d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000d62:	2228      	movs	r2, #40	@ 0x28
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f003 fc75 	bl	8004656 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d6c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2258      	movs	r2, #88	@ 0x58
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f003 fc67 	bl	8004656 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d90:	2310      	movs	r3, #16
 8000d92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d96:	2302      	movs	r3, #2
 8000d98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000da0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000da4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000da8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 fd34 	bl	8001824 <HAL_RCC_OscConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	bf14      	ite	ne
 8000dc2:	2301      	movne	r3, #1
 8000dc4:	2300      	moveq	r3, #0
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
 8000dcc:	f000 f834 	bl	8000e38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd0:	230f      	movs	r3, #15
 8000dd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ddc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000de0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de2:	2300      	movs	r3, #0
 8000de4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000de6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000dea:	2102      	movs	r1, #2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f001 fd6d 	bl	80028cc <HAL_RCC_ClockConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	bf14      	ite	ne
 8000df8:	2301      	movne	r3, #1
 8000dfa:	2300      	moveq	r3, #0
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 8000e02:	f000 f819 	bl	8000e38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1;
 8000e06:	f241 0302 	movw	r3, #4098	@ 0x1002
 8000e0a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000e10:	2300      	movs	r3, #0
 8000e12:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	4618      	mov	r0, r3
 8000e18:	f001 ff78 	bl	8002d0c <HAL_RCCEx_PeriphCLKConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	bf14      	ite	ne
 8000e22:	2301      	movne	r3, #1
 8000e24:	2300      	moveq	r3, #0
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8000e2c:	f000 f804 	bl	8000e38 <Error_Handler>
  }
}
 8000e30:	bf00      	nop
 8000e32:	3798      	adds	r7, #152	@ 0x98
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e3c:	b672      	cpsid	i
}
 8000e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <Error_Handler+0x8>

08000e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6193      	str	r3, [r2, #24]
 8000e56:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e62:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	4a08      	ldr	r2, [pc, #32]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e6c:	61d3      	str	r3, [r2, #28]
 8000e6e:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e7a:	2007      	movs	r0, #7
 8000e7c:	f000 faee 	bl	800145c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40021000 	.word	0x40021000

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <NMI_Handler+0x4>

08000e94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <HardFault_Handler+0x4>

08000e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <MemManage_Handler+0x4>

08000ea4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <BusFault_Handler+0x4>

08000eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <UsageFault_Handler+0x4>

08000eb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee2:	f000 f9a7 	bl	8001234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ef0:	4802      	ldr	r0, [pc, #8]	@ (8000efc <TIM1_CC_IRQHandler+0x10>)
 8000ef2:	f002 facb 	bl	800348c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2000003c 	.word	0x2000003c

08000f00 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f04:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <SystemInit+0x20>)
 8000f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f0a:	4a05      	ldr	r2, [pc, #20]	@ (8000f20 <SystemInit+0x20>)
 8000f0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f42:	4b23      	ldr	r3, [pc, #140]	@ (8000fd0 <MX_TIM1_Init+0xac>)
 8000f44:	4a23      	ldr	r2, [pc, #140]	@ (8000fd4 <MX_TIM1_Init+0xb0>)
 8000f46:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8000f48:	4b21      	ldr	r3, [pc, #132]	@ (8000fd0 <MX_TIM1_Init+0xac>)
 8000f4a:	2254      	movs	r2, #84	@ 0x54
 8000f4c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4e:	4b20      	ldr	r3, [pc, #128]	@ (8000fd0 <MX_TIM1_Init+0xac>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f54:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd0 <MX_TIM1_Init+0xac>)
 8000f56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <MX_TIM1_Init+0xac>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f62:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd0 <MX_TIM1_Init+0xac>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f68:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <MX_TIM1_Init+0xac>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000f6e:	4818      	ldr	r0, [pc, #96]	@ (8000fd0 <MX_TIM1_Init+0xac>)
 8000f70:	f002 f8ea 	bl	8003148 <HAL_TIM_IC_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000f7a:	f7ff ff5d 	bl	8000e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480f      	ldr	r0, [pc, #60]	@ (8000fd0 <MX_TIM1_Init+0xac>)
 8000f92:	f002 fe79 	bl	8003c88 <HAL_TIMEx_MasterConfigSynchronization>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f9c:	f7ff ff4c 	bl	8000e38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4806      	ldr	r0, [pc, #24]	@ (8000fd0 <MX_TIM1_Init+0xac>)
 8000fb8:	f002 fb6a 	bl	8003690 <HAL_TIM_IC_ConfigChannel>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000fc2:	f7ff ff39 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	3720      	adds	r7, #32
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	2000003c 	.word	0x2000003c
 8000fd4:	40012c00 	.word	0x40012c00

08000fd8 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	@ 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a1b      	ldr	r2, [pc, #108]	@ (8001064 <HAL_TIM_IC_MspInit+0x8c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d12f      	bne.n	800105a <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8001068 <HAL_TIM_IC_MspInit+0x90>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	4a1a      	ldr	r2, [pc, #104]	@ (8001068 <HAL_TIM_IC_MspInit+0x90>)
 8001000:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001004:	6193      	str	r3, [r2, #24]
 8001006:	4b18      	ldr	r3, [pc, #96]	@ (8001068 <HAL_TIM_IC_MspInit+0x90>)
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001012:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <HAL_TIM_IC_MspInit+0x90>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	4a14      	ldr	r2, [pc, #80]	@ (8001068 <HAL_TIM_IC_MspInit+0x90>)
 8001018:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800101c:	6153      	str	r3, [r2, #20]
 800101e:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <HAL_TIM_IC_MspInit+0x90>)
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 800102a:	2301      	movs	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800103a:	2302      	movs	r3, #2
 800103c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	4809      	ldr	r0, [pc, #36]	@ (800106c <HAL_TIM_IC_MspInit+0x94>)
 8001046:	f000 fa4b 	bl	80014e0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	201b      	movs	r0, #27
 8001050:	f000 fa0f 	bl	8001472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001054:	201b      	movs	r0, #27
 8001056:	f000 fa28 	bl	80014aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800105a:	bf00      	nop
 800105c:	3728      	adds	r7, #40	@ 0x28
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40012c00 	.word	0x40012c00
 8001068:	40021000 	.word	0x40021000
 800106c:	48000800 	.word	0x48000800

08001070 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001074:	4b14      	ldr	r3, [pc, #80]	@ (80010c8 <MX_USART2_UART_Init+0x58>)
 8001076:	4a15      	ldr	r2, [pc, #84]	@ (80010cc <MX_USART2_UART_Init+0x5c>)
 8001078:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800107a:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <MX_USART2_UART_Init+0x58>)
 800107c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001080:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001082:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <MX_USART2_UART_Init+0x58>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001088:	4b0f      	ldr	r3, [pc, #60]	@ (80010c8 <MX_USART2_UART_Init+0x58>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800108e:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <MX_USART2_UART_Init+0x58>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001094:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <MX_USART2_UART_Init+0x58>)
 8001096:	220c      	movs	r2, #12
 8001098:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109a:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <MX_USART2_UART_Init+0x58>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a0:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <MX_USART2_UART_Init+0x58>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010a6:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <MX_USART2_UART_Init+0x58>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <MX_USART2_UART_Init+0x58>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010b2:	4805      	ldr	r0, [pc, #20]	@ (80010c8 <MX_USART2_UART_Init+0x58>)
 80010b4:	f002 fe92 	bl	8003ddc <HAL_UART_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010be:	f7ff febb 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000088 	.word	0x20000088
 80010cc:	40004400 	.word	0x40004400

080010d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	@ 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a17      	ldr	r2, [pc, #92]	@ (800114c <HAL_UART_MspInit+0x7c>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d128      	bne.n	8001144 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010f2:	4b17      	ldr	r3, [pc, #92]	@ (8001150 <HAL_UART_MspInit+0x80>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	4a16      	ldr	r2, [pc, #88]	@ (8001150 <HAL_UART_MspInit+0x80>)
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010fc:	61d3      	str	r3, [r2, #28]
 80010fe:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <HAL_UART_MspInit+0x80>)
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <HAL_UART_MspInit+0x80>)
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	4a10      	ldr	r2, [pc, #64]	@ (8001150 <HAL_UART_MspInit+0x80>)
 8001110:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001114:	6153      	str	r3, [r2, #20]
 8001116:	4b0e      	ldr	r3, [pc, #56]	@ (8001150 <HAL_UART_MspInit+0x80>)
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001122:	230c      	movs	r3, #12
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001132:	2307      	movs	r3, #7
 8001134:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001140:	f000 f9ce 	bl	80014e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001144:	bf00      	nop
 8001146:	3728      	adds	r7, #40	@ 0x28
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40004400 	.word	0x40004400
 8001150:	40021000 	.word	0x40021000

08001154 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001154:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800118c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001158:	f7ff fed2 	bl	8000f00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800115c:	480c      	ldr	r0, [pc, #48]	@ (8001190 <LoopForever+0x6>)
  ldr r1, =_edata
 800115e:	490d      	ldr	r1, [pc, #52]	@ (8001194 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001160:	4a0d      	ldr	r2, [pc, #52]	@ (8001198 <LoopForever+0xe>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001164:	e002      	b.n	800116c <LoopCopyDataInit>

08001166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116a:	3304      	adds	r3, #4

0800116c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800116c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001170:	d3f9      	bcc.n	8001166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001172:	4a0a      	ldr	r2, [pc, #40]	@ (800119c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001174:	4c0a      	ldr	r4, [pc, #40]	@ (80011a0 <LoopForever+0x16>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001178:	e001      	b.n	800117e <LoopFillZerobss>

0800117a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800117c:	3204      	adds	r2, #4

0800117e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001180:	d3fb      	bcc.n	800117a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001182:	f003 fa71 	bl	8004668 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001186:	f7ff fdc1 	bl	8000d0c <main>

0800118a <LoopForever>:

LoopForever:
    b LoopForever
 800118a:	e7fe      	b.n	800118a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800118c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001194:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001198:	08004708 	.word	0x08004708
  ldr r2, =_sbss
 800119c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011a0:	20000114 	.word	0x20000114

080011a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011a4:	e7fe      	b.n	80011a4 <ADC1_2_IRQHandler>
	...

080011a8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ac:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <HAL_Init+0x28>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a07      	ldr	r2, [pc, #28]	@ (80011d0 <HAL_Init+0x28>)
 80011b2:	f043 0310 	orr.w	r3, r3, #16
 80011b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b8:	2003      	movs	r0, #3
 80011ba:	f000 f94f 	bl	800145c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011be:	2000      	movs	r0, #0
 80011c0:	f000 f808 	bl	80011d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c4:	f7ff fe3e 	bl	8000e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40022000 	.word	0x40022000

080011d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011dc:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <HAL_InitTick+0x54>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b12      	ldr	r3, [pc, #72]	@ (800122c <HAL_InitTick+0x58>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4619      	mov	r1, r3
 80011e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f967 	bl	80014c6 <HAL_SYSTICK_Config>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e00e      	b.n	8001220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b0f      	cmp	r3, #15
 8001206:	d80a      	bhi.n	800121e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001208:	2200      	movs	r2, #0
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f000 f92f 	bl	8001472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001214:	4a06      	ldr	r2, [pc, #24]	@ (8001230 <HAL_InitTick+0x5c>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	e000      	b.n	8001220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000000 	.word	0x20000000
 800122c:	20000008 	.word	0x20000008
 8001230:	20000004 	.word	0x20000004

08001234 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001238:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <HAL_IncTick+0x20>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <HAL_IncTick+0x24>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4413      	add	r3, r2
 8001244:	4a04      	ldr	r2, [pc, #16]	@ (8001258 <HAL_IncTick+0x24>)
 8001246:	6013      	str	r3, [r2, #0]
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000008 	.word	0x20000008
 8001258:	20000110 	.word	0x20000110

0800125c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001260:	4b03      	ldr	r3, [pc, #12]	@ (8001270 <HAL_GetTick+0x14>)
 8001262:	681b      	ldr	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000110 	.word	0x20000110

08001274 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800127c:	f7ff ffee 	bl	800125c <HAL_GetTick>
 8001280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800128c:	d005      	beq.n	800129a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800128e:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <HAL_Delay+0x44>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800129a:	bf00      	nop
 800129c:	f7ff ffde 	bl	800125c <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d8f7      	bhi.n	800129c <HAL_Delay+0x28>
  {
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000008 	.word	0x20000008

080012bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012d8:	4013      	ands	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ee:	4a04      	ldr	r2, [pc, #16]	@ (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	60d3      	str	r3, [r2, #12]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001308:	4b04      	ldr	r3, [pc, #16]	@ (800131c <__NVIC_GetPriorityGrouping+0x18>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	f003 0307 	and.w	r3, r3, #7
}
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	2b00      	cmp	r3, #0
 8001330:	db0b      	blt.n	800134a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	f003 021f 	and.w	r2, r3, #31
 8001338:	4907      	ldr	r1, [pc, #28]	@ (8001358 <__NVIC_EnableIRQ+0x38>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	095b      	lsrs	r3, r3, #5
 8001340:	2001      	movs	r0, #1
 8001342:	fa00 f202 	lsl.w	r2, r0, r2
 8001346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000e100 	.word	0xe000e100

0800135c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	6039      	str	r1, [r7, #0]
 8001366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	2b00      	cmp	r3, #0
 800136e:	db0a      	blt.n	8001386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	490c      	ldr	r1, [pc, #48]	@ (80013a8 <__NVIC_SetPriority+0x4c>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	0112      	lsls	r2, r2, #4
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	440b      	add	r3, r1
 8001380:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001384:	e00a      	b.n	800139c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4908      	ldr	r1, [pc, #32]	@ (80013ac <__NVIC_SetPriority+0x50>)
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	3b04      	subs	r3, #4
 8001394:	0112      	lsls	r2, r2, #4
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	440b      	add	r3, r1
 800139a:	761a      	strb	r2, [r3, #24]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000e100 	.word	0xe000e100
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	@ 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f1c3 0307 	rsb	r3, r3, #7
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	bf28      	it	cs
 80013ce:	2304      	movcs	r3, #4
 80013d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3304      	adds	r3, #4
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d902      	bls.n	80013e0 <NVIC_EncodePriority+0x30>
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3b03      	subs	r3, #3
 80013de:	e000      	b.n	80013e2 <NVIC_EncodePriority+0x32>
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	f04f 32ff 	mov.w	r2, #4294967295
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43da      	mvns	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	401a      	ands	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f8:	f04f 31ff 	mov.w	r1, #4294967295
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	43d9      	mvns	r1, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	4313      	orrs	r3, r2
         );
}
 800140a:	4618      	mov	r0, r3
 800140c:	3724      	adds	r7, #36	@ 0x24
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001428:	d301      	bcc.n	800142e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142a:	2301      	movs	r3, #1
 800142c:	e00f      	b.n	800144e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142e:	4a0a      	ldr	r2, [pc, #40]	@ (8001458 <SysTick_Config+0x40>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001436:	210f      	movs	r1, #15
 8001438:	f04f 30ff 	mov.w	r0, #4294967295
 800143c:	f7ff ff8e 	bl	800135c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001440:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <SysTick_Config+0x40>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001446:	4b04      	ldr	r3, [pc, #16]	@ (8001458 <SysTick_Config+0x40>)
 8001448:	2207      	movs	r2, #7
 800144a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	e000e010 	.word	0xe000e010

0800145c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ff29 	bl	80012bc <__NVIC_SetPriorityGrouping>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b086      	sub	sp, #24
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607a      	str	r2, [r7, #4]
 800147e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001484:	f7ff ff3e 	bl	8001304 <__NVIC_GetPriorityGrouping>
 8001488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	68b9      	ldr	r1, [r7, #8]
 800148e:	6978      	ldr	r0, [r7, #20]
 8001490:	f7ff ff8e 	bl	80013b0 <NVIC_EncodePriority>
 8001494:	4602      	mov	r2, r0
 8001496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149a:	4611      	mov	r1, r2
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff5d 	bl	800135c <__NVIC_SetPriority>
}
 80014a2:	bf00      	nop
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff31 	bl	8001320 <__NVIC_EnableIRQ>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff ffa2 	bl	8001418 <SysTick_Config>
 80014d4:	4603      	mov	r3, r0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b087      	sub	sp, #28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ee:	e160      	b.n	80017b2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	2101      	movs	r1, #1
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	fa01 f303 	lsl.w	r3, r1, r3
 80014fc:	4013      	ands	r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 8152 	beq.w	80017ac <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b01      	cmp	r3, #1
 8001512:	d005      	beq.n	8001520 <HAL_GPIO_Init+0x40>
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d130      	bne.n	8001582 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	2203      	movs	r2, #3
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	68da      	ldr	r2, [r3, #12]
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4313      	orrs	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001556:	2201      	movs	r2, #1
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	091b      	lsrs	r3, r3, #4
 800156c:	f003 0201 	and.w	r2, r3, #1
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	2b03      	cmp	r3, #3
 800158c:	d017      	beq.n	80015be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	2203      	movs	r2, #3
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4013      	ands	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d123      	bne.n	8001612 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	08da      	lsrs	r2, r3, #3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3208      	adds	r2, #8
 80015d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	220f      	movs	r2, #15
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	4013      	ands	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	691a      	ldr	r2, [r3, #16]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	08da      	lsrs	r2, r3, #3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3208      	adds	r2, #8
 800160c:	6939      	ldr	r1, [r7, #16]
 800160e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	2203      	movs	r2, #3
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 0203 	and.w	r2, r3, #3
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 80ac 	beq.w	80017ac <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001654:	4b5e      	ldr	r3, [pc, #376]	@ (80017d0 <HAL_GPIO_Init+0x2f0>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4a5d      	ldr	r2, [pc, #372]	@ (80017d0 <HAL_GPIO_Init+0x2f0>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6193      	str	r3, [r2, #24]
 8001660:	4b5b      	ldr	r3, [pc, #364]	@ (80017d0 <HAL_GPIO_Init+0x2f0>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800166c:	4a59      	ldr	r2, [pc, #356]	@ (80017d4 <HAL_GPIO_Init+0x2f4>)
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	089b      	lsrs	r3, r3, #2
 8001672:	3302      	adds	r3, #2
 8001674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001678:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	220f      	movs	r2, #15
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001696:	d025      	beq.n	80016e4 <HAL_GPIO_Init+0x204>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a4f      	ldr	r2, [pc, #316]	@ (80017d8 <HAL_GPIO_Init+0x2f8>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d01f      	beq.n	80016e0 <HAL_GPIO_Init+0x200>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a4e      	ldr	r2, [pc, #312]	@ (80017dc <HAL_GPIO_Init+0x2fc>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d019      	beq.n	80016dc <HAL_GPIO_Init+0x1fc>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a4d      	ldr	r2, [pc, #308]	@ (80017e0 <HAL_GPIO_Init+0x300>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d013      	beq.n	80016d8 <HAL_GPIO_Init+0x1f8>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a4c      	ldr	r2, [pc, #304]	@ (80017e4 <HAL_GPIO_Init+0x304>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d00d      	beq.n	80016d4 <HAL_GPIO_Init+0x1f4>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a4b      	ldr	r2, [pc, #300]	@ (80017e8 <HAL_GPIO_Init+0x308>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d007      	beq.n	80016d0 <HAL_GPIO_Init+0x1f0>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a4a      	ldr	r2, [pc, #296]	@ (80017ec <HAL_GPIO_Init+0x30c>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d101      	bne.n	80016cc <HAL_GPIO_Init+0x1ec>
 80016c8:	2306      	movs	r3, #6
 80016ca:	e00c      	b.n	80016e6 <HAL_GPIO_Init+0x206>
 80016cc:	2307      	movs	r3, #7
 80016ce:	e00a      	b.n	80016e6 <HAL_GPIO_Init+0x206>
 80016d0:	2305      	movs	r3, #5
 80016d2:	e008      	b.n	80016e6 <HAL_GPIO_Init+0x206>
 80016d4:	2304      	movs	r3, #4
 80016d6:	e006      	b.n	80016e6 <HAL_GPIO_Init+0x206>
 80016d8:	2303      	movs	r3, #3
 80016da:	e004      	b.n	80016e6 <HAL_GPIO_Init+0x206>
 80016dc:	2302      	movs	r3, #2
 80016de:	e002      	b.n	80016e6 <HAL_GPIO_Init+0x206>
 80016e0:	2301      	movs	r3, #1
 80016e2:	e000      	b.n	80016e6 <HAL_GPIO_Init+0x206>
 80016e4:	2300      	movs	r3, #0
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	f002 0203 	and.w	r2, r2, #3
 80016ec:	0092      	lsls	r2, r2, #2
 80016ee:	4093      	lsls	r3, r2
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016f6:	4937      	ldr	r1, [pc, #220]	@ (80017d4 <HAL_GPIO_Init+0x2f4>)
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	089b      	lsrs	r3, r3, #2
 80016fc:	3302      	adds	r3, #2
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001704:	4b3a      	ldr	r3, [pc, #232]	@ (80017f0 <HAL_GPIO_Init+0x310>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	43db      	mvns	r3, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001728:	4a31      	ldr	r2, [pc, #196]	@ (80017f0 <HAL_GPIO_Init+0x310>)
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800172e:	4b30      	ldr	r3, [pc, #192]	@ (80017f0 <HAL_GPIO_Init+0x310>)
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	43db      	mvns	r3, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001752:	4a27      	ldr	r2, [pc, #156]	@ (80017f0 <HAL_GPIO_Init+0x310>)
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001758:	4b25      	ldr	r3, [pc, #148]	@ (80017f0 <HAL_GPIO_Init+0x310>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	43db      	mvns	r3, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800177c:	4a1c      	ldr	r2, [pc, #112]	@ (80017f0 <HAL_GPIO_Init+0x310>)
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001782:	4b1b      	ldr	r3, [pc, #108]	@ (80017f0 <HAL_GPIO_Init+0x310>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	43db      	mvns	r3, r3
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	4013      	ands	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017a6:	4a12      	ldr	r2, [pc, #72]	@ (80017f0 <HAL_GPIO_Init+0x310>)
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	3301      	adds	r3, #1
 80017b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	fa22 f303 	lsr.w	r3, r2, r3
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f47f ae97 	bne.w	80014f0 <HAL_GPIO_Init+0x10>
  }
}
 80017c2:	bf00      	nop
 80017c4:	bf00      	nop
 80017c6:	371c      	adds	r7, #28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40010000 	.word	0x40010000
 80017d8:	48000400 	.word	0x48000400
 80017dc:	48000800 	.word	0x48000800
 80017e0:	48000c00 	.word	0x48000c00
 80017e4:	48001000 	.word	0x48001000
 80017e8:	48001400 	.word	0x48001400
 80017ec:	48001800 	.word	0x48001800
 80017f0:	40010400 	.word	0x40010400

080017f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	807b      	strh	r3, [r7, #2]
 8001800:	4613      	mov	r3, r2
 8001802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001804:	787b      	ldrb	r3, [r7, #1]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800180a:	887a      	ldrh	r2, [r7, #2]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001810:	e002      	b.n	8001818 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001812:	887a      	ldrh	r2, [r7, #2]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800182a:	af00      	add	r7, sp, #0
 800182c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001830:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001834:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001836:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800183a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d102      	bne.n	800184a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	f001 b83a 	b.w	80028be <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800184a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800184e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 816f 	beq.w	8001b3e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001860:	4bb5      	ldr	r3, [pc, #724]	@ (8001b38 <HAL_RCC_OscConfig+0x314>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 030c 	and.w	r3, r3, #12
 8001868:	2b04      	cmp	r3, #4
 800186a:	d00c      	beq.n	8001886 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800186c:	4bb2      	ldr	r3, [pc, #712]	@ (8001b38 <HAL_RCC_OscConfig+0x314>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 030c 	and.w	r3, r3, #12
 8001874:	2b08      	cmp	r3, #8
 8001876:	d15c      	bne.n	8001932 <HAL_RCC_OscConfig+0x10e>
 8001878:	4baf      	ldr	r3, [pc, #700]	@ (8001b38 <HAL_RCC_OscConfig+0x314>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001884:	d155      	bne.n	8001932 <HAL_RCC_OscConfig+0x10e>
 8001886:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800188a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001892:	fa93 f3a3 	rbit	r3, r3
 8001896:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800189a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189e:	fab3 f383 	clz	r3, r3
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	095b      	lsrs	r3, r3, #5
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d102      	bne.n	80018b8 <HAL_RCC_OscConfig+0x94>
 80018b2:	4ba1      	ldr	r3, [pc, #644]	@ (8001b38 <HAL_RCC_OscConfig+0x314>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	e015      	b.n	80018e4 <HAL_RCC_OscConfig+0xc0>
 80018b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018bc:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80018c4:	fa93 f3a3 	rbit	r3, r3
 80018c8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80018cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018d0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80018d4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80018d8:	fa93 f3a3 	rbit	r3, r3
 80018dc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80018e0:	4b95      	ldr	r3, [pc, #596]	@ (8001b38 <HAL_RCC_OscConfig+0x314>)
 80018e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018e8:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80018ec:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80018f0:	fa92 f2a2 	rbit	r2, r2
 80018f4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80018f8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80018fc:	fab2 f282 	clz	r2, r2
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	f042 0220 	orr.w	r2, r2, #32
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	f002 021f 	and.w	r2, r2, #31
 800190c:	2101      	movs	r1, #1
 800190e:	fa01 f202 	lsl.w	r2, r1, r2
 8001912:	4013      	ands	r3, r2
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 8111 	beq.w	8001b3c <HAL_RCC_OscConfig+0x318>
 800191a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800191e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f040 8108 	bne.w	8001b3c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	f000 bfc6 	b.w	80028be <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001932:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001936:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001942:	d106      	bne.n	8001952 <HAL_RCC_OscConfig+0x12e>
 8001944:	4b7c      	ldr	r3, [pc, #496]	@ (8001b38 <HAL_RCC_OscConfig+0x314>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a7b      	ldr	r2, [pc, #492]	@ (8001b38 <HAL_RCC_OscConfig+0x314>)
 800194a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	e036      	b.n	80019c0 <HAL_RCC_OscConfig+0x19c>
 8001952:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001956:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10c      	bne.n	800197c <HAL_RCC_OscConfig+0x158>
 8001962:	4b75      	ldr	r3, [pc, #468]	@ (8001b38 <HAL_RCC_OscConfig+0x314>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a74      	ldr	r2, [pc, #464]	@ (8001b38 <HAL_RCC_OscConfig+0x314>)
 8001968:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	4b72      	ldr	r3, [pc, #456]	@ (8001b38 <HAL_RCC_OscConfig+0x314>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a71      	ldr	r2, [pc, #452]	@ (8001b38 <HAL_RCC_OscConfig+0x314>)
 8001974:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	e021      	b.n	80019c0 <HAL_RCC_OscConfig+0x19c>
 800197c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001980:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800198c:	d10c      	bne.n	80019a8 <HAL_RCC_OscConfig+0x184>
 800198e:	4b6a      	ldr	r3, [pc, #424]	@ (8001b38 <HAL_RCC_OscConfig+0x314>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a69      	ldr	r2, [pc, #420]	@ (8001b38 <HAL_RCC_OscConfig+0x314>)
 8001994:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	4b67      	ldr	r3, [pc, #412]	@ (8001b38 <HAL_RCC_OscConfig+0x314>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a66      	ldr	r2, [pc, #408]	@ (8001b38 <HAL_RCC_OscConfig+0x314>)
 80019a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	e00b      	b.n	80019c0 <HAL_RCC_OscConfig+0x19c>
 80019a8:	4b63      	ldr	r3, [pc, #396]	@ (8001b38 <HAL_RCC_OscConfig+0x314>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a62      	ldr	r2, [pc, #392]	@ (8001b38 <HAL_RCC_OscConfig+0x314>)
 80019ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	4b60      	ldr	r3, [pc, #384]	@ (8001b38 <HAL_RCC_OscConfig+0x314>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a5f      	ldr	r2, [pc, #380]	@ (8001b38 <HAL_RCC_OscConfig+0x314>)
 80019ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019be:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d059      	beq.n	8001a84 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7ff fc44 	bl	800125c <HAL_GetTick>
 80019d4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d8:	e00a      	b.n	80019f0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019da:	f7ff fc3f 	bl	800125c <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b64      	cmp	r3, #100	@ 0x64
 80019e8:	d902      	bls.n	80019f0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	f000 bf67 	b.w	80028be <HAL_RCC_OscConfig+0x109a>
 80019f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019f4:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80019fc:	fa93 f3a3 	rbit	r3, r3
 8001a00:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001a04:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a08:	fab3 f383 	clz	r3, r3
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	095b      	lsrs	r3, r3, #5
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d102      	bne.n	8001a22 <HAL_RCC_OscConfig+0x1fe>
 8001a1c:	4b46      	ldr	r3, [pc, #280]	@ (8001b38 <HAL_RCC_OscConfig+0x314>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	e015      	b.n	8001a4e <HAL_RCC_OscConfig+0x22a>
 8001a22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a26:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001a2e:	fa93 f3a3 	rbit	r3, r3
 8001a32:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001a36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a3a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001a3e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001a42:	fa93 f3a3 	rbit	r3, r3
 8001a46:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b38 <HAL_RCC_OscConfig+0x314>)
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a52:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001a56:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001a5a:	fa92 f2a2 	rbit	r2, r2
 8001a5e:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001a62:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001a66:	fab2 f282 	clz	r2, r2
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	f042 0220 	orr.w	r2, r2, #32
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	f002 021f 	and.w	r2, r2, #31
 8001a76:	2101      	movs	r1, #1
 8001a78:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0ab      	beq.n	80019da <HAL_RCC_OscConfig+0x1b6>
 8001a82:	e05c      	b.n	8001b3e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a84:	f7ff fbea 	bl	800125c <HAL_GetTick>
 8001a88:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8c:	e00a      	b.n	8001aa4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a8e:	f7ff fbe5 	bl	800125c <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b64      	cmp	r3, #100	@ 0x64
 8001a9c:	d902      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	f000 bf0d 	b.w	80028be <HAL_RCC_OscConfig+0x109a>
 8001aa4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aa8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001ab0:	fa93 f3a3 	rbit	r3, r3
 8001ab4:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001ab8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001abc:	fab3 f383 	clz	r3, r3
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	095b      	lsrs	r3, r3, #5
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d102      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x2b2>
 8001ad0:	4b19      	ldr	r3, [pc, #100]	@ (8001b38 <HAL_RCC_OscConfig+0x314>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	e015      	b.n	8001b02 <HAL_RCC_OscConfig+0x2de>
 8001ad6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ada:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ade:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001ae2:	fa93 f3a3 	rbit	r3, r3
 8001ae6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001aea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aee:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001af2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001af6:	fa93 f3a3 	rbit	r3, r3
 8001afa:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001afe:	4b0e      	ldr	r3, [pc, #56]	@ (8001b38 <HAL_RCC_OscConfig+0x314>)
 8001b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b02:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b06:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001b0a:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001b0e:	fa92 f2a2 	rbit	r2, r2
 8001b12:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001b16:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001b1a:	fab2 f282 	clz	r2, r2
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	f042 0220 	orr.w	r2, r2, #32
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	f002 021f 	and.w	r2, r2, #31
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1ab      	bne.n	8001a8e <HAL_RCC_OscConfig+0x26a>
 8001b36:	e002      	b.n	8001b3e <HAL_RCC_OscConfig+0x31a>
 8001b38:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b42:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 817f 	beq.w	8001e52 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b54:	4ba7      	ldr	r3, [pc, #668]	@ (8001df4 <HAL_RCC_OscConfig+0x5d0>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 030c 	and.w	r3, r3, #12
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00c      	beq.n	8001b7a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b60:	4ba4      	ldr	r3, [pc, #656]	@ (8001df4 <HAL_RCC_OscConfig+0x5d0>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 030c 	and.w	r3, r3, #12
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d173      	bne.n	8001c54 <HAL_RCC_OscConfig+0x430>
 8001b6c:	4ba1      	ldr	r3, [pc, #644]	@ (8001df4 <HAL_RCC_OscConfig+0x5d0>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001b74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b78:	d16c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x430>
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001b84:	fa93 f3a3 	rbit	r3, r3
 8001b88:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001b8c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b90:	fab3 f383 	clz	r3, r3
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	095b      	lsrs	r3, r3, #5
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d102      	bne.n	8001baa <HAL_RCC_OscConfig+0x386>
 8001ba4:	4b93      	ldr	r3, [pc, #588]	@ (8001df4 <HAL_RCC_OscConfig+0x5d0>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	e013      	b.n	8001bd2 <HAL_RCC_OscConfig+0x3ae>
 8001baa:	2302      	movs	r3, #2
 8001bac:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001bb4:	fa93 f3a3 	rbit	r3, r3
 8001bb8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001bc2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001bc6:	fa93 f3a3 	rbit	r3, r3
 8001bca:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001bce:	4b89      	ldr	r3, [pc, #548]	@ (8001df4 <HAL_RCC_OscConfig+0x5d0>)
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001bd8:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001bdc:	fa92 f2a2 	rbit	r2, r2
 8001be0:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001be4:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001be8:	fab2 f282 	clz	r2, r2
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	f042 0220 	orr.w	r2, r2, #32
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	f002 021f 	and.w	r2, r2, #31
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00a      	beq.n	8001c1a <HAL_RCC_OscConfig+0x3f6>
 8001c04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c08:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d002      	beq.n	8001c1a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	f000 be52 	b.w	80028be <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1a:	4b76      	ldr	r3, [pc, #472]	@ (8001df4 <HAL_RCC_OscConfig+0x5d0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c26:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	21f8      	movs	r1, #248	@ 0xf8
 8001c30:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001c38:	fa91 f1a1 	rbit	r1, r1
 8001c3c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001c40:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001c44:	fab1 f181 	clz	r1, r1
 8001c48:	b2c9      	uxtb	r1, r1
 8001c4a:	408b      	lsls	r3, r1
 8001c4c:	4969      	ldr	r1, [pc, #420]	@ (8001df4 <HAL_RCC_OscConfig+0x5d0>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c52:	e0fe      	b.n	8001e52 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 8088 	beq.w	8001d76 <HAL_RCC_OscConfig+0x552>
 8001c66:	2301      	movs	r3, #1
 8001c68:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001c70:	fa93 f3a3 	rbit	r3, r3
 8001c74:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001c78:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c7c:	fab3 f383 	clz	r3, r3
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c86:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	2301      	movs	r3, #1
 8001c90:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c92:	f7ff fae3 	bl	800125c <HAL_GetTick>
 8001c96:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9a:	e00a      	b.n	8001cb2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c9c:	f7ff fade 	bl	800125c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d902      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	f000 be06 	b.w	80028be <HAL_RCC_OscConfig+0x109a>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001cbc:	fa93 f3a3 	rbit	r3, r3
 8001cc0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001cc4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc8:	fab3 f383 	clz	r3, r3
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	095b      	lsrs	r3, r3, #5
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d102      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x4be>
 8001cdc:	4b45      	ldr	r3, [pc, #276]	@ (8001df4 <HAL_RCC_OscConfig+0x5d0>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	e013      	b.n	8001d0a <HAL_RCC_OscConfig+0x4e6>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001cfa:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001cfe:	fa93 f3a3 	rbit	r3, r3
 8001d02:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001d06:	4b3b      	ldr	r3, [pc, #236]	@ (8001df4 <HAL_RCC_OscConfig+0x5d0>)
 8001d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001d10:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001d14:	fa92 f2a2 	rbit	r2, r2
 8001d18:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001d1c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001d20:	fab2 f282 	clz	r2, r2
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	f042 0220 	orr.w	r2, r2, #32
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	f002 021f 	and.w	r2, r2, #31
 8001d30:	2101      	movs	r1, #1
 8001d32:	fa01 f202 	lsl.w	r2, r1, r2
 8001d36:	4013      	ands	r3, r2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0af      	beq.n	8001c9c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001df4 <HAL_RCC_OscConfig+0x5d0>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d48:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	21f8      	movs	r1, #248	@ 0xf8
 8001d52:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001d5a:	fa91 f1a1 	rbit	r1, r1
 8001d5e:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001d62:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001d66:	fab1 f181 	clz	r1, r1
 8001d6a:	b2c9      	uxtb	r1, r1
 8001d6c:	408b      	lsls	r3, r1
 8001d6e:	4921      	ldr	r1, [pc, #132]	@ (8001df4 <HAL_RCC_OscConfig+0x5d0>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	600b      	str	r3, [r1, #0]
 8001d74:	e06d      	b.n	8001e52 <HAL_RCC_OscConfig+0x62e>
 8001d76:	2301      	movs	r3, #1
 8001d78:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001d80:	fa93 f3a3 	rbit	r3, r3
 8001d84:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001d88:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d8c:	fab3 f383 	clz	r3, r3
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d96:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	2300      	movs	r3, #0
 8001da0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da2:	f7ff fa5b 	bl	800125c <HAL_GetTick>
 8001da6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001daa:	e00a      	b.n	8001dc2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dac:	f7ff fa56 	bl	800125c <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d902      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	f000 bd7e 	b.w	80028be <HAL_RCC_OscConfig+0x109a>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001dcc:	fa93 f3a3 	rbit	r3, r3
 8001dd0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001dd4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd8:	fab3 f383 	clz	r3, r3
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	095b      	lsrs	r3, r3, #5
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d105      	bne.n	8001df8 <HAL_RCC_OscConfig+0x5d4>
 8001dec:	4b01      	ldr	r3, [pc, #4]	@ (8001df4 <HAL_RCC_OscConfig+0x5d0>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	e016      	b.n	8001e20 <HAL_RCC_OscConfig+0x5fc>
 8001df2:	bf00      	nop
 8001df4:	40021000 	.word	0x40021000
 8001df8:	2302      	movs	r3, #2
 8001dfa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001e10:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001e14:	fa93 f3a3 	rbit	r3, r3
 8001e18:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001e1c:	4bbf      	ldr	r3, [pc, #764]	@ (800211c <HAL_RCC_OscConfig+0x8f8>)
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e20:	2202      	movs	r2, #2
 8001e22:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001e26:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001e2a:	fa92 f2a2 	rbit	r2, r2
 8001e2e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001e32:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001e36:	fab2 f282 	clz	r2, r2
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	f042 0220 	orr.w	r2, r2, #32
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	f002 021f 	and.w	r2, r2, #31
 8001e46:	2101      	movs	r1, #1
 8001e48:	fa01 f202 	lsl.w	r2, r1, r2
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1ac      	bne.n	8001dac <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e56:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8113 	beq.w	800208e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e6c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d07c      	beq.n	8001f72 <HAL_RCC_OscConfig+0x74e>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001e82:	fa93 f3a3 	rbit	r3, r3
 8001e86:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001e8a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e8e:	fab3 f383 	clz	r3, r3
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	461a      	mov	r2, r3
 8001e96:	4ba2      	ldr	r3, [pc, #648]	@ (8002120 <HAL_RCC_OscConfig+0x8fc>)
 8001e98:	4413      	add	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea2:	f7ff f9db 	bl	800125c <HAL_GetTick>
 8001ea6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eaa:	e00a      	b.n	8001ec2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eac:	f7ff f9d6 	bl	800125c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d902      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	f000 bcfe 	b.w	80028be <HAL_RCC_OscConfig+0x109a>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001ecc:	fa93 f2a3 	rbit	r2, r3
 8001ed0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ed4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ede:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	fa93 f2a3 	rbit	r2, r3
 8001ef4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f02:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f06:	2202      	movs	r2, #2
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f0e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	fa93 f2a3 	rbit	r2, r3
 8001f18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f1c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001f20:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f22:	4b7e      	ldr	r3, [pc, #504]	@ (800211c <HAL_RCC_OscConfig+0x8f8>)
 8001f24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f2a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f2e:	2102      	movs	r1, #2
 8001f30:	6019      	str	r1, [r3, #0]
 8001f32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f36:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	fa93 f1a3 	rbit	r1, r3
 8001f40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f44:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001f48:	6019      	str	r1, [r3, #0]
  return result;
 8001f4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f4e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	fab3 f383 	clz	r3, r3
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	f003 031f 	and.w	r3, r3, #31
 8001f64:	2101      	movs	r1, #1
 8001f66:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d09d      	beq.n	8001eac <HAL_RCC_OscConfig+0x688>
 8001f70:	e08d      	b.n	800208e <HAL_RCC_OscConfig+0x86a>
 8001f72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f76:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f82:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	fa93 f2a3 	rbit	r2, r3
 8001f8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f90:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001f94:	601a      	str	r2, [r3, #0]
  return result;
 8001f96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f9a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001f9e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa0:	fab3 f383 	clz	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4b5d      	ldr	r3, [pc, #372]	@ (8002120 <HAL_RCC_OscConfig+0x8fc>)
 8001faa:	4413      	add	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	461a      	mov	r2, r3
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb4:	f7ff f952 	bl	800125c <HAL_GetTick>
 8001fb8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fbc:	e00a      	b.n	8001fd4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fbe:	f7ff f94d 	bl	800125c <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d902      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	f000 bc75 	b.w	80028be <HAL_RCC_OscConfig+0x109a>
 8001fd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fd8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001fdc:	2202      	movs	r2, #2
 8001fde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fe4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	fa93 f2a3 	rbit	r2, r3
 8001fee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ff2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ffc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002000:	2202      	movs	r2, #2
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002008:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	fa93 f2a3 	rbit	r2, r3
 8002012:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002016:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002020:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002024:	2202      	movs	r2, #2
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800202c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	fa93 f2a3 	rbit	r2, r3
 8002036:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800203a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800203e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002040:	4b36      	ldr	r3, [pc, #216]	@ (800211c <HAL_RCC_OscConfig+0x8f8>)
 8002042:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002044:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002048:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800204c:	2102      	movs	r1, #2
 800204e:	6019      	str	r1, [r3, #0]
 8002050:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002054:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	fa93 f1a3 	rbit	r1, r3
 800205e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002062:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002066:	6019      	str	r1, [r3, #0]
  return result;
 8002068:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800206c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	fab3 f383 	clz	r3, r3
 8002076:	b2db      	uxtb	r3, r3
 8002078:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800207c:	b2db      	uxtb	r3, r3
 800207e:	f003 031f 	and.w	r3, r3, #31
 8002082:	2101      	movs	r1, #1
 8002084:	fa01 f303 	lsl.w	r3, r1, r3
 8002088:	4013      	ands	r3, r2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d197      	bne.n	8001fbe <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800208e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002092:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 81a5 	beq.w	80023ee <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020aa:	4b1c      	ldr	r3, [pc, #112]	@ (800211c <HAL_RCC_OscConfig+0x8f8>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d116      	bne.n	80020e4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b6:	4b19      	ldr	r3, [pc, #100]	@ (800211c <HAL_RCC_OscConfig+0x8f8>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	4a18      	ldr	r2, [pc, #96]	@ (800211c <HAL_RCC_OscConfig+0x8f8>)
 80020bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020c0:	61d3      	str	r3, [r2, #28]
 80020c2:	4b16      	ldr	r3, [pc, #88]	@ (800211c <HAL_RCC_OscConfig+0x8f8>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80020ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020dc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80020de:	2301      	movs	r3, #1
 80020e0:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002124 <HAL_RCC_OscConfig+0x900>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d121      	bne.n	8002134 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002124 <HAL_RCC_OscConfig+0x900>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a0b      	ldr	r2, [pc, #44]	@ (8002124 <HAL_RCC_OscConfig+0x900>)
 80020f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020fa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020fc:	f7ff f8ae 	bl	800125c <HAL_GetTick>
 8002100:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002104:	e010      	b.n	8002128 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002106:	f7ff f8a9 	bl	800125c <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b64      	cmp	r3, #100	@ 0x64
 8002114:	d908      	bls.n	8002128 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e3d1      	b.n	80028be <HAL_RCC_OscConfig+0x109a>
 800211a:	bf00      	nop
 800211c:	40021000 	.word	0x40021000
 8002120:	10908120 	.word	0x10908120
 8002124:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002128:	4b8d      	ldr	r3, [pc, #564]	@ (8002360 <HAL_RCC_OscConfig+0xb3c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0e8      	beq.n	8002106 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002134:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002138:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d106      	bne.n	8002152 <HAL_RCC_OscConfig+0x92e>
 8002144:	4b87      	ldr	r3, [pc, #540]	@ (8002364 <HAL_RCC_OscConfig+0xb40>)
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	4a86      	ldr	r2, [pc, #536]	@ (8002364 <HAL_RCC_OscConfig+0xb40>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	6213      	str	r3, [r2, #32]
 8002150:	e035      	b.n	80021be <HAL_RCC_OscConfig+0x99a>
 8002152:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002156:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10c      	bne.n	800217c <HAL_RCC_OscConfig+0x958>
 8002162:	4b80      	ldr	r3, [pc, #512]	@ (8002364 <HAL_RCC_OscConfig+0xb40>)
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	4a7f      	ldr	r2, [pc, #508]	@ (8002364 <HAL_RCC_OscConfig+0xb40>)
 8002168:	f023 0301 	bic.w	r3, r3, #1
 800216c:	6213      	str	r3, [r2, #32]
 800216e:	4b7d      	ldr	r3, [pc, #500]	@ (8002364 <HAL_RCC_OscConfig+0xb40>)
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	4a7c      	ldr	r2, [pc, #496]	@ (8002364 <HAL_RCC_OscConfig+0xb40>)
 8002174:	f023 0304 	bic.w	r3, r3, #4
 8002178:	6213      	str	r3, [r2, #32]
 800217a:	e020      	b.n	80021be <HAL_RCC_OscConfig+0x99a>
 800217c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002180:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2b05      	cmp	r3, #5
 800218a:	d10c      	bne.n	80021a6 <HAL_RCC_OscConfig+0x982>
 800218c:	4b75      	ldr	r3, [pc, #468]	@ (8002364 <HAL_RCC_OscConfig+0xb40>)
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	4a74      	ldr	r2, [pc, #464]	@ (8002364 <HAL_RCC_OscConfig+0xb40>)
 8002192:	f043 0304 	orr.w	r3, r3, #4
 8002196:	6213      	str	r3, [r2, #32]
 8002198:	4b72      	ldr	r3, [pc, #456]	@ (8002364 <HAL_RCC_OscConfig+0xb40>)
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	4a71      	ldr	r2, [pc, #452]	@ (8002364 <HAL_RCC_OscConfig+0xb40>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6213      	str	r3, [r2, #32]
 80021a4:	e00b      	b.n	80021be <HAL_RCC_OscConfig+0x99a>
 80021a6:	4b6f      	ldr	r3, [pc, #444]	@ (8002364 <HAL_RCC_OscConfig+0xb40>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4a6e      	ldr	r2, [pc, #440]	@ (8002364 <HAL_RCC_OscConfig+0xb40>)
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	6213      	str	r3, [r2, #32]
 80021b2:	4b6c      	ldr	r3, [pc, #432]	@ (8002364 <HAL_RCC_OscConfig+0xb40>)
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	4a6b      	ldr	r2, [pc, #428]	@ (8002364 <HAL_RCC_OscConfig+0xb40>)
 80021b8:	f023 0304 	bic.w	r3, r3, #4
 80021bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021c2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 8081 	beq.w	80022d2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d0:	f7ff f844 	bl	800125c <HAL_GetTick>
 80021d4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d8:	e00b      	b.n	80021f2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021da:	f7ff f83f 	bl	800125c <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e365      	b.n	80028be <HAL_RCC_OscConfig+0x109a>
 80021f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021f6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80021fa:	2202      	movs	r2, #2
 80021fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002202:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	fa93 f2a3 	rbit	r2, r3
 800220c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002210:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800221a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800221e:	2202      	movs	r2, #2
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002226:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	fa93 f2a3 	rbit	r2, r3
 8002230:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002234:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002238:	601a      	str	r2, [r3, #0]
  return result;
 800223a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800223e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002242:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002244:	fab3 f383 	clz	r3, r3
 8002248:	b2db      	uxtb	r3, r3
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	b2db      	uxtb	r3, r3
 800224e:	f043 0302 	orr.w	r3, r3, #2
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d102      	bne.n	800225e <HAL_RCC_OscConfig+0xa3a>
 8002258:	4b42      	ldr	r3, [pc, #264]	@ (8002364 <HAL_RCC_OscConfig+0xb40>)
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	e013      	b.n	8002286 <HAL_RCC_OscConfig+0xa62>
 800225e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002262:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002266:	2202      	movs	r2, #2
 8002268:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800226e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	fa93 f2a3 	rbit	r2, r3
 8002278:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800227c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	4b38      	ldr	r3, [pc, #224]	@ (8002364 <HAL_RCC_OscConfig+0xb40>)
 8002284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002286:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800228a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800228e:	2102      	movs	r1, #2
 8002290:	6011      	str	r1, [r2, #0]
 8002292:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002296:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800229a:	6812      	ldr	r2, [r2, #0]
 800229c:	fa92 f1a2 	rbit	r1, r2
 80022a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80022a4:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80022a8:	6011      	str	r1, [r2, #0]
  return result;
 80022aa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80022ae:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	fab2 f282 	clz	r2, r2
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	f002 021f 	and.w	r2, r2, #31
 80022c4:	2101      	movs	r1, #1
 80022c6:	fa01 f202 	lsl.w	r2, r1, r2
 80022ca:	4013      	ands	r3, r2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d084      	beq.n	80021da <HAL_RCC_OscConfig+0x9b6>
 80022d0:	e083      	b.n	80023da <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d2:	f7fe ffc3 	bl	800125c <HAL_GetTick>
 80022d6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022da:	e00b      	b.n	80022f4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022dc:	f7fe ffbe 	bl	800125c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e2e4      	b.n	80028be <HAL_RCC_OscConfig+0x109a>
 80022f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022f8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80022fc:	2202      	movs	r2, #2
 80022fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002304:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	fa93 f2a3 	rbit	r2, r3
 800230e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002312:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800231c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002320:	2202      	movs	r2, #2
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002328:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	fa93 f2a3 	rbit	r2, r3
 8002332:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002336:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800233a:	601a      	str	r2, [r3, #0]
  return result;
 800233c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002340:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002344:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002346:	fab3 f383 	clz	r3, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	095b      	lsrs	r3, r3, #5
 800234e:	b2db      	uxtb	r3, r3
 8002350:	f043 0302 	orr.w	r3, r3, #2
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d106      	bne.n	8002368 <HAL_RCC_OscConfig+0xb44>
 800235a:	4b02      	ldr	r3, [pc, #8]	@ (8002364 <HAL_RCC_OscConfig+0xb40>)
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	e017      	b.n	8002390 <HAL_RCC_OscConfig+0xb6c>
 8002360:	40007000 	.word	0x40007000
 8002364:	40021000 	.word	0x40021000
 8002368:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800236c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002370:	2202      	movs	r2, #2
 8002372:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002374:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002378:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	fa93 f2a3 	rbit	r2, r3
 8002382:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002386:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	4bb3      	ldr	r3, [pc, #716]	@ (800265c <HAL_RCC_OscConfig+0xe38>)
 800238e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002390:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002394:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002398:	2102      	movs	r1, #2
 800239a:	6011      	str	r1, [r2, #0]
 800239c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80023a0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80023a4:	6812      	ldr	r2, [r2, #0]
 80023a6:	fa92 f1a2 	rbit	r1, r2
 80023aa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80023ae:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80023b2:	6011      	str	r1, [r2, #0]
  return result;
 80023b4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80023b8:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80023bc:	6812      	ldr	r2, [r2, #0]
 80023be:	fab2 f282 	clz	r2, r2
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	f002 021f 	and.w	r2, r2, #31
 80023ce:	2101      	movs	r1, #1
 80023d0:	fa01 f202 	lsl.w	r2, r1, r2
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d180      	bne.n	80022dc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023da:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d105      	bne.n	80023ee <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e2:	4b9e      	ldr	r3, [pc, #632]	@ (800265c <HAL_RCC_OscConfig+0xe38>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	4a9d      	ldr	r2, [pc, #628]	@ (800265c <HAL_RCC_OscConfig+0xe38>)
 80023e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023ec:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023f2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 825e 	beq.w	80028bc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002400:	4b96      	ldr	r3, [pc, #600]	@ (800265c <HAL_RCC_OscConfig+0xe38>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 030c 	and.w	r3, r3, #12
 8002408:	2b08      	cmp	r3, #8
 800240a:	f000 821f 	beq.w	800284c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800240e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002412:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	2b02      	cmp	r3, #2
 800241c:	f040 8170 	bne.w	8002700 <HAL_RCC_OscConfig+0xedc>
 8002420:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002424:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002428:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800242c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002432:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	fa93 f2a3 	rbit	r2, r3
 800243c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002440:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002444:	601a      	str	r2, [r3, #0]
  return result;
 8002446:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800244a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800244e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002450:	fab3 f383 	clz	r3, r3
 8002454:	b2db      	uxtb	r3, r3
 8002456:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800245a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	461a      	mov	r2, r3
 8002462:	2300      	movs	r3, #0
 8002464:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002466:	f7fe fef9 	bl	800125c <HAL_GetTick>
 800246a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246e:	e009      	b.n	8002484 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002470:	f7fe fef4 	bl	800125c <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e21c      	b.n	80028be <HAL_RCC_OscConfig+0x109a>
 8002484:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002488:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800248c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002490:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002496:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	fa93 f2a3 	rbit	r2, r3
 80024a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024a4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80024a8:	601a      	str	r2, [r3, #0]
  return result;
 80024aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ae:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80024b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b4:	fab3 f383 	clz	r3, r3
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d102      	bne.n	80024ce <HAL_RCC_OscConfig+0xcaa>
 80024c8:	4b64      	ldr	r3, [pc, #400]	@ (800265c <HAL_RCC_OscConfig+0xe38>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	e027      	b.n	800251e <HAL_RCC_OscConfig+0xcfa>
 80024ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024d2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80024d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024e0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	fa93 f2a3 	rbit	r2, r3
 80024ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ee:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024f8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80024fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002506:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	fa93 f2a3 	rbit	r2, r3
 8002510:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002514:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	4b50      	ldr	r3, [pc, #320]	@ (800265c <HAL_RCC_OscConfig+0xe38>)
 800251c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002522:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002526:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800252a:	6011      	str	r1, [r2, #0]
 800252c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002530:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	fa92 f1a2 	rbit	r1, r2
 800253a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800253e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002542:	6011      	str	r1, [r2, #0]
  return result;
 8002544:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002548:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800254c:	6812      	ldr	r2, [r2, #0]
 800254e:	fab2 f282 	clz	r2, r2
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	f042 0220 	orr.w	r2, r2, #32
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	f002 021f 	and.w	r2, r2, #31
 800255e:	2101      	movs	r1, #1
 8002560:	fa01 f202 	lsl.w	r2, r1, r2
 8002564:	4013      	ands	r3, r2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d182      	bne.n	8002470 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800256a:	4b3c      	ldr	r3, [pc, #240]	@ (800265c <HAL_RCC_OscConfig+0xe38>)
 800256c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256e:	f023 020f 	bic.w	r2, r3, #15
 8002572:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002576:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257e:	4937      	ldr	r1, [pc, #220]	@ (800265c <HAL_RCC_OscConfig+0xe38>)
 8002580:	4313      	orrs	r3, r2
 8002582:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002584:	4b35      	ldr	r3, [pc, #212]	@ (800265c <HAL_RCC_OscConfig+0xe38>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800258c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002590:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6a19      	ldr	r1, [r3, #32]
 8002598:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800259c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	430b      	orrs	r3, r1
 80025a6:	492d      	ldr	r1, [pc, #180]	@ (800265c <HAL_RCC_OscConfig+0xe38>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	604b      	str	r3, [r1, #4]
 80025ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025b0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80025b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025be:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	fa93 f2a3 	rbit	r2, r3
 80025c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025cc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80025d0:	601a      	str	r2, [r3, #0]
  return result;
 80025d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025d6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80025da:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025dc:	fab3 f383 	clz	r3, r3
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80025e6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	461a      	mov	r2, r3
 80025ee:	2301      	movs	r3, #1
 80025f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f2:	f7fe fe33 	bl	800125c <HAL_GetTick>
 80025f6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025fa:	e009      	b.n	8002610 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025fc:	f7fe fe2e 	bl	800125c <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e156      	b.n	80028be <HAL_RCC_OscConfig+0x109a>
 8002610:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002614:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002618:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800261c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002622:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	fa93 f2a3 	rbit	r2, r3
 800262c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002630:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002634:	601a      	str	r2, [r3, #0]
  return result;
 8002636:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800263a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800263e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002640:	fab3 f383 	clz	r3, r3
 8002644:	b2db      	uxtb	r3, r3
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	b2db      	uxtb	r3, r3
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b01      	cmp	r3, #1
 8002652:	d105      	bne.n	8002660 <HAL_RCC_OscConfig+0xe3c>
 8002654:	4b01      	ldr	r3, [pc, #4]	@ (800265c <HAL_RCC_OscConfig+0xe38>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	e02a      	b.n	80026b0 <HAL_RCC_OscConfig+0xe8c>
 800265a:	bf00      	nop
 800265c:	40021000 	.word	0x40021000
 8002660:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002664:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002668:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800266c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002672:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	fa93 f2a3 	rbit	r2, r3
 800267c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002680:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800268a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800268e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002698:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	fa93 f2a3 	rbit	r2, r3
 80026a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026a6:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	4b86      	ldr	r3, [pc, #536]	@ (80028c8 <HAL_RCC_OscConfig+0x10a4>)
 80026ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026b4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80026b8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80026bc:	6011      	str	r1, [r2, #0]
 80026be:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026c2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80026c6:	6812      	ldr	r2, [r2, #0]
 80026c8:	fa92 f1a2 	rbit	r1, r2
 80026cc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026d0:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80026d4:	6011      	str	r1, [r2, #0]
  return result;
 80026d6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026da:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	fab2 f282 	clz	r2, r2
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	f042 0220 	orr.w	r2, r2, #32
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	f002 021f 	and.w	r2, r2, #31
 80026f0:	2101      	movs	r1, #1
 80026f2:	fa01 f202 	lsl.w	r2, r1, r2
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f43f af7f 	beq.w	80025fc <HAL_RCC_OscConfig+0xdd8>
 80026fe:	e0dd      	b.n	80028bc <HAL_RCC_OscConfig+0x1098>
 8002700:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002704:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002708:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800270c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002712:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	fa93 f2a3 	rbit	r2, r3
 800271c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002720:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002724:	601a      	str	r2, [r3, #0]
  return result;
 8002726:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800272a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800272e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002730:	fab3 f383 	clz	r3, r3
 8002734:	b2db      	uxtb	r3, r3
 8002736:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800273a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	461a      	mov	r2, r3
 8002742:	2300      	movs	r3, #0
 8002744:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002746:	f7fe fd89 	bl	800125c <HAL_GetTick>
 800274a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800274e:	e009      	b.n	8002764 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002750:	f7fe fd84 	bl	800125c <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e0ac      	b.n	80028be <HAL_RCC_OscConfig+0x109a>
 8002764:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002768:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800276c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002770:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002776:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	fa93 f2a3 	rbit	r2, r3
 8002780:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002784:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002788:	601a      	str	r2, [r3, #0]
  return result;
 800278a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800278e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002792:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002794:	fab3 f383 	clz	r3, r3
 8002798:	b2db      	uxtb	r3, r3
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	b2db      	uxtb	r3, r3
 800279e:	f043 0301 	orr.w	r3, r3, #1
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d102      	bne.n	80027ae <HAL_RCC_OscConfig+0xf8a>
 80027a8:	4b47      	ldr	r3, [pc, #284]	@ (80028c8 <HAL_RCC_OscConfig+0x10a4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	e027      	b.n	80027fe <HAL_RCC_OscConfig+0xfda>
 80027ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027b2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80027b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027c0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	fa93 f2a3 	rbit	r2, r3
 80027ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027ce:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027d8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80027dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027e6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	fa93 f2a3 	rbit	r2, r3
 80027f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027f4:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	4b33      	ldr	r3, [pc, #204]	@ (80028c8 <HAL_RCC_OscConfig+0x10a4>)
 80027fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002802:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002806:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800280a:	6011      	str	r1, [r2, #0]
 800280c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002810:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	fa92 f1a2 	rbit	r1, r2
 800281a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800281e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002822:	6011      	str	r1, [r2, #0]
  return result;
 8002824:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002828:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	fab2 f282 	clz	r2, r2
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	f042 0220 	orr.w	r2, r2, #32
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	f002 021f 	and.w	r2, r2, #31
 800283e:	2101      	movs	r1, #1
 8002840:	fa01 f202 	lsl.w	r2, r1, r2
 8002844:	4013      	ands	r3, r2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d182      	bne.n	8002750 <HAL_RCC_OscConfig+0xf2c>
 800284a:	e037      	b.n	80028bc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800284c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002850:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e02e      	b.n	80028be <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002860:	4b19      	ldr	r3, [pc, #100]	@ (80028c8 <HAL_RCC_OscConfig+0x10a4>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002868:	4b17      	ldr	r3, [pc, #92]	@ (80028c8 <HAL_RCC_OscConfig+0x10a4>)
 800286a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800286c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002870:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002874:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002878:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800287c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	429a      	cmp	r2, r3
 8002886:	d117      	bne.n	80028b8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002888:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800288c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002890:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002894:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800289c:	429a      	cmp	r2, r3
 800289e:	d10b      	bne.n	80028b8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80028a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028a4:	f003 020f 	and.w	r2, r3, #15
 80028a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d001      	beq.n	80028bc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e000      	b.n	80028be <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000

080028cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b09e      	sub	sp, #120	@ 0x78
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e162      	b.n	8002baa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028e4:	4b90      	ldr	r3, [pc, #576]	@ (8002b28 <HAL_RCC_ClockConfig+0x25c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d910      	bls.n	8002914 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f2:	4b8d      	ldr	r3, [pc, #564]	@ (8002b28 <HAL_RCC_ClockConfig+0x25c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f023 0207 	bic.w	r2, r3, #7
 80028fa:	498b      	ldr	r1, [pc, #556]	@ (8002b28 <HAL_RCC_ClockConfig+0x25c>)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	4313      	orrs	r3, r2
 8002900:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002902:	4b89      	ldr	r3, [pc, #548]	@ (8002b28 <HAL_RCC_ClockConfig+0x25c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d001      	beq.n	8002914 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e14a      	b.n	8002baa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002920:	4b82      	ldr	r3, [pc, #520]	@ (8002b2c <HAL_RCC_ClockConfig+0x260>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	497f      	ldr	r1, [pc, #508]	@ (8002b2c <HAL_RCC_ClockConfig+0x260>)
 800292e:	4313      	orrs	r3, r2
 8002930:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 80dc 	beq.w	8002af8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d13c      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xf6>
 8002948:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800294c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002950:	fa93 f3a3 	rbit	r3, r3
 8002954:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002956:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002958:	fab3 f383 	clz	r3, r3
 800295c:	b2db      	uxtb	r3, r3
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	b2db      	uxtb	r3, r3
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b01      	cmp	r3, #1
 800296a:	d102      	bne.n	8002972 <HAL_RCC_ClockConfig+0xa6>
 800296c:	4b6f      	ldr	r3, [pc, #444]	@ (8002b2c <HAL_RCC_ClockConfig+0x260>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	e00f      	b.n	8002992 <HAL_RCC_ClockConfig+0xc6>
 8002972:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002976:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002978:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800297a:	fa93 f3a3 	rbit	r3, r3
 800297e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002980:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002984:	663b      	str	r3, [r7, #96]	@ 0x60
 8002986:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002988:	fa93 f3a3 	rbit	r3, r3
 800298c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800298e:	4b67      	ldr	r3, [pc, #412]	@ (8002b2c <HAL_RCC_ClockConfig+0x260>)
 8002990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002992:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002996:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002998:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800299a:	fa92 f2a2 	rbit	r2, r2
 800299e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80029a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80029a2:	fab2 f282 	clz	r2, r2
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	f042 0220 	orr.w	r2, r2, #32
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	f002 021f 	and.w	r2, r2, #31
 80029b2:	2101      	movs	r1, #1
 80029b4:	fa01 f202 	lsl.w	r2, r1, r2
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d17b      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e0f3      	b.n	8002baa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d13c      	bne.n	8002a44 <HAL_RCC_ClockConfig+0x178>
 80029ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029ce:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80029d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	095b      	lsrs	r3, r3, #5
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d102      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x128>
 80029ee:	4b4f      	ldr	r3, [pc, #316]	@ (8002b2c <HAL_RCC_ClockConfig+0x260>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	e00f      	b.n	8002a14 <HAL_RCC_ClockConfig+0x148>
 80029f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029fc:	fa93 f3a3 	rbit	r3, r3
 8002a00:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a06:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a0a:	fa93 f3a3 	rbit	r3, r3
 8002a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a10:	4b46      	ldr	r3, [pc, #280]	@ (8002b2c <HAL_RCC_ClockConfig+0x260>)
 8002a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a18:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002a1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a1c:	fa92 f2a2 	rbit	r2, r2
 8002a20:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002a22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a24:	fab2 f282 	clz	r2, r2
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	f042 0220 	orr.w	r2, r2, #32
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	f002 021f 	and.w	r2, r2, #31
 8002a34:	2101      	movs	r1, #1
 8002a36:	fa01 f202 	lsl.w	r2, r1, r2
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d13a      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0b2      	b.n	8002baa <HAL_RCC_ClockConfig+0x2de>
 8002a44:	2302      	movs	r3, #2
 8002a46:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4a:	fa93 f3a3 	rbit	r3, r3
 8002a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a52:	fab3 f383 	clz	r3, r3
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	095b      	lsrs	r3, r3, #5
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d102      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x1a0>
 8002a66:	4b31      	ldr	r3, [pc, #196]	@ (8002b2c <HAL_RCC_ClockConfig+0x260>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	e00d      	b.n	8002a88 <HAL_RCC_ClockConfig+0x1bc>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a72:	fa93 f3a3 	rbit	r3, r3
 8002a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a78:	2302      	movs	r3, #2
 8002a7a:	623b      	str	r3, [r7, #32]
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	fa93 f3a3 	rbit	r3, r3
 8002a82:	61fb      	str	r3, [r7, #28]
 8002a84:	4b29      	ldr	r3, [pc, #164]	@ (8002b2c <HAL_RCC_ClockConfig+0x260>)
 8002a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a88:	2202      	movs	r2, #2
 8002a8a:	61ba      	str	r2, [r7, #24]
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	fa92 f2a2 	rbit	r2, r2
 8002a92:	617a      	str	r2, [r7, #20]
  return result;
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	fab2 f282 	clz	r2, r2
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	f042 0220 	orr.w	r2, r2, #32
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	f002 021f 	and.w	r2, r2, #31
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e079      	b.n	8002baa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8002b2c <HAL_RCC_ClockConfig+0x260>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f023 0203 	bic.w	r2, r3, #3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	491a      	ldr	r1, [pc, #104]	@ (8002b2c <HAL_RCC_ClockConfig+0x260>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ac8:	f7fe fbc8 	bl	800125c <HAL_GetTick>
 8002acc:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ace:	e00a      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad0:	f7fe fbc4 	bl	800125c <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e061      	b.n	8002baa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae6:	4b11      	ldr	r3, [pc, #68]	@ (8002b2c <HAL_RCC_ClockConfig+0x260>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 020c 	and.w	r2, r3, #12
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d1eb      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002af8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b28 <HAL_RCC_ClockConfig+0x25c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d214      	bcs.n	8002b30 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b06:	4b08      	ldr	r3, [pc, #32]	@ (8002b28 <HAL_RCC_ClockConfig+0x25c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f023 0207 	bic.w	r2, r3, #7
 8002b0e:	4906      	ldr	r1, [pc, #24]	@ (8002b28 <HAL_RCC_ClockConfig+0x25c>)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b16:	4b04      	ldr	r3, [pc, #16]	@ (8002b28 <HAL_RCC_ClockConfig+0x25c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d005      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e040      	b.n	8002baa <HAL_RCC_ClockConfig+0x2de>
 8002b28:	40022000 	.word	0x40022000
 8002b2c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb4 <HAL_RCC_ClockConfig+0x2e8>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	491a      	ldr	r1, [pc, #104]	@ (8002bb4 <HAL_RCC_ClockConfig+0x2e8>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d009      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b5a:	4b16      	ldr	r3, [pc, #88]	@ (8002bb4 <HAL_RCC_ClockConfig+0x2e8>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4912      	ldr	r1, [pc, #72]	@ (8002bb4 <HAL_RCC_ClockConfig+0x2e8>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b6e:	f000 f829 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8002b72:	4601      	mov	r1, r0
 8002b74:	4b0f      	ldr	r3, [pc, #60]	@ (8002bb4 <HAL_RCC_ClockConfig+0x2e8>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b7c:	22f0      	movs	r2, #240	@ 0xf0
 8002b7e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	fa92 f2a2 	rbit	r2, r2
 8002b86:	60fa      	str	r2, [r7, #12]
  return result;
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	fab2 f282 	clz	r2, r2
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	40d3      	lsrs	r3, r2
 8002b92:	4a09      	ldr	r2, [pc, #36]	@ (8002bb8 <HAL_RCC_ClockConfig+0x2ec>)
 8002b94:	5cd3      	ldrb	r3, [r2, r3]
 8002b96:	fa21 f303 	lsr.w	r3, r1, r3
 8002b9a:	4a08      	ldr	r2, [pc, #32]	@ (8002bbc <HAL_RCC_ClockConfig+0x2f0>)
 8002b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b9e:	4b08      	ldr	r3, [pc, #32]	@ (8002bc0 <HAL_RCC_ClockConfig+0x2f4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe fb16 	bl	80011d4 <HAL_InitTick>
  
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3778      	adds	r7, #120	@ 0x78
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	080046c8 	.word	0x080046c8
 8002bbc:	20000000 	.word	0x20000000
 8002bc0:	20000004 	.word	0x20000004

08002bc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002bde:	4b1f      	ldr	r3, [pc, #124]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x98>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 030c 	and.w	r3, r3, #12
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d002      	beq.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x30>
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d003      	beq.n	8002bfa <HAL_RCC_GetSysClockFreq+0x36>
 8002bf2:	e029      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bf6:	613b      	str	r3, [r7, #16]
      break;
 8002bf8:	e029      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	0c9b      	lsrs	r3, r3, #18
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	4a18      	ldr	r2, [pc, #96]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c04:	5cd3      	ldrb	r3, [r2, r3]
 8002c06:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002c08:	4b14      	ldr	r3, [pc, #80]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0c:	f003 030f 	and.w	r3, r3, #15
 8002c10:	4a15      	ldr	r2, [pc, #84]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c12:	5cd3      	ldrb	r3, [r2, r3]
 8002c14:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c20:	4a0f      	ldr	r2, [pc, #60]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	fb02 f303 	mul.w	r3, r2, r3
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	e007      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c32:	4a0b      	ldr	r2, [pc, #44]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	fb02 f303 	mul.w	r3, r2, r3
 8002c40:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	613b      	str	r3, [r7, #16]
      break;
 8002c46:	e002      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c48:	4b05      	ldr	r3, [pc, #20]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c4a:	613b      	str	r3, [r7, #16]
      break;
 8002c4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c4e:	693b      	ldr	r3, [r7, #16]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	371c      	adds	r7, #28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	007a1200 	.word	0x007a1200
 8002c64:	080046e0 	.word	0x080046e0
 8002c68:	080046f0 	.word	0x080046f0

08002c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c70:	4b03      	ldr	r3, [pc, #12]	@ (8002c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c72:	681b      	ldr	r3, [r3, #0]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	20000000 	.word	0x20000000

08002c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002c8a:	f7ff ffef 	bl	8002c6c <HAL_RCC_GetHCLKFreq>
 8002c8e:	4601      	mov	r1, r0
 8002c90:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c98:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002c9c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	fa92 f2a2 	rbit	r2, r2
 8002ca4:	603a      	str	r2, [r7, #0]
  return result;
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	fab2 f282 	clz	r2, r2
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	40d3      	lsrs	r3, r2
 8002cb0:	4a04      	ldr	r2, [pc, #16]	@ (8002cc4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002cb2:	5cd3      	ldrb	r3, [r2, r3]
 8002cb4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	080046d8 	.word	0x080046d8

08002cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002cce:	f7ff ffcd 	bl	8002c6c <HAL_RCC_GetHCLKFreq>
 8002cd2:	4601      	mov	r1, r0
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d04 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002cdc:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002ce0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	fa92 f2a2 	rbit	r2, r2
 8002ce8:	603a      	str	r2, [r7, #0]
  return result;
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	fab2 f282 	clz	r2, r2
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	40d3      	lsrs	r3, r2
 8002cf4:	4a04      	ldr	r2, [pc, #16]	@ (8002d08 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002cf6:	5cd3      	ldrb	r3, [r2, r3]
 8002cf8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40021000 	.word	0x40021000
 8002d08:	080046d8 	.word	0x080046d8

08002d0c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b092      	sub	sp, #72	@ 0x48
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 80d4 	beq.w	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d30:	4b4e      	ldr	r3, [pc, #312]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10e      	bne.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d3c:	4b4b      	ldr	r3, [pc, #300]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	4a4a      	ldr	r2, [pc, #296]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d46:	61d3      	str	r3, [r2, #28]
 8002d48:	4b48      	ldr	r3, [pc, #288]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d54:	2301      	movs	r3, #1
 8002d56:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5a:	4b45      	ldr	r3, [pc, #276]	@ (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d118      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d66:	4b42      	ldr	r3, [pc, #264]	@ (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a41      	ldr	r2, [pc, #260]	@ (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d70:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d72:	f7fe fa73 	bl	800125c <HAL_GetTick>
 8002d76:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d78:	e008      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d7a:	f7fe fa6f 	bl	800125c <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b64      	cmp	r3, #100	@ 0x64
 8002d86:	d901      	bls.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e1d6      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8c:	4b38      	ldr	r3, [pc, #224]	@ (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0f0      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d98:	4b34      	ldr	r3, [pc, #208]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 8084 	beq.w	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002db2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d07c      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002db8:	4b2c      	ldr	r3, [pc, #176]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002dc2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002dc6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dca:	fa93 f3a3 	rbit	r3, r3
 8002dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dd2:	fab3 f383 	clz	r3, r3
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4b26      	ldr	r3, [pc, #152]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ddc:	4413      	add	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	461a      	mov	r2, r3
 8002de2:	2301      	movs	r3, #1
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002dea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dee:	fa93 f3a3 	rbit	r3, r3
 8002df2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002df6:	fab3 f383 	clz	r3, r3
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	461a      	mov	r2, r3
 8002e06:	2300      	movs	r3, #0
 8002e08:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e0a:	4a18      	ldr	r2, [pc, #96]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e0e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d04b      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1a:	f7fe fa1f 	bl	800125c <HAL_GetTick>
 8002e1e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e20:	e00a      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e22:	f7fe fa1b 	bl	800125c <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e180      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e3e:	fa93 f3a3 	rbit	r3, r3
 8002e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e44:	2302      	movs	r3, #2
 8002e46:	623b      	str	r3, [r7, #32]
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	fa93 f3a3 	rbit	r3, r3
 8002e4e:	61fb      	str	r3, [r7, #28]
  return result;
 8002e50:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	095b      	lsrs	r3, r3, #5
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f043 0302 	orr.w	r3, r3, #2
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d108      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002e66:	4b01      	ldr	r3, [pc, #4]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	e00d      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	40007000 	.word	0x40007000
 8002e74:	10908100 	.word	0x10908100
 8002e78:	2302      	movs	r3, #2
 8002e7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	fa93 f3a3 	rbit	r3, r3
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	4b9a      	ldr	r3, [pc, #616]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e88:	2202      	movs	r2, #2
 8002e8a:	613a      	str	r2, [r7, #16]
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	fa92 f2a2 	rbit	r2, r2
 8002e92:	60fa      	str	r2, [r7, #12]
  return result;
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	fab2 f282 	clz	r2, r2
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	f002 021f 	and.w	r2, r2, #31
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0b7      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002eb2:	4b8f      	ldr	r3, [pc, #572]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	498c      	ldr	r1, [pc, #560]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ec4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d105      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ecc:	4b88      	ldr	r3, [pc, #544]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	4a87      	ldr	r2, [pc, #540]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ed2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ed6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d008      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ee4:	4b82      	ldr	r3, [pc, #520]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee8:	f023 0203 	bic.w	r2, r3, #3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	497f      	ldr	r1, [pc, #508]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d008      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f02:	4b7b      	ldr	r3, [pc, #492]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f06:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	4978      	ldr	r1, [pc, #480]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f20:	4b73      	ldr	r3, [pc, #460]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f24:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	4970      	ldr	r1, [pc, #448]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0320 	and.w	r3, r3, #32
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d008      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f3e:	4b6c      	ldr	r3, [pc, #432]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f42:	f023 0210 	bic.w	r2, r3, #16
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	4969      	ldr	r1, [pc, #420]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d008      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002f5c:	4b64      	ldr	r3, [pc, #400]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f68:	4961      	ldr	r1, [pc, #388]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d008      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f7a:	4b5d      	ldr	r3, [pc, #372]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7e:	f023 0220 	bic.w	r2, r3, #32
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	495a      	ldr	r1, [pc, #360]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d008      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f98:	4b55      	ldr	r3, [pc, #340]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa4:	4952      	ldr	r1, [pc, #328]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d008      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fb6:	4b4e      	ldr	r3, [pc, #312]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	494b      	ldr	r1, [pc, #300]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fd4:	4b46      	ldr	r3, [pc, #280]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	4943      	ldr	r1, [pc, #268]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d008      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ff2:	4b3f      	ldr	r3, [pc, #252]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffe:	493c      	ldr	r1, [pc, #240]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003000:	4313      	orrs	r3, r2
 8003002:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003010:	4b37      	ldr	r3, [pc, #220]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003014:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301c:	4934      	ldr	r1, [pc, #208]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800301e:	4313      	orrs	r3, r2
 8003020:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d008      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800302e:	4b30      	ldr	r3, [pc, #192]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003032:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303a:	492d      	ldr	r1, [pc, #180]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800303c:	4313      	orrs	r3, r2
 800303e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d008      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800304c:	4b28      	ldr	r3, [pc, #160]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800304e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003050:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003058:	4925      	ldr	r1, [pc, #148]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800305a:	4313      	orrs	r3, r2
 800305c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d008      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800306a:	4b21      	ldr	r3, [pc, #132]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003076:	491e      	ldr	r1, [pc, #120]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003078:	4313      	orrs	r3, r2
 800307a:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d008      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003088:	4b19      	ldr	r3, [pc, #100]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800308a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003094:	4916      	ldr	r1, [pc, #88]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003096:	4313      	orrs	r3, r2
 8003098:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d008      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80030a6:	4b12      	ldr	r3, [pc, #72]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030aa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b2:	490f      	ldr	r1, [pc, #60]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80030c4:	4b0a      	ldr	r3, [pc, #40]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d0:	4907      	ldr	r1, [pc, #28]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00c      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80030e2:	4b03      	ldr	r3, [pc, #12]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	e002      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80030ee:	bf00      	nop
 80030f0:	40021000 	.word	0x40021000
 80030f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030f6:	4913      	ldr	r1, [pc, #76]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d008      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003108:	4b0e      	ldr	r3, [pc, #56]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800310a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003114:	490b      	ldr	r1, [pc, #44]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003116:	4313      	orrs	r3, r2
 8003118:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d008      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003126:	4b07      	ldr	r3, [pc, #28]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003132:	4904      	ldr	r1, [pc, #16]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003134:	4313      	orrs	r3, r2
 8003136:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3748      	adds	r7, #72	@ 0x48
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40021000 	.word	0x40021000

08003148 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e049      	b.n	80031ee <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fd ff32 	bl	8000fd8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3304      	adds	r3, #4
 8003184:	4619      	mov	r1, r3
 8003186:	4610      	mov	r0, r2
 8003188:	f000 fb8a 	bl	80038a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
	...

080031f8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d104      	bne.n	8003216 <HAL_TIM_IC_Start_IT+0x1e>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003212:	b2db      	uxtb	r3, r3
 8003214:	e023      	b.n	800325e <HAL_TIM_IC_Start_IT+0x66>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b04      	cmp	r3, #4
 800321a:	d104      	bne.n	8003226 <HAL_TIM_IC_Start_IT+0x2e>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003222:	b2db      	uxtb	r3, r3
 8003224:	e01b      	b.n	800325e <HAL_TIM_IC_Start_IT+0x66>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	2b08      	cmp	r3, #8
 800322a:	d104      	bne.n	8003236 <HAL_TIM_IC_Start_IT+0x3e>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003232:	b2db      	uxtb	r3, r3
 8003234:	e013      	b.n	800325e <HAL_TIM_IC_Start_IT+0x66>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b0c      	cmp	r3, #12
 800323a:	d104      	bne.n	8003246 <HAL_TIM_IC_Start_IT+0x4e>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003242:	b2db      	uxtb	r3, r3
 8003244:	e00b      	b.n	800325e <HAL_TIM_IC_Start_IT+0x66>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2b10      	cmp	r3, #16
 800324a:	d104      	bne.n	8003256 <HAL_TIM_IC_Start_IT+0x5e>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003252:	b2db      	uxtb	r3, r3
 8003254:	e003      	b.n	800325e <HAL_TIM_IC_Start_IT+0x66>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800325c:	b2db      	uxtb	r3, r3
 800325e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d104      	bne.n	8003270 <HAL_TIM_IC_Start_IT+0x78>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800326c:	b2db      	uxtb	r3, r3
 800326e:	e013      	b.n	8003298 <HAL_TIM_IC_Start_IT+0xa0>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	2b04      	cmp	r3, #4
 8003274:	d104      	bne.n	8003280 <HAL_TIM_IC_Start_IT+0x88>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800327c:	b2db      	uxtb	r3, r3
 800327e:	e00b      	b.n	8003298 <HAL_TIM_IC_Start_IT+0xa0>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	2b08      	cmp	r3, #8
 8003284:	d104      	bne.n	8003290 <HAL_TIM_IC_Start_IT+0x98>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800328c:	b2db      	uxtb	r3, r3
 800328e:	e003      	b.n	8003298 <HAL_TIM_IC_Start_IT+0xa0>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003296:	b2db      	uxtb	r3, r3
 8003298:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800329a:	7bbb      	ldrb	r3, [r7, #14]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d102      	bne.n	80032a6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80032a0:	7b7b      	ldrb	r3, [r7, #13]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d001      	beq.n	80032aa <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e0dd      	b.n	8003466 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d104      	bne.n	80032ba <HAL_TIM_IC_Start_IT+0xc2>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032b8:	e023      	b.n	8003302 <HAL_TIM_IC_Start_IT+0x10a>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d104      	bne.n	80032ca <HAL_TIM_IC_Start_IT+0xd2>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032c8:	e01b      	b.n	8003302 <HAL_TIM_IC_Start_IT+0x10a>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d104      	bne.n	80032da <HAL_TIM_IC_Start_IT+0xe2>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032d8:	e013      	b.n	8003302 <HAL_TIM_IC_Start_IT+0x10a>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b0c      	cmp	r3, #12
 80032de:	d104      	bne.n	80032ea <HAL_TIM_IC_Start_IT+0xf2>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032e8:	e00b      	b.n	8003302 <HAL_TIM_IC_Start_IT+0x10a>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b10      	cmp	r3, #16
 80032ee:	d104      	bne.n	80032fa <HAL_TIM_IC_Start_IT+0x102>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032f8:	e003      	b.n	8003302 <HAL_TIM_IC_Start_IT+0x10a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2202      	movs	r2, #2
 80032fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d104      	bne.n	8003312 <HAL_TIM_IC_Start_IT+0x11a>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003310:	e013      	b.n	800333a <HAL_TIM_IC_Start_IT+0x142>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b04      	cmp	r3, #4
 8003316:	d104      	bne.n	8003322 <HAL_TIM_IC_Start_IT+0x12a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2202      	movs	r2, #2
 800331c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003320:	e00b      	b.n	800333a <HAL_TIM_IC_Start_IT+0x142>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b08      	cmp	r3, #8
 8003326:	d104      	bne.n	8003332 <HAL_TIM_IC_Start_IT+0x13a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003330:	e003      	b.n	800333a <HAL_TIM_IC_Start_IT+0x142>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2202      	movs	r2, #2
 8003336:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b0c      	cmp	r3, #12
 800333e:	d841      	bhi.n	80033c4 <HAL_TIM_IC_Start_IT+0x1cc>
 8003340:	a201      	add	r2, pc, #4	@ (adr r2, 8003348 <HAL_TIM_IC_Start_IT+0x150>)
 8003342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003346:	bf00      	nop
 8003348:	0800337d 	.word	0x0800337d
 800334c:	080033c5 	.word	0x080033c5
 8003350:	080033c5 	.word	0x080033c5
 8003354:	080033c5 	.word	0x080033c5
 8003358:	0800338f 	.word	0x0800338f
 800335c:	080033c5 	.word	0x080033c5
 8003360:	080033c5 	.word	0x080033c5
 8003364:	080033c5 	.word	0x080033c5
 8003368:	080033a1 	.word	0x080033a1
 800336c:	080033c5 	.word	0x080033c5
 8003370:	080033c5 	.word	0x080033c5
 8003374:	080033c5 	.word	0x080033c5
 8003378:	080033b3 	.word	0x080033b3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0202 	orr.w	r2, r2, #2
 800338a:	60da      	str	r2, [r3, #12]
      break;
 800338c:	e01d      	b.n	80033ca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f042 0204 	orr.w	r2, r2, #4
 800339c:	60da      	str	r2, [r3, #12]
      break;
 800339e:	e014      	b.n	80033ca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0208 	orr.w	r2, r2, #8
 80033ae:	60da      	str	r2, [r3, #12]
      break;
 80033b0:	e00b      	b.n	80033ca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68da      	ldr	r2, [r3, #12]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 0210 	orr.w	r2, r2, #16
 80033c0:	60da      	str	r2, [r3, #12]
      break;
 80033c2:	e002      	b.n	80033ca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
      break;
 80033c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d149      	bne.n	8003464 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2201      	movs	r2, #1
 80033d6:	6839      	ldr	r1, [r7, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 fc2f 	bl	8003c3c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a23      	ldr	r2, [pc, #140]	@ (8003470 <HAL_TIM_IC_Start_IT+0x278>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d01d      	beq.n	8003424 <HAL_TIM_IC_Start_IT+0x22c>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033f0:	d018      	beq.n	8003424 <HAL_TIM_IC_Start_IT+0x22c>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a1f      	ldr	r2, [pc, #124]	@ (8003474 <HAL_TIM_IC_Start_IT+0x27c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d013      	beq.n	8003424 <HAL_TIM_IC_Start_IT+0x22c>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a1d      	ldr	r2, [pc, #116]	@ (8003478 <HAL_TIM_IC_Start_IT+0x280>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d00e      	beq.n	8003424 <HAL_TIM_IC_Start_IT+0x22c>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a1c      	ldr	r2, [pc, #112]	@ (800347c <HAL_TIM_IC_Start_IT+0x284>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d009      	beq.n	8003424 <HAL_TIM_IC_Start_IT+0x22c>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a1a      	ldr	r2, [pc, #104]	@ (8003480 <HAL_TIM_IC_Start_IT+0x288>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d004      	beq.n	8003424 <HAL_TIM_IC_Start_IT+0x22c>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a19      	ldr	r2, [pc, #100]	@ (8003484 <HAL_TIM_IC_Start_IT+0x28c>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d115      	bne.n	8003450 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	4b17      	ldr	r3, [pc, #92]	@ (8003488 <HAL_TIM_IC_Start_IT+0x290>)
 800342c:	4013      	ands	r3, r2
 800342e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b06      	cmp	r3, #6
 8003434:	d015      	beq.n	8003462 <HAL_TIM_IC_Start_IT+0x26a>
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800343c:	d011      	beq.n	8003462 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f042 0201 	orr.w	r2, r2, #1
 800344c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800344e:	e008      	b.n	8003462 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0201 	orr.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	e000      	b.n	8003464 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003462:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003464:	7bfb      	ldrb	r3, [r7, #15]
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40012c00 	.word	0x40012c00
 8003474:	40000400 	.word	0x40000400
 8003478:	40000800 	.word	0x40000800
 800347c:	40013400 	.word	0x40013400
 8003480:	40014000 	.word	0x40014000
 8003484:	40015000 	.word	0x40015000
 8003488:	00010007 	.word	0x00010007

0800348c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d020      	beq.n	80034f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d01b      	beq.n	80034f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0202 	mvn.w	r2, #2
 80034c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fd fb82 	bl	8000be0 <HAL_TIM_IC_CaptureCallback>
 80034dc:	e005      	b.n	80034ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f9c0 	bl	8003864 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f9c7 	bl	8003878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d020      	beq.n	800353c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d01b      	beq.n	800353c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0204 	mvn.w	r2, #4
 800350c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2202      	movs	r2, #2
 8003512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7fd fb5c 	bl	8000be0 <HAL_TIM_IC_CaptureCallback>
 8003528:	e005      	b.n	8003536 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f99a 	bl	8003864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f9a1 	bl	8003878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d020      	beq.n	8003588 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b00      	cmp	r3, #0
 800354e:	d01b      	beq.n	8003588 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f06f 0208 	mvn.w	r2, #8
 8003558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2204      	movs	r2, #4
 800355e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7fd fb36 	bl	8000be0 <HAL_TIM_IC_CaptureCallback>
 8003574:	e005      	b.n	8003582 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f974 	bl	8003864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f97b 	bl	8003878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f003 0310 	and.w	r3, r3, #16
 800358e:	2b00      	cmp	r3, #0
 8003590:	d020      	beq.n	80035d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f003 0310 	and.w	r3, r3, #16
 8003598:	2b00      	cmp	r3, #0
 800359a:	d01b      	beq.n	80035d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0210 	mvn.w	r2, #16
 80035a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2208      	movs	r2, #8
 80035aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7fd fb10 	bl	8000be0 <HAL_TIM_IC_CaptureCallback>
 80035c0:	e005      	b.n	80035ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f94e 	bl	8003864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f955 	bl	8003878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00c      	beq.n	80035f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d007      	beq.n	80035f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f06f 0201 	mvn.w	r2, #1
 80035f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f92c 	bl	8003850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00c      	beq.n	800361c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003608:	2b00      	cmp	r3, #0
 800360a:	d007      	beq.n	800361c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fbcc 	bl	8003db4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00c      	beq.n	8003640 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800362c:	2b00      	cmp	r3, #0
 800362e:	d007      	beq.n	8003640 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 fbc4 	bl	8003dc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00c      	beq.n	8003664 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003650:	2b00      	cmp	r3, #0
 8003652:	d007      	beq.n	8003664 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800365c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f914 	bl	800388c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00c      	beq.n	8003688 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f003 0320 	and.w	r3, r3, #32
 8003674:	2b00      	cmp	r3, #0
 8003676:	d007      	beq.n	8003688 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0220 	mvn.w	r2, #32
 8003680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fb8c 	bl	8003da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003688:	bf00      	nop
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <HAL_TIM_IC_ConfigChannel+0x1e>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e088      	b.n	80037c0 <HAL_TIM_IC_ConfigChannel+0x130>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d11b      	bne.n	80036f4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80036cc:	f000 f992 	bl	80039f4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699a      	ldr	r2, [r3, #24]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 020c 	bic.w	r2, r2, #12
 80036de:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6999      	ldr	r1, [r3, #24]
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	619a      	str	r2, [r3, #24]
 80036f2:	e060      	b.n	80037b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d11c      	bne.n	8003734 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800370a:	f000 f9e1 	bl	8003ad0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	699a      	ldr	r2, [r3, #24]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800371c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6999      	ldr	r1, [r3, #24]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	021a      	lsls	r2, r3, #8
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	619a      	str	r2, [r3, #24]
 8003732:	e040      	b.n	80037b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b08      	cmp	r3, #8
 8003738:	d11b      	bne.n	8003772 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800374a:	f000 f9fe 	bl	8003b4a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 020c 	bic.w	r2, r2, #12
 800375c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69d9      	ldr	r1, [r3, #28]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	61da      	str	r2, [r3, #28]
 8003770:	e021      	b.n	80037b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b0c      	cmp	r3, #12
 8003776:	d11c      	bne.n	80037b2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003788:	f000 fa1b 	bl	8003bc2 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	69da      	ldr	r2, [r3, #28]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800379a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	69d9      	ldr	r1, [r3, #28]
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	021a      	lsls	r2, r3, #8
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	61da      	str	r2, [r3, #28]
 80037b0:	e001      	b.n	80037b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037be:	7dfb      	ldrb	r3, [r7, #23]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b0c      	cmp	r3, #12
 80037da:	d831      	bhi.n	8003840 <HAL_TIM_ReadCapturedValue+0x78>
 80037dc:	a201      	add	r2, pc, #4	@ (adr r2, 80037e4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80037de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e2:	bf00      	nop
 80037e4:	08003819 	.word	0x08003819
 80037e8:	08003841 	.word	0x08003841
 80037ec:	08003841 	.word	0x08003841
 80037f0:	08003841 	.word	0x08003841
 80037f4:	08003823 	.word	0x08003823
 80037f8:	08003841 	.word	0x08003841
 80037fc:	08003841 	.word	0x08003841
 8003800:	08003841 	.word	0x08003841
 8003804:	0800382d 	.word	0x0800382d
 8003808:	08003841 	.word	0x08003841
 800380c:	08003841 	.word	0x08003841
 8003810:	08003841 	.word	0x08003841
 8003814:	08003837 	.word	0x08003837
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800381e:	60fb      	str	r3, [r7, #12]

      break;
 8003820:	e00f      	b.n	8003842 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003828:	60fb      	str	r3, [r7, #12]

      break;
 800382a:	e00a      	b.n	8003842 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003832:	60fb      	str	r3, [r7, #12]

      break;
 8003834:	e005      	b.n	8003842 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383c:	60fb      	str	r3, [r7, #12]

      break;
 800383e:	e000      	b.n	8003842 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003840:	bf00      	nop
  }

  return tmpreg;
 8003842:	68fb      	ldr	r3, [r7, #12]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a48      	ldr	r2, [pc, #288]	@ (80039d4 <TIM_Base_SetConfig+0x134>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d013      	beq.n	80038e0 <TIM_Base_SetConfig+0x40>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038be:	d00f      	beq.n	80038e0 <TIM_Base_SetConfig+0x40>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a45      	ldr	r2, [pc, #276]	@ (80039d8 <TIM_Base_SetConfig+0x138>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d00b      	beq.n	80038e0 <TIM_Base_SetConfig+0x40>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a44      	ldr	r2, [pc, #272]	@ (80039dc <TIM_Base_SetConfig+0x13c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d007      	beq.n	80038e0 <TIM_Base_SetConfig+0x40>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a43      	ldr	r2, [pc, #268]	@ (80039e0 <TIM_Base_SetConfig+0x140>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d003      	beq.n	80038e0 <TIM_Base_SetConfig+0x40>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a42      	ldr	r2, [pc, #264]	@ (80039e4 <TIM_Base_SetConfig+0x144>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d108      	bne.n	80038f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a37      	ldr	r2, [pc, #220]	@ (80039d4 <TIM_Base_SetConfig+0x134>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d01f      	beq.n	800393a <TIM_Base_SetConfig+0x9a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003900:	d01b      	beq.n	800393a <TIM_Base_SetConfig+0x9a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a34      	ldr	r2, [pc, #208]	@ (80039d8 <TIM_Base_SetConfig+0x138>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d017      	beq.n	800393a <TIM_Base_SetConfig+0x9a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a33      	ldr	r2, [pc, #204]	@ (80039dc <TIM_Base_SetConfig+0x13c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d013      	beq.n	800393a <TIM_Base_SetConfig+0x9a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a32      	ldr	r2, [pc, #200]	@ (80039e0 <TIM_Base_SetConfig+0x140>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d00f      	beq.n	800393a <TIM_Base_SetConfig+0x9a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a32      	ldr	r2, [pc, #200]	@ (80039e8 <TIM_Base_SetConfig+0x148>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d00b      	beq.n	800393a <TIM_Base_SetConfig+0x9a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a31      	ldr	r2, [pc, #196]	@ (80039ec <TIM_Base_SetConfig+0x14c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d007      	beq.n	800393a <TIM_Base_SetConfig+0x9a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a30      	ldr	r2, [pc, #192]	@ (80039f0 <TIM_Base_SetConfig+0x150>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d003      	beq.n	800393a <TIM_Base_SetConfig+0x9a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a2b      	ldr	r2, [pc, #172]	@ (80039e4 <TIM_Base_SetConfig+0x144>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d108      	bne.n	800394c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4313      	orrs	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a18      	ldr	r2, [pc, #96]	@ (80039d4 <TIM_Base_SetConfig+0x134>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d013      	beq.n	80039a0 <TIM_Base_SetConfig+0x100>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a19      	ldr	r2, [pc, #100]	@ (80039e0 <TIM_Base_SetConfig+0x140>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d00f      	beq.n	80039a0 <TIM_Base_SetConfig+0x100>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a19      	ldr	r2, [pc, #100]	@ (80039e8 <TIM_Base_SetConfig+0x148>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00b      	beq.n	80039a0 <TIM_Base_SetConfig+0x100>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a18      	ldr	r2, [pc, #96]	@ (80039ec <TIM_Base_SetConfig+0x14c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d007      	beq.n	80039a0 <TIM_Base_SetConfig+0x100>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a17      	ldr	r2, [pc, #92]	@ (80039f0 <TIM_Base_SetConfig+0x150>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d003      	beq.n	80039a0 <TIM_Base_SetConfig+0x100>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a12      	ldr	r2, [pc, #72]	@ (80039e4 <TIM_Base_SetConfig+0x144>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d103      	bne.n	80039a8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d105      	bne.n	80039c6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f023 0201 	bic.w	r2, r3, #1
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	611a      	str	r2, [r3, #16]
  }
}
 80039c6:	bf00      	nop
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40012c00 	.word	0x40012c00
 80039d8:	40000400 	.word	0x40000400
 80039dc:	40000800 	.word	0x40000800
 80039e0:	40013400 	.word	0x40013400
 80039e4:	40015000 	.word	0x40015000
 80039e8:	40014000 	.word	0x40014000
 80039ec:	40014400 	.word	0x40014400
 80039f0:	40014800 	.word	0x40014800

080039f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	f023 0201 	bic.w	r2, r3, #1
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4a26      	ldr	r2, [pc, #152]	@ (8003ab8 <TIM_TI1_SetConfig+0xc4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d017      	beq.n	8003a52 <TIM_TI1_SetConfig+0x5e>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a28:	d013      	beq.n	8003a52 <TIM_TI1_SetConfig+0x5e>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4a23      	ldr	r2, [pc, #140]	@ (8003abc <TIM_TI1_SetConfig+0xc8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d00f      	beq.n	8003a52 <TIM_TI1_SetConfig+0x5e>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4a22      	ldr	r2, [pc, #136]	@ (8003ac0 <TIM_TI1_SetConfig+0xcc>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00b      	beq.n	8003a52 <TIM_TI1_SetConfig+0x5e>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4a21      	ldr	r2, [pc, #132]	@ (8003ac4 <TIM_TI1_SetConfig+0xd0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d007      	beq.n	8003a52 <TIM_TI1_SetConfig+0x5e>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4a20      	ldr	r2, [pc, #128]	@ (8003ac8 <TIM_TI1_SetConfig+0xd4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d003      	beq.n	8003a52 <TIM_TI1_SetConfig+0x5e>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4a1f      	ldr	r2, [pc, #124]	@ (8003acc <TIM_TI1_SetConfig+0xd8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d101      	bne.n	8003a56 <TIM_TI1_SetConfig+0x62>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <TIM_TI1_SetConfig+0x64>
 8003a56:	2300      	movs	r3, #0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d008      	beq.n	8003a6e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f023 0303 	bic.w	r3, r3, #3
 8003a62:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	e003      	b.n	8003a76 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f023 030a 	bic.w	r3, r3, #10
 8003a90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f003 030a 	and.w	r3, r3, #10
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	621a      	str	r2, [r3, #32]
}
 8003aaa:	bf00      	nop
 8003aac:	371c      	adds	r7, #28
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	40012c00 	.word	0x40012c00
 8003abc:	40000400 	.word	0x40000400
 8003ac0:	40000800 	.word	0x40000800
 8003ac4:	40013400 	.word	0x40013400
 8003ac8:	40014000 	.word	0x40014000
 8003acc:	40015000 	.word	0x40015000

08003ad0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	f023 0210 	bic.w	r2, r3, #16
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003afc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	021b      	lsls	r3, r3, #8
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	031b      	lsls	r3, r3, #12
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b22:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	621a      	str	r2, [r3, #32]
}
 8003b3e:	bf00      	nop
 8003b40:	371c      	adds	r7, #28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b087      	sub	sp, #28
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	607a      	str	r2, [r7, #4]
 8003b56:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	f023 0303 	bic.w	r3, r3, #3
 8003b76:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b86:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003b9a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	021b      	lsls	r3, r3, #8
 8003ba0:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	621a      	str	r2, [r3, #32]
}
 8003bb6:	bf00      	nop
 8003bb8:	371c      	adds	r7, #28
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b087      	sub	sp, #28
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	607a      	str	r2, [r7, #4]
 8003bce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bee:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	021b      	lsls	r3, r3, #8
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c00:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	031b      	lsls	r3, r3, #12
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003c14:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	031b      	lsls	r3, r3, #12
 8003c1a:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	621a      	str	r2, [r3, #32]
}
 8003c30:	bf00      	nop
 8003c32:	371c      	adds	r7, #28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f003 031f 	and.w	r3, r3, #31
 8003c4e:	2201      	movs	r2, #1
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a1a      	ldr	r2, [r3, #32]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	401a      	ands	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a1a      	ldr	r2, [r3, #32]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f003 031f 	and.w	r3, r3, #31
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	fa01 f303 	lsl.w	r3, r1, r3
 8003c74:	431a      	orrs	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	621a      	str	r2, [r3, #32]
}
 8003c7a:	bf00      	nop
 8003c7c:	371c      	adds	r7, #28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
	...

08003c88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	e06d      	b.n	8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a30      	ldr	r2, [pc, #192]	@ (8003d88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d009      	beq.n	8003cde <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a2f      	ldr	r2, [pc, #188]	@ (8003d8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d004      	beq.n	8003cde <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a2d      	ldr	r2, [pc, #180]	@ (8003d90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d108      	bne.n	8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003ce4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8003d88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d01d      	beq.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d1c:	d018      	beq.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a1c      	ldr	r2, [pc, #112]	@ (8003d94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d013      	beq.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a1a      	ldr	r2, [pc, #104]	@ (8003d98 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d00e      	beq.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a15      	ldr	r2, [pc, #84]	@ (8003d8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d009      	beq.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a16      	ldr	r2, [pc, #88]	@ (8003d9c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d004      	beq.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a11      	ldr	r2, [pc, #68]	@ (8003d90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d10c      	bne.n	8003d6a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr
 8003d88:	40012c00 	.word	0x40012c00
 8003d8c:	40013400 	.word	0x40013400
 8003d90:	40015000 	.word	0x40015000
 8003d94:	40000400 	.word	0x40000400
 8003d98:	40000800 	.word	0x40000800
 8003d9c:	40014000 	.word	0x40014000

08003da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e040      	b.n	8003e70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d106      	bne.n	8003e04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7fd f966 	bl	80010d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2224      	movs	r2, #36	@ 0x24
 8003e08:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0201 	bic.w	r2, r2, #1
 8003e18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f9fc 	bl	8004220 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 f825 	bl	8003e78 <UART_SetConfig>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d101      	bne.n	8003e38 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e01b      	b.n	8003e70 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 fa7b 	bl	8004364 <UART_CheckIdleState>
 8003e6e:	4603      	mov	r3, r0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b088      	sub	sp, #32
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e80:	2300      	movs	r3, #0
 8003e82:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	4b92      	ldr	r3, [pc, #584]	@ (80040ec <UART_SetConfig+0x274>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6812      	ldr	r2, [r2, #0]
 8003eaa:	6979      	ldr	r1, [r7, #20]
 8003eac:	430b      	orrs	r3, r1
 8003eae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a80      	ldr	r2, [pc, #512]	@ (80040f0 <UART_SetConfig+0x278>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d120      	bne.n	8003f36 <UART_SetConfig+0xbe>
 8003ef4:	4b7f      	ldr	r3, [pc, #508]	@ (80040f4 <UART_SetConfig+0x27c>)
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef8:	f003 0303 	and.w	r3, r3, #3
 8003efc:	2b03      	cmp	r3, #3
 8003efe:	d817      	bhi.n	8003f30 <UART_SetConfig+0xb8>
 8003f00:	a201      	add	r2, pc, #4	@ (adr r2, 8003f08 <UART_SetConfig+0x90>)
 8003f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f06:	bf00      	nop
 8003f08:	08003f19 	.word	0x08003f19
 8003f0c:	08003f25 	.word	0x08003f25
 8003f10:	08003f2b 	.word	0x08003f2b
 8003f14:	08003f1f 	.word	0x08003f1f
 8003f18:	2301      	movs	r3, #1
 8003f1a:	77fb      	strb	r3, [r7, #31]
 8003f1c:	e0b5      	b.n	800408a <UART_SetConfig+0x212>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	77fb      	strb	r3, [r7, #31]
 8003f22:	e0b2      	b.n	800408a <UART_SetConfig+0x212>
 8003f24:	2304      	movs	r3, #4
 8003f26:	77fb      	strb	r3, [r7, #31]
 8003f28:	e0af      	b.n	800408a <UART_SetConfig+0x212>
 8003f2a:	2308      	movs	r3, #8
 8003f2c:	77fb      	strb	r3, [r7, #31]
 8003f2e:	e0ac      	b.n	800408a <UART_SetConfig+0x212>
 8003f30:	2310      	movs	r3, #16
 8003f32:	77fb      	strb	r3, [r7, #31]
 8003f34:	e0a9      	b.n	800408a <UART_SetConfig+0x212>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a6f      	ldr	r2, [pc, #444]	@ (80040f8 <UART_SetConfig+0x280>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d124      	bne.n	8003f8a <UART_SetConfig+0x112>
 8003f40:	4b6c      	ldr	r3, [pc, #432]	@ (80040f4 <UART_SetConfig+0x27c>)
 8003f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f4c:	d011      	beq.n	8003f72 <UART_SetConfig+0xfa>
 8003f4e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f52:	d817      	bhi.n	8003f84 <UART_SetConfig+0x10c>
 8003f54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f58:	d011      	beq.n	8003f7e <UART_SetConfig+0x106>
 8003f5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f5e:	d811      	bhi.n	8003f84 <UART_SetConfig+0x10c>
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <UART_SetConfig+0xf4>
 8003f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f68:	d006      	beq.n	8003f78 <UART_SetConfig+0x100>
 8003f6a:	e00b      	b.n	8003f84 <UART_SetConfig+0x10c>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	e08b      	b.n	800408a <UART_SetConfig+0x212>
 8003f72:	2302      	movs	r3, #2
 8003f74:	77fb      	strb	r3, [r7, #31]
 8003f76:	e088      	b.n	800408a <UART_SetConfig+0x212>
 8003f78:	2304      	movs	r3, #4
 8003f7a:	77fb      	strb	r3, [r7, #31]
 8003f7c:	e085      	b.n	800408a <UART_SetConfig+0x212>
 8003f7e:	2308      	movs	r3, #8
 8003f80:	77fb      	strb	r3, [r7, #31]
 8003f82:	e082      	b.n	800408a <UART_SetConfig+0x212>
 8003f84:	2310      	movs	r3, #16
 8003f86:	77fb      	strb	r3, [r7, #31]
 8003f88:	e07f      	b.n	800408a <UART_SetConfig+0x212>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a5b      	ldr	r2, [pc, #364]	@ (80040fc <UART_SetConfig+0x284>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d124      	bne.n	8003fde <UART_SetConfig+0x166>
 8003f94:	4b57      	ldr	r3, [pc, #348]	@ (80040f4 <UART_SetConfig+0x27c>)
 8003f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f98:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003f9c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003fa0:	d011      	beq.n	8003fc6 <UART_SetConfig+0x14e>
 8003fa2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003fa6:	d817      	bhi.n	8003fd8 <UART_SetConfig+0x160>
 8003fa8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003fac:	d011      	beq.n	8003fd2 <UART_SetConfig+0x15a>
 8003fae:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003fb2:	d811      	bhi.n	8003fd8 <UART_SetConfig+0x160>
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <UART_SetConfig+0x148>
 8003fb8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003fbc:	d006      	beq.n	8003fcc <UART_SetConfig+0x154>
 8003fbe:	e00b      	b.n	8003fd8 <UART_SetConfig+0x160>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	77fb      	strb	r3, [r7, #31]
 8003fc4:	e061      	b.n	800408a <UART_SetConfig+0x212>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	77fb      	strb	r3, [r7, #31]
 8003fca:	e05e      	b.n	800408a <UART_SetConfig+0x212>
 8003fcc:	2304      	movs	r3, #4
 8003fce:	77fb      	strb	r3, [r7, #31]
 8003fd0:	e05b      	b.n	800408a <UART_SetConfig+0x212>
 8003fd2:	2308      	movs	r3, #8
 8003fd4:	77fb      	strb	r3, [r7, #31]
 8003fd6:	e058      	b.n	800408a <UART_SetConfig+0x212>
 8003fd8:	2310      	movs	r3, #16
 8003fda:	77fb      	strb	r3, [r7, #31]
 8003fdc:	e055      	b.n	800408a <UART_SetConfig+0x212>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a47      	ldr	r2, [pc, #284]	@ (8004100 <UART_SetConfig+0x288>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d124      	bne.n	8004032 <UART_SetConfig+0x1ba>
 8003fe8:	4b42      	ldr	r3, [pc, #264]	@ (80040f4 <UART_SetConfig+0x27c>)
 8003fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fec:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003ff0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ff4:	d011      	beq.n	800401a <UART_SetConfig+0x1a2>
 8003ff6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ffa:	d817      	bhi.n	800402c <UART_SetConfig+0x1b4>
 8003ffc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004000:	d011      	beq.n	8004026 <UART_SetConfig+0x1ae>
 8004002:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004006:	d811      	bhi.n	800402c <UART_SetConfig+0x1b4>
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <UART_SetConfig+0x19c>
 800400c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004010:	d006      	beq.n	8004020 <UART_SetConfig+0x1a8>
 8004012:	e00b      	b.n	800402c <UART_SetConfig+0x1b4>
 8004014:	2300      	movs	r3, #0
 8004016:	77fb      	strb	r3, [r7, #31]
 8004018:	e037      	b.n	800408a <UART_SetConfig+0x212>
 800401a:	2302      	movs	r3, #2
 800401c:	77fb      	strb	r3, [r7, #31]
 800401e:	e034      	b.n	800408a <UART_SetConfig+0x212>
 8004020:	2304      	movs	r3, #4
 8004022:	77fb      	strb	r3, [r7, #31]
 8004024:	e031      	b.n	800408a <UART_SetConfig+0x212>
 8004026:	2308      	movs	r3, #8
 8004028:	77fb      	strb	r3, [r7, #31]
 800402a:	e02e      	b.n	800408a <UART_SetConfig+0x212>
 800402c:	2310      	movs	r3, #16
 800402e:	77fb      	strb	r3, [r7, #31]
 8004030:	e02b      	b.n	800408a <UART_SetConfig+0x212>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a33      	ldr	r2, [pc, #204]	@ (8004104 <UART_SetConfig+0x28c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d124      	bne.n	8004086 <UART_SetConfig+0x20e>
 800403c:	4b2d      	ldr	r3, [pc, #180]	@ (80040f4 <UART_SetConfig+0x27c>)
 800403e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004040:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004044:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004048:	d011      	beq.n	800406e <UART_SetConfig+0x1f6>
 800404a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800404e:	d817      	bhi.n	8004080 <UART_SetConfig+0x208>
 8004050:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004054:	d011      	beq.n	800407a <UART_SetConfig+0x202>
 8004056:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800405a:	d811      	bhi.n	8004080 <UART_SetConfig+0x208>
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <UART_SetConfig+0x1f0>
 8004060:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004064:	d006      	beq.n	8004074 <UART_SetConfig+0x1fc>
 8004066:	e00b      	b.n	8004080 <UART_SetConfig+0x208>
 8004068:	2300      	movs	r3, #0
 800406a:	77fb      	strb	r3, [r7, #31]
 800406c:	e00d      	b.n	800408a <UART_SetConfig+0x212>
 800406e:	2302      	movs	r3, #2
 8004070:	77fb      	strb	r3, [r7, #31]
 8004072:	e00a      	b.n	800408a <UART_SetConfig+0x212>
 8004074:	2304      	movs	r3, #4
 8004076:	77fb      	strb	r3, [r7, #31]
 8004078:	e007      	b.n	800408a <UART_SetConfig+0x212>
 800407a:	2308      	movs	r3, #8
 800407c:	77fb      	strb	r3, [r7, #31]
 800407e:	e004      	b.n	800408a <UART_SetConfig+0x212>
 8004080:	2310      	movs	r3, #16
 8004082:	77fb      	strb	r3, [r7, #31]
 8004084:	e001      	b.n	800408a <UART_SetConfig+0x212>
 8004086:	2310      	movs	r3, #16
 8004088:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004092:	d16b      	bne.n	800416c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004094:	7ffb      	ldrb	r3, [r7, #31]
 8004096:	2b08      	cmp	r3, #8
 8004098:	d838      	bhi.n	800410c <UART_SetConfig+0x294>
 800409a:	a201      	add	r2, pc, #4	@ (adr r2, 80040a0 <UART_SetConfig+0x228>)
 800409c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a0:	080040c5 	.word	0x080040c5
 80040a4:	080040cd 	.word	0x080040cd
 80040a8:	080040d5 	.word	0x080040d5
 80040ac:	0800410d 	.word	0x0800410d
 80040b0:	080040db 	.word	0x080040db
 80040b4:	0800410d 	.word	0x0800410d
 80040b8:	0800410d 	.word	0x0800410d
 80040bc:	0800410d 	.word	0x0800410d
 80040c0:	080040e3 	.word	0x080040e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040c4:	f7fe fdde 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 80040c8:	61b8      	str	r0, [r7, #24]
        break;
 80040ca:	e024      	b.n	8004116 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040cc:	f7fe fdfc 	bl	8002cc8 <HAL_RCC_GetPCLK2Freq>
 80040d0:	61b8      	str	r0, [r7, #24]
        break;
 80040d2:	e020      	b.n	8004116 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004108 <UART_SetConfig+0x290>)
 80040d6:	61bb      	str	r3, [r7, #24]
        break;
 80040d8:	e01d      	b.n	8004116 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040da:	f7fe fd73 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 80040de:	61b8      	str	r0, [r7, #24]
        break;
 80040e0:	e019      	b.n	8004116 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040e6:	61bb      	str	r3, [r7, #24]
        break;
 80040e8:	e015      	b.n	8004116 <UART_SetConfig+0x29e>
 80040ea:	bf00      	nop
 80040ec:	efff69f3 	.word	0xefff69f3
 80040f0:	40013800 	.word	0x40013800
 80040f4:	40021000 	.word	0x40021000
 80040f8:	40004400 	.word	0x40004400
 80040fc:	40004800 	.word	0x40004800
 8004100:	40004c00 	.word	0x40004c00
 8004104:	40005000 	.word	0x40005000
 8004108:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	77bb      	strb	r3, [r7, #30]
        break;
 8004114:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d073      	beq.n	8004204 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	005a      	lsls	r2, r3, #1
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	085b      	lsrs	r3, r3, #1
 8004126:	441a      	add	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004130:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	2b0f      	cmp	r3, #15
 8004136:	d916      	bls.n	8004166 <UART_SetConfig+0x2ee>
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800413e:	d212      	bcs.n	8004166 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	b29b      	uxth	r3, r3
 8004144:	f023 030f 	bic.w	r3, r3, #15
 8004148:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	085b      	lsrs	r3, r3, #1
 800414e:	b29b      	uxth	r3, r3
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	b29a      	uxth	r2, r3
 8004156:	89fb      	ldrh	r3, [r7, #14]
 8004158:	4313      	orrs	r3, r2
 800415a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	89fa      	ldrh	r2, [r7, #14]
 8004162:	60da      	str	r2, [r3, #12]
 8004164:	e04e      	b.n	8004204 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	77bb      	strb	r3, [r7, #30]
 800416a:	e04b      	b.n	8004204 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800416c:	7ffb      	ldrb	r3, [r7, #31]
 800416e:	2b08      	cmp	r3, #8
 8004170:	d827      	bhi.n	80041c2 <UART_SetConfig+0x34a>
 8004172:	a201      	add	r2, pc, #4	@ (adr r2, 8004178 <UART_SetConfig+0x300>)
 8004174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004178:	0800419d 	.word	0x0800419d
 800417c:	080041a5 	.word	0x080041a5
 8004180:	080041ad 	.word	0x080041ad
 8004184:	080041c3 	.word	0x080041c3
 8004188:	080041b3 	.word	0x080041b3
 800418c:	080041c3 	.word	0x080041c3
 8004190:	080041c3 	.word	0x080041c3
 8004194:	080041c3 	.word	0x080041c3
 8004198:	080041bb 	.word	0x080041bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800419c:	f7fe fd72 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 80041a0:	61b8      	str	r0, [r7, #24]
        break;
 80041a2:	e013      	b.n	80041cc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041a4:	f7fe fd90 	bl	8002cc8 <HAL_RCC_GetPCLK2Freq>
 80041a8:	61b8      	str	r0, [r7, #24]
        break;
 80041aa:	e00f      	b.n	80041cc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041ac:	4b1b      	ldr	r3, [pc, #108]	@ (800421c <UART_SetConfig+0x3a4>)
 80041ae:	61bb      	str	r3, [r7, #24]
        break;
 80041b0:	e00c      	b.n	80041cc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041b2:	f7fe fd07 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 80041b6:	61b8      	str	r0, [r7, #24]
        break;
 80041b8:	e008      	b.n	80041cc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041be:	61bb      	str	r3, [r7, #24]
        break;
 80041c0:	e004      	b.n	80041cc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80041c2:	2300      	movs	r3, #0
 80041c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	77bb      	strb	r3, [r7, #30]
        break;
 80041ca:	bf00      	nop
    }

    if (pclk != 0U)
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d018      	beq.n	8004204 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	085a      	lsrs	r2, r3, #1
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	441a      	add	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	2b0f      	cmp	r3, #15
 80041ea:	d909      	bls.n	8004200 <UART_SetConfig+0x388>
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041f2:	d205      	bcs.n	8004200 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	60da      	str	r2, [r3, #12]
 80041fe:	e001      	b.n	8004204 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004210:	7fbb      	ldrb	r3, [r7, #30]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3720      	adds	r7, #32
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	007a1200 	.word	0x007a1200

08004220 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422c:	f003 0308 	and.w	r3, r3, #8
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00a      	beq.n	800424a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00a      	beq.n	800428e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	f003 0310 	and.w	r3, r3, #16
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00a      	beq.n	80042d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d6:	f003 0320 	and.w	r3, r3, #32
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00a      	beq.n	80042f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d01a      	beq.n	8004336 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800431e:	d10a      	bne.n	8004336 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	605a      	str	r2, [r3, #4]
  }
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b098      	sub	sp, #96	@ 0x60
 8004368:	af02      	add	r7, sp, #8
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004374:	f7fc ff72 	bl	800125c <HAL_GetTick>
 8004378:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	2b08      	cmp	r3, #8
 8004386:	d12e      	bne.n	80043e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004388:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004390:	2200      	movs	r2, #0
 8004392:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f88c 	bl	80044b4 <UART_WaitOnFlagUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d021      	beq.n	80043e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043aa:	e853 3f00 	ldrex	r3, [r3]
 80043ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	461a      	mov	r2, r3
 80043be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80043c2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043c8:	e841 2300 	strex	r3, r2, [r1]
 80043cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1e6      	bne.n	80043a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2220      	movs	r2, #32
 80043d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e062      	b.n	80044ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b04      	cmp	r3, #4
 80043f2:	d149      	bne.n	8004488 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043fc:	2200      	movs	r2, #0
 80043fe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f856 	bl	80044b4 <UART_WaitOnFlagUntilTimeout>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d03c      	beq.n	8004488 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004416:	e853 3f00 	ldrex	r3, [r3]
 800441a:	623b      	str	r3, [r7, #32]
   return(result);
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004422:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800442c:	633b      	str	r3, [r7, #48]	@ 0x30
 800442e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004430:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004434:	e841 2300 	strex	r3, r2, [r1]
 8004438:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800443a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e6      	bne.n	800440e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3308      	adds	r3, #8
 8004446:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	e853 3f00 	ldrex	r3, [r3]
 800444e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f023 0301 	bic.w	r3, r3, #1
 8004456:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3308      	adds	r3, #8
 800445e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004460:	61fa      	str	r2, [r7, #28]
 8004462:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004464:	69b9      	ldr	r1, [r7, #24]
 8004466:	69fa      	ldr	r2, [r7, #28]
 8004468:	e841 2300 	strex	r3, r2, [r1]
 800446c:	617b      	str	r3, [r7, #20]
   return(result);
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1e5      	bne.n	8004440 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2220      	movs	r2, #32
 8004478:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e011      	b.n	80044ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2220      	movs	r2, #32
 800448c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2220      	movs	r2, #32
 8004492:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3758      	adds	r7, #88	@ 0x58
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	4613      	mov	r3, r2
 80044c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044c4:	e04f      	b.n	8004566 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044cc:	d04b      	beq.n	8004566 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ce:	f7fc fec5 	bl	800125c <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d302      	bcc.n	80044e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e04e      	b.n	8004586 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0304 	and.w	r3, r3, #4
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d037      	beq.n	8004566 <UART_WaitOnFlagUntilTimeout+0xb2>
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2b80      	cmp	r3, #128	@ 0x80
 80044fa:	d034      	beq.n	8004566 <UART_WaitOnFlagUntilTimeout+0xb2>
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2b40      	cmp	r3, #64	@ 0x40
 8004500:	d031      	beq.n	8004566 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	f003 0308 	and.w	r3, r3, #8
 800450c:	2b08      	cmp	r3, #8
 800450e:	d110      	bne.n	8004532 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2208      	movs	r2, #8
 8004516:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 f838 	bl	800458e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2208      	movs	r2, #8
 8004522:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e029      	b.n	8004586 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800453c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004540:	d111      	bne.n	8004566 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800454a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 f81e 	bl	800458e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2220      	movs	r2, #32
 8004556:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e00f      	b.n	8004586 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69da      	ldr	r2, [r3, #28]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4013      	ands	r3, r2
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	429a      	cmp	r2, r3
 8004574:	bf0c      	ite	eq
 8004576:	2301      	moveq	r3, #1
 8004578:	2300      	movne	r3, #0
 800457a:	b2db      	uxtb	r3, r3
 800457c:	461a      	mov	r2, r3
 800457e:	79fb      	ldrb	r3, [r7, #7]
 8004580:	429a      	cmp	r2, r3
 8004582:	d0a0      	beq.n	80044c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800458e:	b480      	push	{r7}
 8004590:	b095      	sub	sp, #84	@ 0x54
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800459e:	e853 3f00 	ldrex	r3, [r3]
 80045a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	461a      	mov	r2, r3
 80045b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80045b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045bc:	e841 2300 	strex	r3, r2, [r1]
 80045c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1e6      	bne.n	8004596 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	3308      	adds	r3, #8
 80045ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	e853 3f00 	ldrex	r3, [r3]
 80045d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	f023 0301 	bic.w	r3, r3, #1
 80045de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3308      	adds	r3, #8
 80045e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045f0:	e841 2300 	strex	r3, r2, [r1]
 80045f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e5      	bne.n	80045c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004600:	2b01      	cmp	r3, #1
 8004602:	d118      	bne.n	8004636 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	e853 3f00 	ldrex	r3, [r3]
 8004610:	60bb      	str	r3, [r7, #8]
   return(result);
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f023 0310 	bic.w	r3, r3, #16
 8004618:	647b      	str	r3, [r7, #68]	@ 0x44
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004622:	61bb      	str	r3, [r7, #24]
 8004624:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004626:	6979      	ldr	r1, [r7, #20]
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	e841 2300 	strex	r3, r2, [r1]
 800462e:	613b      	str	r3, [r7, #16]
   return(result);
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1e6      	bne.n	8004604 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2220      	movs	r2, #32
 800463a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800464a:	bf00      	nop
 800464c:	3754      	adds	r7, #84	@ 0x54
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <memset>:
 8004656:	4402      	add	r2, r0
 8004658:	4603      	mov	r3, r0
 800465a:	4293      	cmp	r3, r2
 800465c:	d100      	bne.n	8004660 <memset+0xa>
 800465e:	4770      	bx	lr
 8004660:	f803 1b01 	strb.w	r1, [r3], #1
 8004664:	e7f9      	b.n	800465a <memset+0x4>
	...

08004668 <__libc_init_array>:
 8004668:	b570      	push	{r4, r5, r6, lr}
 800466a:	4d0d      	ldr	r5, [pc, #52]	@ (80046a0 <__libc_init_array+0x38>)
 800466c:	4c0d      	ldr	r4, [pc, #52]	@ (80046a4 <__libc_init_array+0x3c>)
 800466e:	1b64      	subs	r4, r4, r5
 8004670:	10a4      	asrs	r4, r4, #2
 8004672:	2600      	movs	r6, #0
 8004674:	42a6      	cmp	r6, r4
 8004676:	d109      	bne.n	800468c <__libc_init_array+0x24>
 8004678:	4d0b      	ldr	r5, [pc, #44]	@ (80046a8 <__libc_init_array+0x40>)
 800467a:	4c0c      	ldr	r4, [pc, #48]	@ (80046ac <__libc_init_array+0x44>)
 800467c:	f000 f818 	bl	80046b0 <_init>
 8004680:	1b64      	subs	r4, r4, r5
 8004682:	10a4      	asrs	r4, r4, #2
 8004684:	2600      	movs	r6, #0
 8004686:	42a6      	cmp	r6, r4
 8004688:	d105      	bne.n	8004696 <__libc_init_array+0x2e>
 800468a:	bd70      	pop	{r4, r5, r6, pc}
 800468c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004690:	4798      	blx	r3
 8004692:	3601      	adds	r6, #1
 8004694:	e7ee      	b.n	8004674 <__libc_init_array+0xc>
 8004696:	f855 3b04 	ldr.w	r3, [r5], #4
 800469a:	4798      	blx	r3
 800469c:	3601      	adds	r6, #1
 800469e:	e7f2      	b.n	8004686 <__libc_init_array+0x1e>
 80046a0:	08004700 	.word	0x08004700
 80046a4:	08004700 	.word	0x08004700
 80046a8:	08004700 	.word	0x08004700
 80046ac:	08004704 	.word	0x08004704

080046b0 <_init>:
 80046b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b2:	bf00      	nop
 80046b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046b6:	bc08      	pop	{r3}
 80046b8:	469e      	mov	lr, r3
 80046ba:	4770      	bx	lr

080046bc <_fini>:
 80046bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046be:	bf00      	nop
 80046c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c2:	bc08      	pop	{r3}
 80046c4:	469e      	mov	lr, r3
 80046c6:	4770      	bx	lr
